<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LIGANG</title>
  
  <subtitle>日拱一卒，功不唐捐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ligang-chn.github.io/"/>
  <updated>2019-06-19T23:53:12.000Z</updated>
  <id>https://ligang-chn.github.io/</id>
  
  <author>
    <name>LIGANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot - 根据配置动态注入Bean</title>
    <link href="https://ligang-chn.github.io/2019/06/17/spring-boot-autowired-by-condition/"/>
    <id>https://ligang-chn.github.io/2019/06/17/spring-boot-autowired-by-condition/</id>
    <published>2019-06-17T15:43:32.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的实际业务开发过程中，往往会有这样的场景：</p><ul><li>一套接口中有多种不同的实现，但在不同的场景下需使用指定的实现方式（比如微信小程序里仅仅支持微信支付）</li><li>在集群环境里，存在一个定时任务，定时任务不可重复执行，因此需限制只在一个节点中执行，其他节点不执行</li></ul><blockquote><p>常规思路中要实现以上的场景需求还是比较麻烦的，可能需要硬编码做 <strong>if</strong> 或者 <strong>swith</strong> 的判断，亦或是使用控制路由在调用的代码里做选择初始化。这些方式都不够优雅，也增强了组件间的耦合性！！！<br>现在SpringBoot里有了 <code>@Conditional</code>注解 和 <code>@ConditionalOnProperty</code>注解，将变得简单许多。</p></blockquote><a id="more"></a><h3 id="ConditionalOnProperty注解介绍"><a href="#ConditionalOnProperty注解介绍" class="headerlink" title="ConditionalOnProperty注解介绍"></a>ConditionalOnProperty注解介绍</h3><p>Spring4.X中新加入了注解<code>@Conditional</code>，可以实现不同条件创建不同的Bean。<br>SpringBoot框架中封装了注解<code>@ConditionalOnProperty</code>，它将配置信息转换成控制某个configuration是否生效的条件。</p><h3 id="ConditionalOnProperty源码解析"><a href="#ConditionalOnProperty源码解析" class="headerlink" title="ConditionalOnProperty源码解析"></a>ConditionalOnProperty源码解析</h3><figure class="highlight java"><figcaption><span>springboot-autoconfigure.jar</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.condition;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(OnPropertyCondition.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnProperty &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String数组 ，对应property名称的值，与name()不可同时使用，</span></span><br><span class="line"><span class="comment">    * 当 value() 所对应配置文件中的值为false时加载配置，不为fasle不加载配置</span></span><br><span class="line"><span class="comment">    * value() 有多个值时，只要有一个值对应为false,则不加载配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置中 property 的前缀，可有可无；可与 value 或 name 组合使用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String数组 ，property完整名称或部分名称，与 value()作用一致但不可同时使用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 比较获取到的属性值与 havingValue() 给定的值是否相同，相同才加载配置；需与 value 或 name 组合使用需</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">String <span class="title">havingValue</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置中缺少对应 property 时是否可以加载；为true时缺少对应配置也可加载</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见：它主要通过几个属性值来实现：</p><ul><li>prefix：属性-配置前缀，可不填；</li><li>name：配置文件application.yml中定义的属性名；</li><li>havingValue：生效时的预期值，一般设置为true。</li></ul><div class="note info">            <p>根据 name 在 application.yml 中获取属性的值，该值与havingValue的值比较，与其相等则当前configuration生效加载此Bean，否则则不生效。当name的值在application.yml 中不存在则返回false。</p>          </div><h3 id="code示例"><a href="#code示例" class="headerlink" title="code示例"></a>code示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPayService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"pay"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"alipay"</span>)</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"payService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPayServiceImlp</span> <span class="keyword">implements</span> <span class="title">IPayService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用支付宝支付"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"pay"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"weixin"</span>)</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"payService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WinxinPayServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPayService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"=====&gt;&gt;&gt;&gt;&gt;使用微信支付"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"test"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TempRestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  IPayService payService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(path = <span class="string">"pay"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    payService.pay();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在指定的节点配置 pay.type=alipay 或者 weixin</p><figure class="highlight plain"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pay.type = alipay</span><br><span class="line">----------</span><br><span class="line">pay.type = weixin</span><br></pre></td></tr></table></figure><h3 id="code示例2"><a href="#code示例2" class="headerlink" title="code示例2"></a>code示例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"scheduling"</span>, name = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkTimer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * *"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在指定的节点加上配置 scheduling.enabled=true，其余节点加上配置scheduling.enabled=false </p><figure class="highlight plain"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheduling.enabled = false   （或为空，此时定时任务不生效）</span><br><span class="line">----------</span><br><span class="line">scheduling.enabled = true    （此时定时任务生效）</span><br></pre></td></tr></table></figure><h3 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h3><p>ConditionalOnProperty注解只能解决简单配置的动态注入，下面还有几种常用的条件注解使用方式，有兴趣的同学可以继续深入学习：</p><ul><li><p>@ConditionalOnBean：基于Bean的条件注解，根据Bean是否存在来判断是否满足条件。（可用于Bean之间相互依赖的场景）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(name=<span class="string">"redisTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisOperBean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate redisTemplate;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RedisOperBean</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tips：不会因为找不到 RestTemplate 的bean，导致无法实例化 RedisOperBean，从而抛出异常</span></span><br></pre></td></tr></table></figure></li><li><p>@ConditionalOnMissingBean：和前面一个作用正好相反的，判断Bean是否不存在</p></li><li><p>@ConditionalOnClass：从使用来看，和 <code>ConditionalOnBean</code>类似，基于class是否存在来做条件判断</p></li><li><p>@ConditionalOnExpression ：基于SPEL表达式的条件注解，执行Spel表达式，根据返回的true/false来判断是否满足条件</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们的实际业务开发过程中，往往会有这样的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一套接口中有多种不同的实现，但在不同的场景下需使用指定的实现方式（比如微信小程序里仅仅支持微信支付）&lt;/li&gt;
&lt;li&gt;在集群环境里，存在一个定时任务，定时任务不可重复执行，因此需限制只在一个节点中执行，其他节点不执行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;常规思路中要实现以上的场景需求还是比较麻烦的，可能需要硬编码做 &lt;strong&gt;if&lt;/strong&gt; 或者 &lt;strong&gt;swith&lt;/strong&gt; 的判断，亦或是使用控制路由在调用的代码里做选择初始化。这些方式都不够优雅，也增强了组件间的耦合性！！！&lt;br&gt;现在SpringBoot里有了 &lt;code&gt;@Conditional&lt;/code&gt;注解 和 &lt;code&gt;@ConditionalOnProperty&lt;/code&gt;注解，将变得简单许多。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://ligang-chn.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="https://ligang-chn.github.io/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="https://ligang-chn.github.io/tags/SpringBoot/"/>
    
      <category term="Conditional" scheme="https://ligang-chn.github.io/tags/Conditional/"/>
    
      <category term="ConditionalOnProperty" scheme="https://ligang-chn.github.io/tags/ConditionalOnProperty/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot - 配置文件外置</title>
    <link href="https://ligang-chn.github.io/2019/06/12/spring-boot-configure-external/"/>
    <id>https://ligang-chn.github.io/2019/06/12/spring-boot-configure-external/</id>
    <published>2019-06-12T10:44:33.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot启动会加载大量的自动配置类，相比以前 XML 的配置方式，很多显式方式申明是不需要的，从而可以更快速的开发。</p><blockquote><p>Spring Boot的配置文件有两种：*<em>.properties *</em>文件和 *<em>.yml *</em>文件。<br>使用固定的 <code>application.properties</code> 或者 <code>application.yml</code> 文件做为全局的配置文件，启动时会扫描它们作为默认配置文件。</p><p>在很多场景下，我们需要去修改配置文件，如：端口、数据库地址等等。把所有配置全都打在包里，显然不是最好的做法，更常见的做法是把配置文件放在外面，可以在需要时不动代码的前提下修改配置。</p></blockquote><p>本文章将介绍如何自定义Sping Boot配置文件的位置。</p><a id="more"></a><h3 id="配置文件默认加载位置"><a href="#配置文件默认加载位置" class="headerlink" title="配置文件默认加载位置"></a>配置文件默认加载位置</h3><p>Spring Boot提供了将配置文件放置到包外面的方法，在没有特殊配置和命令的情况下，启动时会扫描以下位置的默认配置文件以获取配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- file:./config/        # 当前目录下的/config目录</span><br><span class="line">- file:./               # 当前目录</span><br><span class="line">- classpath:/config/    # classpath里的/config目录</span><br><span class="line">- classpath:/           # classpath的跟目录</span><br></pre></td></tr></table></figure><h3 id="配置文件加载优先级"><a href="#配置文件加载优先级" class="headerlink" title="配置文件加载优先级"></a>配置文件加载优先级</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档-SpringBootConfig</a><br>优先级由高到低，高优先级的配置会覆盖低优先级的配置，互补配置。</p><ol><li><p>命令行指定</p><p>我们可以使用 <strong>–spring.config.location=xxx</strong> 这样的命令形式来配置指定目录下的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo.jar --spring.config.location=file:/config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">java -jar -Dspring.config.location=file:/config.yml demo.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是指定目录的话，则路径后必须加 /</span></span><br><span class="line">java -jar demo.jar --spring.config.location=file:/config/</span><br></pre></td></tr></table></figure><p>如果不希望命令行指定配置文件的话，可以在*<em>SpringApplication *</em>中将其禁用 <code>SpringApplication.setAddCommandLineProperties(false)</code></p></li><li><p>JNDI属性 <code>java:comp/env</code></p></li><li><p>操作系统环境变量</p><p>tomcat启动war包应用时 ，在 tomcat/bin 的 catalina.sh文件中增加一行代码:</p><figure class="highlight bash"><figcaption><span>tomcat/bin/catalina.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"<span class="variable">$CATALINA_OPTS</span> -Dspring.config.location=/config.yml"</span></span><br></pre></td></tr></table></figure></li><li><p>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p></li></ol><ol start="5"><li>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</li></ol><ol start="6"><li>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</li></ol><ol start="7"><li>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</li></ol><ol start="8"><li><p>@Configuration注解类上的 <code>@PropertySource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value=&#123;<span class="string">"file:config.properties"</span>&#125;, ignoreResourceNotFound = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootrestdemoApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(SpringbootrestdemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：@PropertySource注解配置路径的方式不适用于 .yml 文件</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot启动会加载大量的自动配置类，相比以前 XML 的配置方式，很多显式方式申明是不需要的，从而可以更快速的开发。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Boot的配置文件有两种：*&lt;em&gt;.properties *&lt;/em&gt;文件和 *&lt;em&gt;.yml *&lt;/em&gt;文件。&lt;br&gt;使用固定的 &lt;code&gt;application.properties&lt;/code&gt; 或者 &lt;code&gt;application.yml&lt;/code&gt; 文件做为全局的配置文件，启动时会扫描它们作为默认配置文件。&lt;/p&gt;
&lt;p&gt;在很多场景下，我们需要去修改配置文件，如：端口、数据库地址等等。把所有配置全都打在包里，显然不是最好的做法，更常见的做法是把配置文件放在外面，可以在需要时不动代码的前提下修改配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文章将介绍如何自定义Sping Boot配置文件的位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://ligang-chn.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="https://ligang-chn.github.io/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="https://ligang-chn.github.io/tags/SpringBoot/"/>
    
      <category term="property" scheme="https://ligang-chn.github.io/tags/property/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：性能优化</title>
    <link href="https://ligang-chn.github.io/2019/05/20/hexo-performance-optimization/"/>
    <id>https://ligang-chn.github.io/2019/05/20/hexo-performance-optimization/</id>
    <published>2019-05-20T09:15:23.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在访问很多博客的时候，页面加载和响应速度往往都要上十秒，严重影响用户的体验。<br>本文将探究如何利用常用的方案来进行性能优化，主要包括:</p><ul><li>CDN加速</li><li>Nginx压缩、缓存</li><li>图床</li></ul><a id="more"></a><p>首先，可利用 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a> 帮助分析网页加载速度，根据报告结果和优化建议进行针对性的优化。<br>常见的网站提速方案有：cdn加速，压缩源文件，nginx gzip压缩，减少网站一些不必要的引入，图片大小等。</p><h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><p>在阅读下文之前，如果你还不知道 CDN 是什么，请先移步<a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener">百度百科：CDN词条</a> 进行一些了解。<br>在所有静态资源中，对加载速度影响较大且存在大幅优化空间的主要还是「JavaScript 第三方库」脚本，设定成合适的 CDN 地址，此特性可以加速静态资源的加载。<br>对于我 Hexo 博客来说，NexT 主题已经做好了配置，只需添加 CDN 加载源，将其改为从公共 CDN 加载即可。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>vendors</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># jquery: //cdn.jsdelivr.net/npm/jquery@2/dist/jquery.min.js</span></span><br><span class="line"><span class="comment"># jquery: //cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js</span></span><br><span class="line"><span class="attr">jquery:</span> <span class="string">//cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>比较常用的开源项目 CDN 服务商主要有 unpkg、bootcdn、 cdnjs、jsdelivr 和 cloudflare，本站主要使用 jsdelivr 提供的 CDN 加速服务。</p><h3 id="Nginx压缩、缓存"><a href="#Nginx压缩、缓存" class="headerlink" title="Nginx压缩、缓存"></a>Nginx压缩、缓存</h3><div class="note info">            <p>Nginx 是一个高性能的 Web 服务器，可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等，合理配置可以有效提高网站的响应速度。</p>          </div><h4 id="开启gzip"><a href="#开启gzip" class="headerlink" title="开启gzip"></a>开启gzip</h4><p>gzip压缩页面需要浏览器和服务器双方都支持，实际上就是服务器端压缩，传到浏览器后浏览器解压并解析。<br>修改nginx.conf，在http模块中增加gzip配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#开启gzip压缩;</span><br><span class="line">gzip  on;</span><br><span class="line"></span><br><span class="line">#设置允许压缩的页面最小字节数;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line">#设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line"></span><br><span class="line">#压缩版本</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line">#设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快;级别越高，压缩就越小</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line"></span><br><span class="line">#制定压缩的类型</span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json image/svg+xml application/x-font-ttf font/opentype image/x-icon;</span><br><span class="line"></span><br><span class="line">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span><br><span class="line">gzip_disable "MSIE [1-6]\.";</span><br><span class="line"></span><br><span class="line">#选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写</span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure><h4 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h4><p>修改nginx.conf，在server中配置缓存和失效时间：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">    access_log off;</span><br><span class="line">    expires 30d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">    access_log off;</span><br><span class="line">    expires 24h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(html|htm)$ &#123;</span><br><span class="line">     expires 1h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><div class="note info">            <p>目前各大云服务商都提供了对象存储服务，如七牛云 QINIU、又拍云 USS、腾讯云 COS、阿里云 OSS 等。我们可以使用这些服务器来存储图片信息，并将其称为图床。</p>          </div><p>使用图床的好处：</p><ul><li>可以减轻服务器的存储压力；</li><li>减轻应为图片带来的额外的流量消耗；</li><li>图床一般都是具有cdn加速的，可以让你的网页变得更快。</li></ul><p>我主要是看中了cdn加速这点，这个对网站的性能提升太重要了。</p><p>常用的云存储服务费用对比：</p><table><thead><tr><th align="center">限定符</th><th align="center">免费存储空间</th><th align="center">免费下载流量</th><th align="center">免费请求</th><th align="center">免费时间</th><th align="center">HTTPS</th><th align="center">CDN</th></tr></thead><tbody><tr><td align="center">微博图床</td><td align="center">无限</td><td align="center">无限</td><td align="center">无限</td><td align="center">永久</td><td align="center"><i class="fa fa-close"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">七牛云</td><td align="center">10G</td><td align="center">10G</td><td align="center">PUT: 10万次 <br>GET: 100万次</td><td align="center">永久</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">青云QingStor</td><td align="center">30G</td><td align="center">11G</td><td align="center">PUT: 10万次 <br>GET: 100万次</td><td align="center">12个月</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">又拍云USS</td><td align="center">10G</td><td align="center">15G</td><td align="center">无限</td><td align="center">12个月</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">阿里云OSS</td><td align="center">无</td><td align="center">无</td><td align="center">无</td><td align="center">无</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">腾讯云COS</td><td align="center">50G</td><td align="center">无</td><td align="center">无</td><td align="center">6个月</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-check"></i></td></tr><tr><td align="center">Github</td><td align="center">100G</td><td align="center">无限</td><td align="center">无限</td><td align="center">永久</td><td align="center"><i class="fa fa-check"></i></td><td align="center"><i class="fa fa-close"></i></td></tr></tbody></table><ul><li>七牛云是专业云服务商，提供比较完备的服务，且免费额度足够个人博客使用。</li><li>七牛云的定位就是 CDN，让你在浏览网页的时候最快的接收到页面中的图片、音频等文件，所以非常适合个人、企业用户用来储存站点资源，且CDN加速也不会产生太多的费用。</li><li>微博图床是匿名图床，如果有一天禁止外链访问的话，图片将全部丢失。想着辛辛苦苦制作的图片有丢失的风险，马上就放弃了。【2019年4月微博图床开启了防盗链，对图片 CDN 添加了引用来源<code>Referer</code>检测，对于非微博站内引用的请求统统拒绝访问】</li><li>GitHub 看起来是个不错的选择，但是网络访问速度不是很理想，随即放弃了。</li><li>阿里云OSS也是个不错的选择，有个9元包年40G存储空间，无限流量。</li></ul><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p>综合比较之后：我选择了七牛云的对象存储作为图床(高效、快速、有保障)。<br><img src="https://image.chingow.cn/images/20190610215145_FVk4s5_Screenshot.jpeg" alt="七牛云对象存储" title="七牛云对象存储"></p><h4 id="注册账号并实名认证"><a href="#注册账号并实名认证" class="headerlink" title="注册账号并实名认证"></a>注册账号并实名认证</h4><p>注册 <a href="https://portal.qiniu.com/signup?code=1hjtnnywndb9u" target="_blank" rel="noopener">七牛开发者平台</a> 账号，并前往 <strong>个人中心</strong>  -&gt;  <strong>个人信息</strong> 实名认证。</p><h4 id="新建存储空间"><a href="#新建存储空间" class="headerlink" title="新建存储空间"></a>新建存储空间</h4><ul><li><p>进入控制台，打开 <strong>对象存储</strong>  -&gt; <strong>新建存储空间</strong>， 即可创建新的Bucket。<br>【存储区域】：建议选择一个离你较近的CDN<br>【访问控制】：这里必须选择“公开空间”，因为设置为私有空间，图片的外链是无法访问的。</p></li><li><p>进入新创建的存储空间，在 <strong>空间概览</strong>里点击 <strong>自定义域名</strong> 为空间绑定融合cdn加速域名。详细的参数解释可以参考 <a href="https://developer.qiniu.com/fusion/manual/4939/the-domain-name-to-access" target="_blank" rel="noopener">官方域名接入文档</a> 。<br><img src="https://image.chingow.cn/images/20190610224405_2DZajr_Screenshot.jpeg" alt="自定义域名" title="自定义域名"><br>【域名类型】：如果没有特殊需求，选择普通域名即可。<br>【加速域名】：建议填写的是，您未在使用的二级或三级域名等，请勿轻易绑定www域名避免影响您的源站服务。<br>【源站配置】：当您为存储空间绑定自定义域名的时候，源站配置默认为七牛云存储空间即可。</p></li><li><p>配置CNAME<br>创建加速域名成功后，七牛云会提供CNAME地址，需要在域名服务提供商处将加速域名指向分配的CNAME地址，配置生效后，即可享受CDN加速服务。根据控制台的引导文档并参考 <a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">官方配置域名CNAME文档</a> 。</p></li></ul><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>进入新创建的存储空间，在 <strong>内容管理</strong> 中上传、下载、访问、修改资源，这样就可以使用资源的外链了。<br>上传图片文件以后，复制外链连接就可以利用这个链接访问这个图片了。<br><img src="https://image.chingow.cn/images/20190610224604_5uT2oa_Screenshot.jpeg" alt="使用资源外链" title="使用资源外链"></p><h3 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h3><p>如果每次都需要在web端点击上传图片，然后复制外链的操作就比较麻烦了，使用工具可以让我们更加方便地上传资源。<br>Mac平台上有多款图床工具，找到了几个优秀的工具，做了个对比：</p><style>table th:nth-of-type(2){width: 10%;;}table th:nth-of-type(5){width: 15%;}</style><table><thead><tr><th align="center">名称</th><th align="center">收费标准</th><th align="center">优点</th><th align="center">缺点</th><th align="center">推荐指数</th><th align="center">下载链接</th></tr></thead><tbody><tr><td align="center">ipic</td><td align="center">60元/年</td><td align="center">剪贴板、压缩、拖拽上传，功能强大，支持多种云服务</td><td align="center">免费版只支持微博图床</td><td align="center"><i class="fa fa-star"></i></td><td align="center"><a href="https://itunes.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12" target="_blank" rel="noopener">Mac App Store</a></td></tr><tr><td align="center">PicGo</td><td align="center">免费</td><td align="center">链接上传，支持相册管理</td><td align="center">不支持清除上传历史</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star-half-o"></i></i></i></td><td align="center"><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo.dmg</a></td></tr><tr><td align="center">PicUploader</td><td align="center">免费</td><td align="center">压缩上传，多文件、文件夹同时上传</td><td align="center">不支持顶部菜单</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"></i></i></td><td align="center"><a href="https://github.com/xiebruce/PicUploader/releases" target="_blank" rel="noopener">PicUploader.zip</a></td></tr><tr><td align="center">云存储管理</td><td align="center">免费</td><td align="center">链接上传，可视化相册管理</td><td align="center">上传速度太慢，会卡死（不能忍受(°⌓°;）</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star"></i></i></i></td><td align="center"><a href="https://github.com/willnewii/qiniuClient" target="_blank" rel="noopener">云存储管理客户端</a></td></tr><tr><td align="center">cuImage</td><td align="center">免费</td><td align="center">剪贴板、压缩、拖拽上传，与ipic类似</td><td align="center">仅支持七牛云<br>不支持链接上传</td><td align="center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star">  <i class="fa fa-star-half-o"></i></i></i></i></i></td><td align="center"><a href="https://github.com/hulizhen/cuImage/releases" target="_blank" rel="noopener">Mac App Store</a></td></tr></tbody></table><p>如果是使用七牛云图床我推荐cuImage，它的功能完善，使用剪贴板、拖曳、甚至是快捷键都可以直接将图片上传到云存储，并直接生成Markdown外链，操作十分简便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在访问很多博客的时候，页面加载和响应速度往往都要上十秒，严重影响用户的体验。&lt;br&gt;本文将探究如何利用常用的方案来进行性能优化，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDN加速&lt;/li&gt;
&lt;li&gt;Nginx压缩、缓存&lt;/li&gt;
&lt;li&gt;图床&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
      <category term="七牛云" scheme="https://ligang-chn.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：功能强化</title>
    <link href="https://ligang-chn.github.io/2019/05/19/hexo-function-optimization/"/>
    <id>https://ligang-chn.github.io/2019/05/19/hexo-function-optimization/</id>
    <published>2019-05-19T14:08:03.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.chingow.cn/background/20190602023505_JefG9q_6DE1E34E-037D-4EA6-A8CC-68280E0EAC1D-1264-00000122BCC398FB_tmp.jpeg" alt="Photo in Chongqing Fengjie" title="Photo in Chongqing Fengjie"></p><p>开源的力量让第三方插件的支持越来越多，本文介绍了在如何利用插件来加强网站的功能，主要包括:</p><ul><li>分类时间线</li><li>DaoVoice</li><li>站内搜索</li><li>文章推荐</li><li>Valine评论</li><li>图片灯箱<a id="more"></a></li></ul><h2 id="分类时间线"><a href="#分类时间线" class="headerlink" title="分类时间线"></a>分类时间线</h2><p>归档页面的时间线会让文章显示得很有条理，但是分类里却没有，可以通过修改布局自己实现这个时间线功能。</p><p><img src="https://image.chingow.cn/images/20190602012728_SmUFAI_Screenshot.jpeg?400x" alt="分类时间线" title="分类时间线"></p><p>在主题的分类布局文件中添加以下代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/category.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in page.posts %&#125;</span><br><span class="line"><span class="addition">+&#123;# Show year #&#125;</span></span><br><span class="line"><span class="addition">+&#123;% set year %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% set post.year = date(post.date, 'YYYY') %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% if post.year !== year %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% set year = post.year %&#125;</span></span><br><span class="line"><span class="addition">+&lt;div class="collection-title"&gt;</span></span><br><span class="line"><span class="addition">+&lt;h2 class="archive-year motion-element" id="archive-year-&#123;&#123; year &#125;&#125;"&gt;&#123;&#123; year &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="addition">+&lt;/div&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+&#123;# endshow #&#125;</span></span><br><span class="line">&#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&#123;% block script_extra %&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% if theme.use_motion %&#125;</span></span><br><span class="line"><span class="addition">+&lt;script type="text/javascript" id="motion.page.archive"&gt;</span></span><br><span class="line"><span class="addition">+$('.archive-year').velocity('transition.slideLeftIn');</span></span><br><span class="line"><span class="addition">+&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="在线联系DaoVoice"><a href="#在线联系DaoVoice" class="headerlink" title="在线联系DaoVoice"></a>在线联系DaoVoice</h2><p>该功能由 <a href="http://dashboard.daovoice.io" target="_blank" rel="noopener">DaoVoice</a> 插件提供，效果如图：<br><img src="https://image.chingow.cn/images/20190603010423_YeqmzM_Screenshot.jpeg?300x" alt="DaoVoice" title="DaoVoice"></p><p>首先去 <a href="http://dashboard.daovoice.io/get-started?invite_code=3d64b7fd" target="_blank" rel="noopener">DaoVoice官网</a> 注册，输入邀请码 3d64b7fd，注册后查看<strong>app_id</strong> 并复制，在 <span id="inline-purple">主题配置文件</span> _config.yml 中添加daovoice的配置：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">&#123;your</span> <span class="string">app_id&#125;</span></span><br></pre></td></tr></table></figure><p>按照官网开发文档说明里 <strong>应用设置</strong>—&gt;<strong>安装到网站</strong>的设置，在head的布局模板中插入相关 JavaScript 代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_partials/head.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+&#123;% if theme.daovoice %&#125;</span></span><br><span class="line"><span class="addition">+&lt;script&gt;</span></span><br><span class="line"><span class="addition">+(function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/$&#123;your_app_id&#125;.js","daovoice")</span></span><br><span class="line"><span class="addition">+daovoice('init', &#123;</span></span><br><span class="line"><span class="addition">+app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line"><span class="addition">+&#125;);</span></span><br><span class="line"><span class="addition">+daovoice('update');</span></span><br><span class="line"><span class="addition">+&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;# Export some HEXO Configurations to Front-End #&#125;</span><br><span class="line">&lt;script id="hexo.configurations"&gt;</span><br></pre></td></tr></table></figure><p>具体样式设计可以在 <strong>应用设置</strong> -&gt; <strong>聊天设置</strong> 后边改。</p><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a> 提供，效果如图：</p><p><img src="https://image.chingow.cn/images/20190602014351_let2yO_Screenshot.jpeg?650x" alt="站内搜索" title="站内搜索"></p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>local_search</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span><span class="comment"># 开启站内搜索</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span><span class="comment"># 自动和手动触发</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">3</span>  <span class="comment"># 每篇文章显示的搜索结果数量</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>搜索弹框的页边距有点点挤，在自定义样式文件中添加样式规则来增加页边距：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//增加搜索弹窗的页边距</span><br><span class="line"><span class="selector-class">.local-search-popup</span> <span class="selector-id">#local-search-result</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">40px</span></span><br><span class="line">  height: <span class="built_in">calc</span>(100% - 95px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p>该功能由 <a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">hexo-related-popular-posts</a> 插件提供，效果如图：</p><p><img src="https://image.chingow.cn/images/20190602014455_EGjrzz_Screenshot.jpeg?350x%22%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90%22" alt="文章推荐"></p><p>在站点根目录中执行以下命令安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启相关文章推荐功能：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  title:</span>  <span class="comment"># custom header, leave empty to use the default one</span></span><br><span class="line"><span class="attr">  display_in_home:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  params:</span></span><br><span class="line"><span class="attr">    maxCount:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>此时会在每篇文章结尾根据标签相关性和内容相关性来推荐相关文章。</p><p>事实上并非每篇文章都需要开启该功能，可在文章 Front-Matter 中设置 <code>related_posts</code> 字段来控制是否在文末显示相关文章，然后修改文章布局模板中相关的判定条件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) and post.related_posts %&#125;</span></span><br><span class="line">    &#123;% include 'post-related.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>related_posts</code> 字段默认值：</p><figure class="highlight diff"><figcaption><span>scaffolds/draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ related_posts: true</span></span><br></pre></td></tr></table></figure><h2 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h2><p><img src="https://image.chingow.cn/images/20190602015658_Y7Rj8t_Screenshot.jpeg?650x%22Valine%E8%AF%84%E8%AE%BA%22" alt="Valine评论"></p><blockquote><p>Valine 诞生于 2017 年 8 月 7 日，是一款基于 <a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a> 提供后端数据服务的快速、简洁且高效的无后端评论系统，支持匿名评论、持Markdown、Emoji等都是它的绝对优势，而且 Next 主题也已经内置了 Valine 组件，使用起来非常方便。</p></blockquote><p>首先，在LeanCloud上注册账号并创建应用，设置LeanCloud的信息。</p><p>在 <strong>存储</strong> -&gt; <strong>数据</strong> 中 新建一个名为<code>Counter</code> 的 Class，<code>ACL</code>权限设置为 <strong>无限制</strong>：<br>在 <strong>设置</strong> -&gt; <strong>安全中心</strong> 中添加博客域名到 Web 安全域名中，以保护LeanCloud应用的数据安全。</p><div class="note info">            <p>在LeanCloud中的Class可以理解为数据库中的数据表。Counter用于存储记录文章访问量，记录是以url作为唯一依据的，所以根据默认的permalink组成结构，如果你更改了文章的发布日期和标题中的任意一个，都会造成文章阅读数值的清零重计。</p>          </div><p>然后，在 <span id="inline-purple">主题配置文件</span> _config.yml 开启评论功能即可：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>    <span class="comment"># 开启 Valine 评论</span></span><br><span class="line">  <span class="comment"># 设置应用 id 和 key</span></span><br><span class="line"><span class="attr">  appid:</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span>  <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="comment"># 关闭提醒与验证</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  placeholder:</span>  <span class="comment"># 文本框默认文字</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span>  <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># 需要填写的信息字段</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span>  <span class="comment"># 每页评论数</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-cn</span> <span class="comment"># language, available values: en, zh-cn</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">true</span> <span class="comment"># 开启文章阅读次数统计</span></span><br><span class="line"><span class="attr">  comment_count:</span> <span class="literal">false</span> <span class="comment"># 首页是否开启评论数</span></span><br></pre></td></tr></table></figure><p>有时候我们并不想在文章标题下显示评论数量，如要隐藏，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//屏蔽标题下的评论数量</span><br><span class="line"><span class="selector-class">.post-comments-count</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评论区会显示评论人的浏览器和操作系统版本号等信息，如果只想要一个干净的评论界面，而没有多余其他的信息，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//屏蔽评论组件的多余信息</span><br><span class="line"><span class="selector-id">#comments</span> <span class="selector-class">.info</span>, <span class="selector-id">#comments</span> <span class="selector-class">.vsys</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，集成评论服务后，所有的页面也会带有评论，包括标签、关于等页面。这里需要在添加字段<code>comments</code>并将值设置为 false 即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="图片灯箱"><a href="#图片灯箱" class="headerlink" title="图片灯箱"></a>图片灯箱</h2><p>添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由 <a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">fancyBox</a> 提供。</p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 themes/next/<span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中设置 <code>fancybox: true</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>刷新浏览器即可生效。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>文章中大量的优化方案都参照了 <a href="yearito.cn">yearito</a> 的优化精髓，在集成第三方插件或者自定义新功能的过程中尽量做到：</p><ul><li>可以在站点配置 / 主题配置文件中方便快捷的开启 / 关闭插件服务</li><li>可以在语言包 zh-CN.yml 中快速修改页面中的自定义文案，而不是在代码中将文字表述写死</li><li>尽量在自定义样式文件 custom.styl 和自定义布局文件 custom.swig 中添加代码，而非修改主题源码<br>新增文件统一放在 _custom 目录下</li><li>所有以上这些原则，尽管实现起来可能更复杂，需要更多的代码，但都是为了让站点更好维护，更灵活方便。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.chingow.cn/background/20190602023505_JefG9q_6DE1E34E-037D-4EA6-A8CC-68280E0EAC1D-1264-00000122BCC398FB_tmp.jpeg&quot; alt=&quot;Photo in Chongqing Fengjie&quot; title=&quot;Photo in Chongqing Fengjie&quot;&gt;&lt;/p&gt;
&lt;p&gt;开源的力量让第三方插件的支持越来越多，本文介绍了在如何利用插件来加强网站的功能，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类时间线&lt;/li&gt;
&lt;li&gt;DaoVoice&lt;/li&gt;
&lt;li&gt;站内搜索&lt;/li&gt;
&lt;li&gt;文章推荐&lt;/li&gt;
&lt;li&gt;Valine评论&lt;/li&gt;
&lt;li&gt;图片灯箱
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：内容优化</title>
    <link href="https://ligang-chn.github.io/2019/05/18/hexo-content-optimization/"/>
    <id>https://ligang-chn.github.io/2019/05/18/hexo-content-optimization/</id>
    <published>2019-05-18T08:08:13.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>NexT主题内提供了很多功能来让内容更加丰富，本文介绍了如何开启和定制这些功能，主要包括:</p><ul><li>模板设置</li><li>文章发布修改时间、字数统计</li><li>文章版权声明</li><li>链接样式、底部标签样式</li><li>图片尺寸处理</li><li>代码块复制、显示和隐藏</li><li>草稿和发布<a id="more"></a></li></ul><h2 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h2><p>为了便于创建新文章时更加便利，可以在hexo的<code>scaffolds</code>文件夹内创建模板文件，比如我创建的草稿模板</p><figure class="highlight markdown"><figcaption><span>scaffolds/draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="文章发布修改时间"><a href="#文章发布修改时间" class="headerlink" title="文章发布修改时间"></a>文章发布修改时间</h2><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>post_meta</code>，可用于控制信息的显示：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span>  <span class="comment"># 显示文字说明</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span>  <span class="comment"># 显示文章创建时间</span></span><br><span class="line"><span class="attr">  updated_at:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span>  <span class="comment"># 文章修改时间</span></span><br><span class="line"><span class="attr">    another_day:</span> <span class="literal">false</span>  <span class="comment"># 只有当修改时间和创建时间不是同一天的时候才显示</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span>  <span class="comment"># 分类信息</span></span><br></pre></td></tr></table></figure><h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a> 提供，效果如图：<br><img src="https://image.chingow.cn/images/20190602020607_IyueIG_Screenshot.jpeg?420x" alt="文章统计" title="文章统计"></p><p>在根目录下执行如下命令安装相关依赖：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>在 <span id="inline-blue">站点配置文件</span> _config.yml 中添加<code>symbols_count_time</code>配置，这些配置项主要用于控制每项统计信息是否显示：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span>         <span class="comment"># 统计单篇文章字数</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span>            <span class="comment"># 估算单篇文章阅读时间</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">false</span>  <span class="comment"># 统计站点总字数</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">false</span>     <span class="comment"># 估算站点总阅读时间</span></span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中做如下修改，这些配置项主要用于控制统计信息的显示样式：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span>  <span class="comment"># 是否换行显示 统计信息</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 文章统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 站点统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span>  <span class="comment"># Average Word Length：平均字符长度</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span>  <span class="comment"># Words Per Minute：阅读速度</span></span><br></pre></td></tr></table></figure><h2 id="文末版权声明"><a href="#文末版权声明" class="headerlink" title="文末版权声明"></a>文末版权声明</h2><p>NexT主题已经内置了版权声明功能，只需开启配置即可，效果如下：<br><img src="https://image.chingow.cn/images/20190602011504_NtvIUD_Screenshot.jpeg?600x" alt="文末版权声明" title="文末版权声明"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启文章底部的版权声明，版权声明默认使用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议，用户可以根据自身需要修改 <code>licence</code> 字段变更协议：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span>  <span class="comment"># 开启版权声明</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span> <span class="comment"># 侧边栏</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span> <span class="comment"># post文章</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>默认版权声明中只有 <strong>本文作者</strong>、<strong>本文链接</strong>、<strong>版权声明</strong> 三项，如果你想添加更多内容，如 <strong>文章标题</strong> 等，需要先在语言配置文件里补全版权信息文案字段：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copyright:</span><br><span class="line"><span class="addition">+ title : 本文标题</span></span><br><span class="line">  author: 文章作者</span><br><span class="line">  link: 原始链接</span><br><span class="line">  license_title: 许可协议</span><br><span class="line">  license_content: "本文章采用 %s 许可协议，转载请保留原文链接及作者。"</span><br></pre></td></tr></table></figure><p>再修改版权声明布局的相关代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_partials/post/post-copyright.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#123;#</span><br><span class="line">    #&#125;&#123;&#123; post.title | default(config.title) &#125;&#125;&#123;#</span><br><span class="line">  #&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#123;#</span><br><span class="line">  #&#125;&#123;&#123; post.author || author &#125;&#125;&#123;#</span><br></pre></td></tr></table></figure><p>在版权样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_common\components\post\post-copyright.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.swal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(0,0,0,0.15);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;  </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16</span>x <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.swal-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;  </span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-icon</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#52c41a</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-content</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际使用过程中，有些文章是转载别人的文章，文末再出现个人版权声明就不太合适。此时可在Front-Matter中设定变量 <code>copyright</code> 用于控制是否显示版权信息。<br>修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>post_copyright.enable</code> 字段和 <code>page.copyright</code> 字段同时为 <code>true</code> 时才会插入版权声明：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.post_copyright.enable and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.post_copyright.enable and page.copyright and not is_index %&#125;</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;% include 'post-copyright.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样每篇草稿发布为正文后都会默认显示底部版权信息：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ copyright: true</span></span><br></pre></td></tr></table></figure><h2 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h2><p>主题自带的链接样式在hover时是灰色的，颜色不明显。在自定义样式文件中添加样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$link-color = #2780e3;</span><br><span class="line">$link-hover-color = #1094e8;</span><br><span class="line">$sidebar-link-hover-color = #0593d3;  </span><br><span class="line"></span><br><span class="line">// 普通链接样式</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $link-hover-color;</span><br><span class="line">    border-bottom-color: $link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">  // For spanned external links.</span><br><span class="line">  <span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧边栏链接样式</span><br><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-tag">a</span>, <span class="selector-class">.sidebar</span> <span class="selector-tag">span</span><span class="selector-class">.exturl</span>&#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $sidebar-link-hover-color;</span><br><span class="line">    border-bottom-color: $sidebar-link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧边栏目录链接样式</span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-tag">ol</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $sidebar-link-hover-color;</span><br><span class="line">    border-bottom-color: $sidebar-link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: $link-color;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $link-hover-color;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">    border-bottom-color: $link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章内上下一页链接样式</span><br><span class="line"><span class="selector-class">.post-nav-prev</span> <span class="selector-tag">a</span> , <span class="selector-class">.post-nav-next</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底部标签添加图标"><a href="#底部标签添加图标" class="headerlink" title="底部标签添加图标"></a>底部标签添加图标</h2><p>默认情况下标签前缀是 <code>#</code> 字符，可以通过修改主题源码将标签的字符前缀改为图标前缀，效果如图：</p><p><img src="https://image.chingow.cn/images/20190602012005_lHglf5_Screenshot.jpeg?140x" alt="底部标签" title="底部标签"></p><p>在文章布局模板中找到文末标签相关代码段，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;</code> 即可：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;footer class="post-footer"&gt;</span><br><span class="line">    &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">      &lt;div class="post-tags"&gt;</span><br><span class="line">        &#123;% for tag in post.tags %&#125;</span><br><span class="line"><span class="deletion">-          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tags"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>NexT中使用 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 作为图标库，用户可以在 FontAwesome 上找到心仪的图标来替换标签的字符前缀。</p><h2 id="图片尺寸处理"><a href="#图片尺寸处理" class="headerlink" title="图片尺寸处理"></a>图片尺寸处理</h2><div class="note info">            <p>本章节受 bobcn 的<a href="https://github.com/bobcn/hexo_resize_image.js" target="_blank" rel="noopener">方案</a>，自行重构了代码逻辑。</p>          </div><p>有时候原始图片的尺寸不太合适，想指定图片在文章中的大小，但是 <strong>Markdown</strong> 原生的图片语法在<strong>Hexo</strong>中是无效的，这一点让人很困扰（可能是Hexo的Bug，希望以后的版本能够解决这个问题）。<br>现行的处理办法主要有两种方案，一种是使用html标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">200</span> <span class="attr">src</span>=<span class="string">"/image/test.jpg"</span> &gt;</span></span><br></pre></td></tr></table></figure><p>另一种是 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">hexo官方文档</a> 推荐的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><p>但是习惯了 Markdown 的原生语法之后还是觉得这两种都不够简洁高效，用起来多有不便。于是尝试对 Next 主题进行了加强，变相扩展支持了 Markdown 的插图语法：</p><ul><li><p>可指定像素<br>方法是在 URL 后面添加 <code>?&lt;width&gt;x&lt;height&gt;</code>，也可以只指定一个参数，图片会等比例缩放。</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">指定像素</span>](<span class="link">/image/test.jpg?200x200</span>)</span><br><span class="line">![<span class="string">仅指定width</span>](<span class="link">/image/test.jpg?200x</span>)</span><br><span class="line">![<span class="string">仅指定height</span>](<span class="link">/image/test.jpg?x200</span>)</span><br></pre></td></tr></table></figure></li><li><p>可指定缩放比例<br>方法是在 URL 后面添加 <code>?&lt;scale&gt;</code>，等比例缩放图片大小至 %。</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">指定比例</span>](<span class="link">/image/test.jpg?40</span>)</span><br></pre></td></tr></table></figure></li></ul><p>如何实现这种效果的呢？首先在自定义脚本目录新建用于处理图片尺寸的 <strong>JavaScript</strong> 脚本</p><figure class="highlight js"><figcaption><span>themes/next/source/js/_custom/hexo_resize_image.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_image_size</span>(<span class="params">image, width, height</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    image.setAttribute(<span class="string">"width"</span>, width + <span class="string">"px"</span>);</span><br><span class="line">    image.setAttribute(<span class="string">"height"</span>, height + <span class="string">"px"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexo_resize_image</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = imgs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> img = imgs[i];</span><br><span class="line">        <span class="keyword">var</span> src = img.getAttribute(<span class="string">'src'</span>).toString();</span><br><span class="line">        <span class="keyword">var</span> fields = src.match(<span class="regexp">/\?(\d*x\d*)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (fields &amp;&amp; fields.length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> values = fields[<span class="number">1</span>].split(<span class="string">"x"</span>);</span><br><span class="line">            <span class="keyword">if</span> (values.length == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> width = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> height = values[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!(width.length &amp;&amp; height.length))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> n_width = img.naturalWidth;</span><br><span class="line">                    <span class="keyword">var</span> n_height = img.naturalHeight;</span><br><span class="line">                    <span class="keyword">if</span> (width.length &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        height = n_height*width/n_width;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (height.length &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        width = n_width*height/n_height;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                set_image_size(img, width, height);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fields = src.match(<span class="regexp">/\?(\d*)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (fields &amp;&amp; fields.length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> scale = <span class="built_in">parseFloat</span>(fields[<span class="number">1</span>].toString());</span><br><span class="line">            <span class="keyword">var</span> width = scale/<span class="number">100.0</span>*img.naturalWidth;</span><br><span class="line">            <span class="keyword">var</span> height = scale/<span class="number">100.0</span>*img.naturalHeight;</span><br><span class="line">            set_image_size(img, width, height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = hexo_resize_image;</span><br></pre></td></tr></table></figure><p>然后在自定义布局文件最后添加 <strong>JavaScript</strong> 声明</p><figure class="highlight html"><figcaption><span>themes/next/layout/css/_custom/custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/custom/hexo_resize_image.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><p>NexT主题已经内置了代码复制功能，只需开启配置即可，效果如下：<br><img src="https://image.chingow.cn/images/20190602170547_O2y1Oe_Screenshot.jpeg?600x" alt="代码复制" title="代码复制"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启代码复制功能：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 开启代码复制功能</span></span><br><span class="line"><span class="attr">  show_result:</span> <span class="literal">true</span>  <span class="comment"># 显示复制结果</span></span><br></pre></td></tr></table></figure><p>搜索的按钮有点移位，在自定义样式文件中调整样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 复制按钮样式top调整</span><br><span class="line"><span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块显示和隐藏"><a href="#代码块显示和隐藏" class="headerlink" title="代码块显示和隐藏"></a>代码块显示和隐藏</h2><p>— 待完成 —</p><h2 id="草稿和发布"><a href="#草稿和发布" class="headerlink" title="草稿和发布"></a>草稿和发布</h2><p id="div-border-left-blue">一般我们使用` hexo new <title> `来建立文章，这种建立方法会将新文章建立在 **source/_posts** 目录下，当使用 hexo generate 编译文件时，会将其 HTML 结果编译在 public 目录下，之后` hexo server `将会把 public 目录下所有文章发布。</title></p><div class="note danger">            <p>这种建立文章方式是有缺点的！写文章的人都知道，一篇文章从创作到发布需要经过多次润色，若我们的文章还在创作润色中，尚未编辑完成，执行 <strong>hexo server</strong> 时也会随着一起发布，这样对读者是不友好的。</p>          </div><p>Hexo 另外提供 draft 机制，它的原理是新文章将建立在 <strong>source/_drafts</strong> 目录下，因此并不会将其编译到 public 目录下发布，而且提供了很友好的预览功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;<span class="comment"># 新建草稿文章</span></span><br><span class="line">$ hexo s --draft        <span class="comment"># 预览草稿文章</span></span><br></pre></td></tr></table></figure><p>将草稿发布为正式文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo P &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>&lt;filename&gt;</code> 为不包含 md 后缀的文章名称。它的原理只是将文章从 source/_drafts 移动到 source/_posts 而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NexT主题内提供了很多功能来让内容更加丰富，本文介绍了如何开启和定制这些功能，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板设置&lt;/li&gt;
&lt;li&gt;文章发布修改时间、字数统计&lt;/li&gt;
&lt;li&gt;文章版权声明&lt;/li&gt;
&lt;li&gt;链接样式、底部标签样式&lt;/li&gt;
&lt;li&gt;图片尺寸处理&lt;/li&gt;
&lt;li&gt;代码块复制、显示和隐藏&lt;/li&gt;
&lt;li&gt;草稿和发布
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：主题美化</title>
    <link href="https://ligang-chn.github.io/2019/05/17/hexo-theme-beautifed/"/>
    <id>https://ligang-chn.github.io/2019/05/17/hexo-theme-beautifed/</id>
    <published>2019-05-17T02:07:53.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了在 NexT(v7.0+) 主题的基础上整体布局美化的方案，主要包括:</p><ul><li>Font：字体、动态背景canvas_ribbon</li><li>Top：进度条、Follow me、菜单背景收缩</li><li>Footer：备案显示、运行时间、访客统计</li><li>Sidebar：近期文章、浏览进度、左边显示、目录展开</li></ul><p>大家可以选择喜欢的方案美化自己的博客，当然最好可以再加入点自己的想法改造。</p><a id="more"></a><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>前端的美化，可以做的比较多，比如修改字体、修改背景等等。<br>首先在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>font</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 开启前端设置</span></span><br></pre></td></tr></table></figure><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>默认的字体是微软雅黑，有点审美疲劳了 (lll￢ω￢)，在浏览其他人网站的时候看到了一种很有科技感的字体 『<strong>Monda</strong>』，感觉还是不错的。如何应用到自己的博客呢？<br>首先，可以从 <a href="https://www.fontyukle.net/cn/1,MONDA" target="_blank" rel="noopener">frontyukle</a> 下载字体文件，在服务器上安装。<br>然后在 <span id="inline-purple">主题配置文件</span> _config.yml 中的修改全局字体配置：</p><figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line"><span class="deletion">- family: Lato</span></span><br><span class="line"><span class="addition">+ family: Monda   # 设置Monda字体</span></span><br></pre></td></tr></table></figure><h3 id="设置三角丝带背景"><a href="#设置三角丝带背景" class="headerlink" title="设置三角丝带背景"></a>设置三角丝带背景</h3><div class="note info">            <p>该功能由 Vue 作者 <a href="http://evanyou.me/" target="_blank" rel="noopener">尤雨溪</a> 首创。注意：添加动态背景会极大增加页面内存占用及 CPU 消耗。</p>          </div><p>首先，在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon themes/next/<span class="built_in">source</span>/lib/canvas_ribbon</span><br></pre></td></tr></table></figure><p>然后，在 <span id="inline-purple">主题配置文件</span> _config.yml 中的修改配置<code>canvas_ribbon</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span><span class="comment"># 开启随机三角丝带背景</span></span><br><span class="line"><span class="attr">  size:</span> <span class="number">90</span><span class="comment"># 设置丝带宽度</span></span><br></pre></td></tr></table></figure><h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><p>顶部我们保持简洁为主，设置主要包括：进度条、Fork、菜单等等。</p><h3 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h3><p>当网络不好的时候会出现白屏等待，此时如果能有加载进度提示将会提高用户操作体验。<br>首先，在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/<span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><p>然后，修改 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置<code>pace</code> 改为 <code>true</code>，并从上面提供的样式中选择一种填入<code>pace_theme</code>中就可以了。</p><h3 id="右上角的Follow-Github"><a href="#右上角的Follow-Github" class="headerlink" title="右上角的Follow-Github"></a>右上角的Follow-Github</h3><p>如果你想大家在看博客的时候能快速链接到你的Github，不妨设置<strong>Github_banner</strong>，效果图如下：<br><img src="https://image.chingow.cn/images/23aaa7f0-a7e7-b170-deef-a8ffb649a473.png?500x" alt="github_banner" title="github_banner"></p><p>修改 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置<code>github_banner</code>，在<code>permalink</code>里配置自己的github地址：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  permalink:</span> <span class="attr">https://github.com/yourname</span></span><br></pre></td></tr></table></figure><h3 id="菜单背景收缩"><a href="#菜单背景收缩" class="headerlink" title="菜单背景收缩"></a>菜单背景收缩</h3><p>在 Muse主题方案中 Header 和 Footer 是没有背景色的，的颜色与内容一致不易区分，而且网站标题的字体不够明显，我做了几个修改</p><ul><li>头部和底部颜色修改</li><li>网站标题加粗和颜色修改</li><li>菜单字体增大显示</li></ul><p>在主题自定义样式文件中添加以下样式：</p><figure class="highlight css"><figcaption><span>themes/next/sources/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//窗口效果相关样式</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 为Header和Footer添加背景色</span><br><span class="line"><span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(245, 245, 245);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//防止sidebar和footer同时开启动效时堆叠异常</span><br><span class="line"><span class="selector-id">#sidebar</span>, <span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//防止挡住页末文章的阅读全文按钮</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加宽菜单间距，放大菜单图标</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-class">.menu-item</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">  .fa &#123;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Muse主题下自定义样式</span><br><span class="line">if hexo-config('scheme') == "Muse" &#123;</span><br><span class="line">  <span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">    .brand &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(34, 34, 34);</span><br><span class="line">      <span class="selector-tag">background</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.site-title</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完才发现顶部菜单的空间太大了，于是调节菜单高度，在自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;# 页面加载时header高度收缩动效 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".header-inner"</span>).animate(&#123;<span class="attr">padding</span>: <span class="string">"25px 0 25px"</span>&#125;, <span class="number">1000</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">  &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line">  &#123;% include '_third-party/chatra.swig' %&#125;</span><br><span class="line">  &#123;% include '_third-party/tidio.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>调节移动端显示的高度</p><figure class="highlight diff"><figcaption><span>themes/next/source/css/_schemes/Muse/_menu.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mobile() &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line"><span class="deletion">-  top: 52px;</span></span><br><span class="line"><span class="addition">+  top: 95px;</span></span><br><span class="line">  margin: 0;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>底部设置的可完性就比较多了，建站信息、备案信息、以及访客和统计信息等信息都可以个性化定制。</p><h3 id="ICP备案和公安备案"><a href="#ICP备案和公安备案" class="headerlink" title="ICP备案和公安备案"></a>ICP备案和公安备案</h3><p>我们的网站已经有备案号了，但是应该如何添加备案号到博客最下面呢？<br>首先，在 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置添加备案配置：</p><figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> # 这里打开备案信息，填写ICP备案号</span><br><span class="line">   beian:</span><br><span class="line">    enable: true</span><br><span class="line">    icp: 鄂ICP证18014719号</span><br><span class="line"></span><br><span class="line"> # 这里是新加的内容，填写公安备案信息</span><br><span class="line"><span class="addition">+  gongan:</span></span><br><span class="line"><span class="addition">+    enable: true</span></span><br><span class="line"><span class="addition">+    local: 鄂</span></span><br><span class="line"><span class="addition">+    num: 42011102003178</span></span><br></pre></td></tr></table></figure><p>然后，在语言配置文件里，添加表述文案<code>beian</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"><span class="addition">+   beian: </span></span><br><span class="line"><span class="addition">+    gongan: 公网安备%s号</span></span><br></pre></td></tr></table></figure><p>接下来，删除原有的布局文件中备案样式的代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_partials/footer.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  #&#125;&#123;% set current = date(Date.now(), "YYYY") %&#125;&#123;#</span><br><span class="line"><span class="deletion">- #&#125;&#123;% if theme.footer.beian.enable %&#125;&#123;#</span></span><br><span class="line"><span class="deletion">- #&#125;  &#123;&#123; next_url('http://www.beian.miit.gov.cn', theme.footer.beian.icp + ' ') &#125;&#125;&#123;#</span></span><br><span class="line"><span class="deletion">- #&#125;&#123;% endif %&#125;&#123;#</span></span><br><span class="line">  #&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; – &#123;% endif %&#125;&#123;#</span><br><span class="line">  ...</span><br><span class="line">  &lt;span class="author" itemprop="copyrightHolder"&gt;&#123;&#123; theme.footer.copyright || author &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &lt;span class="post-meta-divider footer-ages-icon"&gt; | &lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% if config.symbols_count_time.total_symbols %&#125;</span><br></pre></td></tr></table></figure><p>最后，在主题布局文件中添加我们自定义的备案样式：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div class="footer-inner"&gt;</span><br><span class="line">    &#123;&#123; partial('_partials/footer.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">    &#123;% include '_third-party/analytics/analytics-with-widget.swig' %&#125;</span><br><span class="line"><span class="addition">+        &lt;div class="footer-custom"&gt;</span></span><br><span class="line"><span class="addition">+            &#123;% if theme.footer.beian.enable %&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125;&#123;&#123; next_url('http://www.beian.miit.gov.cn', theme.footer.beian.icp + ' ') &#125;&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125;&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+          &#123;% if theme.footer.beian.enable and theme.footer.gongan.enable %&#125;</span></span><br><span class="line"><span class="addition">+            &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+          &#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+          &#123;% if theme.footer.gongan.enable %&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125; &lt;span style="padding-left:25px;background:url(/images/beian.png) no-repeat left center" rel="nofollow"&gt;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125; &#123;&#123; theme.footer.gongan.local&#125;&#125;&#123;&#123;__('footer.beian.gongan', next_url('http://www.beian.gov.cn/portal/registerSystemInfo?recordcode='+theme.footer.gongan.num, theme.footer.gongan.num )) &#125;&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125;&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+        &lt;/div&gt;</span></span><br><span class="line">    &#123;% block footer %&#125;&#123;% endblock %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="网站的建站时间"><a href="#网站的建站时间" class="headerlink" title="网站的建站时间"></a>网站的建站时间</h3><p>NexT主题已经内置了添加建站时间。在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>since</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2018</span>  <span class="comment"># 修改建站时间</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">  icon:</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">heart</span>  <span class="comment"># 改成心型图标</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line"><span class="attr">    color:</span> <span class="string">"#ff0000"</span> <span class="comment"># 改成红色图标</span></span><br></pre></td></tr></table></figure><h3 id="网站的运行时间"><a href="#网站的运行时间" class="headerlink" title="网站的运行时间"></a>网站的运行时间</h3><div class="note info">            <p>本章节受 <a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">Yearito’s Blog | 站点运行时间统计 </a> 的启发，自行重构了代码逻辑。</p>          </div><p>接下来我们显示网站的运行时间，在这里我做了一些个性化文案，可供大家参考：<br><img src="https://image.chingow.cn/images/00c3834a-cf72-22a3-cd7c-6486649fd648.png?550x" alt="网站建站运行时间" title="网站建站运行时间"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中的添加 <code>ages</code>配置：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ages:</span> <span class="comment"># site running time</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  birthday:</span> <span class="number">20190419</span>    <span class="comment"># 网站运行时间</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">"#1094e8"</span></span><br></pre></td></tr></table></figure><p>在语言配置文件里，添加表述文案<code>age</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"><span class="addition">+   age: 我已在此等候你</span></span><br></pre></td></tr></table></figure><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 页脚站点运行时间统计 #&#125;</span><br><span class="line">  &#123;% if theme.footer.ages.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> ages = moment.preciseDiff(moment(),moment(&#123;&#123; theme.footer.ages.birthday &#125;&#125;,<span class="string">"YYYYMMDD"</span>));</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//去除时分秒信息</span></span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d&#123;0,2&#125;\s+hours?/</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d&#123;0,2&#125;\s+minutes?/</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d&#123;0,2&#125;\s+seconds?/</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//将年月日转换为中文</span></span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/years?/</span>, <span class="string">"年"</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/months?/</span>, <span class="string">"月"</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/days?/</span>, <span class="string">"天"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">        ages = ages.replace(/\d+/g, '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:</span></span></span><span class="template-variable">&#123;&#123; theme.footer.ages.color &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span></span><br><span class="line"><span class="javascript">        span.innerHTML = <span class="string">`&#123;&#123; __('footer.age')&#125;&#125; <span class="subst">$&#123;ages&#125;</span>`</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//插入到agesicon之后</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> agesicon = <span class="built_in">document</span>.querySelector(<span class="string">".footer-ages-icon"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">".copyright"</span>).insertBefore(span, agesicon.nextSibling);</span></span><br><span class="line"><span class="vbscript">      <span class="built_in">timer</span>();</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="添加访客统计"><a href="#添加访客统计" class="headerlink" title="添加访客统计"></a>添加访客统计</h3><p>该功能由 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a> 提供。UV：独立访客数，PV：网站浏览量，访客数和浏览量的区别在于一个用户连续点击n篇文章，会记录n次浏览量，但只记录一次访客数，效果如图：<br><img src="https://image.chingow.cn/images/0298aada-faa2-1f09-f68a-e0382168a5ed.png?550x" alt="网站访客统计" title="网站访客统计"></p><div class="note info">            <p>由于不蒜子是基于域名来进行统计计算的，所以通过 localhost:4000 端口访问的时候统计数据UV和PV都会异常的大，属于正常现象。</p>          </div><p>首先，在 <span id="inline-purple">主题配置文件</span> _config.yml 中打开不蒜子功能：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span>   <span class="comment"># 访客数</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span>   <span class="comment"># 访问量</span></span><br></pre></td></tr></table></figure><p>然后，在语言配置文件里，修改个性化表述文案：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"><span class="deletion">- total_views: 总访问量</span></span><br><span class="line"><span class="deletion">- total_visitors: 总访客量</span></span><br><span class="line"><span class="addition">+ total_views: "历经 %s 次回眸才与你相遇"</span></span><br><span class="line"><span class="addition">+ total_visitors: "我的第 %s 位朋友，"</span></span><br></pre></td></tr></table></figure><p>最后，修改不蒜子模板文件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="busuanzi-count"&gt;</span><br><span class="line">  &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &#123;% if theme.busuanzi_count.enable %&#125;</span></span><br><span class="line"><span class="addition">+  &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">    &#123;% if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line"><span class="deletion">-    &lt;span class="post-meta-item-icon"&gt;</span></span><br><span class="line"><span class="deletion">-      &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;/span&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;span class="site-uv" title="&#123;&#123; __('footer.total_visitors') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-      &lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+       &lt;span class="site-uv"&gt;</span></span><br><span class="line"><span class="addition">+       &#123;&#123; __('footer.total_visitors', '&lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   &#123;% if theme.busuanzi_count.total_visitors and theme.busuanzi_count.total_views %&#125;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="deletion">-   &#123;% endif %&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">    &#123;% if theme.busuanzi_count.total_views %&#125;</span><br><span class="line"><span class="deletion">-     &lt;span class="post-meta-item-icon"&gt;</span></span><br><span class="line"><span class="deletion">-       &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;/span&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="site-pv" title="&#123;&#123; __('footer.total_views') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-       &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+     &lt;span class="site-pv"&gt;</span></span><br><span class="line"><span class="addition">+       &#123;&#123; __('footer.total_views', '&lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//修改不蒜子数据颜色</span><br><span class="line"><span class="selector-class">.busuanzi-value</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h2><p>侧边栏里的信息有很多，比如站点信息、RSS、链接信息、目录信息等等，我们要有选择性的显示。尽量保持Next主题的宗旨 – <span id="inline-green">简洁</span></p><h3 id="显示近期文章"><a href="#显示近期文章" class="headerlink" title="显示近期文章"></a>显示近期文章</h3><p>当你新写了一些好文章，想尽快告诉大家要怎么办呢？放在侧边栏里那是最合适不过了～(￣▽￣～)(～￣▽￣)～ 比如这样：<br><img src="https://image.chingow.cn/images/f2840b83-ff46-dd56-0aa1-1af57c5e5dad.png" alt="近期文章" title="近期文章"></p><p>首先配置开关和文案，便于随时修改。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中添加近期文章<code>recent_posts</code>的配置：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近期文章</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br></pre></td></tr></table></figure><p>在语言配置文件里，添加表述文案<code>recent_posts</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"><span class="addition">+   recent_posts: 近期文章</span></span><br></pre></td></tr></table></figure><p>在侧边栏原有布局文件中的合适位置添加近期文章显示代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/sidebar.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if theme.social %&#125;</span><br><span class="line">  ...</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ &lt;!-- 添加近期文章 --&gt;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.recent_posts %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+     &lt;div class="links-of-blogroll-title"&gt;</span></span><br><span class="line"><span class="addition">+       &lt;!-- modify icon to fire by szw --&gt;</span></span><br><span class="line"><span class="addition">+       &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="addition">+       &#123;&#123; __('sidebar.recent_posts') &#125;&#125;</span></span><br><span class="line"><span class="addition">+     &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+     &lt;ul class="links-of-blogroll-list"&gt;</span></span><br><span class="line"><span class="addition">+       &#123;% set posts = site.posts.sort('-date') %&#125;</span></span><br><span class="line"><span class="addition">+       &#123;% for post in posts.slice('0', '5') %&#125;</span></span><br><span class="line"><span class="addition">+         &lt;li&gt;</span></span><br><span class="line"><span class="addition">+           &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+         &lt;/li&gt;</span></span><br><span class="line"><span class="addition">+       &#123;% endfor %&#125;</span></span><br><span class="line"><span class="addition">+     &lt;/ul&gt;</span></span><br><span class="line"><span class="addition">+   &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h3><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>back2top</code>的<code>scrollpercent</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">true</span>  <span class="comment">#  浏览页面的时候显示当前浏览进度</span></span><br></pre></td></tr></table></figure><p>配置完之后，发现这个按钮颜色有点单调，让它炫酷点的吧 &lt;(￣ˇ￣)/ ，每次刷新可以生成不同的颜色，在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> <span class="selector-class">.fa-arrow-up</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(random-color(0, 255) - <span class="number">50%</span>, <span class="built_in">random-color</span>(0, 255) - <span class="number">50%</span>, <span class="built_in">random-color</span>(0, 255) - <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏移到左边"><a href="#侧边栏移到左边" class="headerlink" title="侧边栏移到左边"></a>侧边栏移到左边</h3><p>用惯了<strong>Ofice</strong>的人习惯导航菜单在左边的格式，如何把侧边栏放在左侧呢？<br>NexT 主题中 Pisces 和 Gemini 支持通过主题配置文件来将侧边栏置于左侧或右侧。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>sidebar</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="comment"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">  position:</span> <span class="string">left</span>   <span class="comment"># 调整侧边栏显示位置，仅支持 Pisces 和 Gemini 主题</span></span><br></pre></td></tr></table></figure><p>而 Muse 和 Mist 则需要深度修改源码才能实现改变侧边栏位置：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改动效脚本代码：</p><figure class="highlight diff"><figcaption><span>themes/next/source/js/src/motion.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(document)</span><br><span class="line">  .on('sidebar.isShowing', function() &#123;</span><br><span class="line">    NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(</span><br><span class="line"><span class="deletion">-     &#123;paddingRight: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line"><span class="addition">+     &#123;paddingLeft: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line">      SIDEBAR_DISPLAY_DURATION</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">  hideSidebar: function() &#123;</span><br><span class="line"><span class="deletion">-   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingRight: 0&#125;);</span></span><br><span class="line"><span class="addition">+   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;);</span></span><br><span class="line">    this.sidebarEl.find('.motion-element').velocity('stop').css('display', 'none');</span><br><span class="line">    this.sidebarEl.velocity('stop').velocity(&#123;width: 0&#125;, &#123;display: 'none'&#125;);</span><br><span class="line"></span><br><span class="line">    sidebarToggleLines.init();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此以来就可以将侧边栏放置在左边了，但当窗口宽度缩小到991px之后会出现样式错误：侧边栏收缩消失但是页面左侧仍留有空白间距，此时修改如下代码即可：</p><figure class="highlight diff"><figcaption><span>themes/next/source/css/_common/scaffolding/base.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative; // Required by scrollspy</span><br><span class="line">  font-family: $font-family-base;</span><br><span class="line">  font-size: $font-size-base;</span><br><span class="line">  line-height: $line-height-base;</span><br><span class="line">  color: $text-color;</span><br><span class="line">  background: $body-bg-color;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- +mobile() &#123; padding-left: 0 !important; &#125;</span></span><br><span class="line"><span class="deletion">- +tablet() &#123; padding-left: 0 !important; &#125;  </span></span><br><span class="line"><span class="addition">+ +mobile() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line"><span class="addition">+ +tablet() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line">  +desktop-large() &#123; font-size: $font-size-large; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏目录展开"><a href="#侧边栏目录展开" class="headerlink" title="侧边栏目录展开"></a>侧边栏目录展开</h3><p>侧边栏的TOC目录每次滑到哪儿，目录展开到哪。这样查看文章结构就很不方便，如何设置才能让文章目录默认全部都展开？<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>toc</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  wrap:</span> <span class="literal">false</span>  <span class="comment">## 如果标题超长，是否换行</span></span><br><span class="line"><span class="attr">  expand_all:</span> <span class="literal">true</span>  <span class="comment">## 侧边栏是否完全展开</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了在 NexT(v7.0+) 主题的基础上整体布局美化的方案，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Font：字体、动态背景canvas_ribbon&lt;/li&gt;
&lt;li&gt;Top：进度条、Follow me、菜单背景收缩&lt;/li&gt;
&lt;li&gt;Footer：备案显示、运行时间、访客统计&lt;/li&gt;
&lt;li&gt;Sidebar：近期文章、浏览进度、左边显示、目录展开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以选择喜欢的方案美化自己的博客，当然最好可以再加入点自己的想法改造。&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：基础安装</title>
    <link href="https://ligang-chn.github.io/2019/04/29/hexo-satrted/"/>
    <id>https://ligang-chn.github.io/2019/04/29/hexo-satrted/</id>
    <published>2019-04-29T14:16:23.000Z</published>
    <updated>2019-09-30T09:27:39.441Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.chingow.cn/background/006tNc79gy1g37jxk0kq5j327a0ki0th.jpg" alt="Hexo" title="Hexo"></p><p>关于如何搭建Hexo博客的文章已经有很多人写过了，并且有很多人已经写的很深刻很到位了，为什么还要重复写一遍呢？直到我看到了这位同学的博客 <a href="yearito.cn">yearito</a> <strong>（ ps：本站的建站优化大都参考自这里）</strong> ，我有了说服自己的理由：</p><ul><li>你可以参考别人的技术方案，集众所长，亲自实践，然后融入自己的思考写出一篇新文章</li><li>即使并没有做出创新性的贡献，自己重新归纳一遍也有助于梳理流程，深化理解</li></ul><a id="more"></a><p id="div-border-left-red">现在百度 Google 很方便，动动手指就可以搜索到想要的答案，但是太多人都是**『顺手拈来、过目就忘』**，下次遇到同样的问题再搜索一遍。为什么会这样呢？不善于总结，不情愿动手思考，时而久之就会变成所谓的 “代码搬运工” ！</p><p></p><p>闲话不多说了，我们开始吧！</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>在 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官方下载网站</a> 下载源代码，选择最后一项 <code>Source Code</code><br>解压到某一目录, 然后进入此目录,依次执行以下 3 条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>安装完后查看<code>node.js</code>版本，检验是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在命令行中通过 <strong>npm</strong> 来安装 hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="本地启动hexo"><a href="#本地启动hexo" class="headerlink" title="本地启动hexo"></a>本地启动hexo</h3><p>创建一个博客目录（例如 <code>/my-blog</code>），在此目录下，执行初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p my-blog</span><br><span class="line">$ <span class="built_in">cd</span> my-blog</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>执行完毕后，将会生成以下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- node_modules       //依赖安装目录</span><br><span class="line">|-- scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|-- source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   |-- _posts          //文章目录</span><br><span class="line">|-- themes             //主题文件夹</span><br><span class="line">|   |-- landscape      //默认主题</span><br><span class="line">|-- .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">|-- _config.yml        //站点配置文件</span><br><span class="line">|-- db.json</span><br><span class="line">|-- package.json</span><br><span class="line">`-- package-lock.json</span><br></pre></td></tr></table></figure><p>在根目录下执行如下命令启动<strong>hexo</strong>内置的web容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate     <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo server       <span class="comment"># 在本地服务器运行</span></span><br></pre></td></tr></table></figure><p>在浏览器输入IP地址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  就可以看到我们熟悉的** Hello Word **了。</p><p><img src="https://image.chingow.cn/images/d7cced3b-950e-6d7b-6edc-dc3058646ddb.png" alt="Hello Word" title="Hello Word"></p><h3 id="常用命令简化和组合"><a href="#常用命令简化和组合" class="headerlink" title="常用命令简化和组合"></a>常用命令简化和组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g    <span class="comment"># 等同于hexo generate</span></span><br><span class="line">$ hexo s    <span class="comment"># 等同于hexo server</span></span><br><span class="line">$ hexo p    <span class="comment"># 等同于hexo port </span></span><br><span class="line">$ hexo d    <span class="comment"># 等同于hexo deploy</span></span><br></pre></td></tr></table></figure><p>当本地不想使用默认的4000端口时（比如在服务器上，默认使用80端口），可以使用 port 命令更改启动端口<br>另外，<strong>hexo</strong>支持命令合并，比方说 生成静态文件 → 本地启动80端口，我们可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -g -p 80</span><br></pre></td></tr></table></figure><h2 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><p>hexo 安装主题的方式非常简单, 只需几个简单的命令即可。<br>将NexT主题文件拷贝至<strong>themes</strong>目录下，然后修改 <span id="inline-blue">站点配置文件</span> _config.yml 中的 <code>theme</code>字段为<code>next</code>即可。</p><p>cd 到博客的根目录下执行以下命令下载主题文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br><span class="line"></span><br><span class="line">$ vim _config.yml</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>清除 <strong>hexo</strong>缓存，重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo s -g</span><br></pre></td></tr></table></figure><p>大部分的设定都能在 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官方文档</a> 里找到, 如主题设定、侧栏、头像、友情链接、打赏等等，在此就不多讲了，照着文档走就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.chingow.cn/background/006tNc79gy1g37jxk0kq5j327a0ki0th.jpg&quot; alt=&quot;Hexo&quot; title=&quot;Hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于如何搭建Hexo博客的文章已经有很多人写过了，并且有很多人已经写的很深刻很到位了，为什么还要重复写一遍呢？直到我看到了这位同学的博客 &lt;a href=&quot;yearito.cn&quot;&gt;yearito&lt;/a&gt; &lt;strong&gt;（ ps：本站的建站优化大都参考自这里）&lt;/strong&gt; ，我有了说服自己的理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以参考别人的技术方案，集众所长，亲自实践，然后融入自己的思考写出一篇新文章&lt;/li&gt;
&lt;li&gt;即使并没有做出创新性的贡献，自己重新归纳一遍也有助于梳理流程，深化理解&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 01.框架介绍</title>
    <link href="https://ligang-chn.github.io/2018/04/18/smartcity-frame-Introduction/"/>
    <id>https://ligang-chn.github.io/2018/04/18/smartcity-frame-Introduction/</id>
    <published>2018-04-18T07:30:02.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>框架的意义在于提高开发效率，统一开发模式，规范编码，减少重复工作，降低出错，提供必要的公共功能，同时需要易于集成、便于维护。</p><blockquote><p>在搭建项目之时，需要引入依赖、配置框架，通常一些开源组件和配置不同版本之间会出现冲突问题。<br>前端的模版化引擎会统一渲染接口返回值，这就要求服务端需要对异常信息和响应结果进行统一封装。<br>为了加快项目开发进度还需要封装一些常用的类和工具包，比如 <em>App Session</em>管理、接口签名认证、参数验证、常用类型转换等等，有了这些项目才能正常开工。<br><br>然而，下次再做类似的项目上述步骤可能还要重来一遍，虽然通常是拿来copy再改改，但是还是比较浪费时间的。<br>所以可以利用面向对象抽象的思想，抽取这类项目的共同之处封装成了种子项目，再开发类似项目时可以直接在此之上迭代，减少无意义的重复工作。</p></blockquote><a id="more"></a><h3 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h3><p><img src="https://image.chingow.cn/images/smart-spring-%E6%A6%82%E8%A7%88.jpg" alt="smart-spring-概览"></p><ul><li>预定义常用开源组件依赖版本和插件配置信息，极大的简化了maven 配置</li><li>拦截<code>Response</code>的返回值，自动封装成 <a href="https://image.chingow.cn/images/20190527174428.png" target="_blank" rel="noopener">Result</a> 类型 </li><li>拦截<code>RuntimeException</code>异常，统一处理自动封装</li><li>代码自动生成，自动生成 Mybatis-mapper代码</li><li>简化参数校验流程</li><li>集中管理分布式应用的<code>APP Session</code></li><li>根据 Token 认证增强 APP 接口安全性</li><li>利用 RedisClient 使用<code>Redis</code>缓存</li><li>自动执行SQL初始化脚本工具</li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li><em>JDK 1.7</em></li><li><em>Maven3+</em></li><li><em>Oracle11g</em></li></ul><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><table><thead><tr><th align="center">分类</th><th>技术选型</th><th>描述</th></tr></thead><tbody><tr><td align="center">开发框架</td><td>Spring 3.2.9.RELEASE</td><td>主流的轻量级JAVA开发框架</td></tr><tr><td align="center">MVC框架</td><td>SpringMVC 3.2.9.RELEASE</td><td>优秀的的MVC框架，与Spring无缝集成</td></tr><tr><td align="center">Restful框架</td><td>Jersey 2.6</td><td>主流的Restful框架</td></tr><tr><td align="center">Restful框架</td><td>Resteasy 3.0.7.Final</td><td>主流的Restful框架</td></tr><tr><td align="center">Restful Client</td><td>Httpclient 4.5.3</td><td>HTTP 协议的客户端编程工具包</td></tr><tr><td align="center">ORM框架</td><td>Mybatis 3.2.8</td><td>优秀的持久层框架</td></tr><tr><td align="center">缓存方案</td><td>Spring Cache 3.2.9.RELEASE</td><td>Spring带来的强大缓存技术</td></tr><tr><td align="center">缓存连接</td><td>Jedis 2.4.1</td><td>分布式缓存数据库Redis的Java客户端框架</td></tr><tr><td align="center">数据库连接池</td><td>Druid 1.0.5</td><td>阿里的数据库连接池框架</td></tr><tr><td align="center">数据库驱动</td><td>ojdbc6 11.2.0.1.0</td><td>oracle数据库驱动</td></tr><tr><td align="center">Servlet引擎</td><td>Jetty 6.1.26</td><td>轻量级的web服务器 servlet 引擎框架</td></tr><tr><td align="center">Servlet引擎</td><td>Tomcat 7.0.57</td><td>最为广泛的 servlet 引擎框架</td></tr><tr><td align="center">协调服务</td><td>Zookeeper 3.4.7</td><td>优秀的分布式协调服务框架</td></tr><tr><td align="center">服务管理</td><td>Dubbo 2.5.3</td><td>阿里的分布式服务治理框架</td></tr><tr><td align="center">网络编程</td><td>Netty 3.0.7.Final</td><td>广泛使用的Java网络编程框架</td></tr><tr><td align="center">搜索引擎</td><td>Solr 5.5.2</td><td>基于Lucene的独立的企业级搜索引擎</td></tr><tr><td align="center">搜索引擎</td><td>Elasticsearch</td><td>基于Lucene的分布式多用户的全文搜索引擎</td></tr><tr><td align="center">消息队列</td><td>ActiveMQ</td><td>最流行的，能力强劲的开源消息队列框架</td></tr><tr><td align="center">作业调度</td><td>Quartz 2.2.3</td><td>便于与Java项目集成的任务调度框架</td></tr><tr><td align="center">文件系统</td><td>FastDFS 1.0.1</td><td>轻量级分布式文件系统</td></tr><tr><td align="center">日志组件</td><td>slf4j 1.6.6</td><td>主流的日志系统统一的接口</td></tr><tr><td align="center">校验框架</td><td>Hibernate Validator 4.2.0.Final</td><td>主流的校验框架</td></tr><tr><td align="center">数据序列化</td><td>Gson 2.2.4</td><td>Json数据序列化框架</td></tr><tr><td align="center">测试</td><td>Juint 4.8</td><td>单元测试框架</td></tr><tr><td align="center">DOM</td><td>dom4j 1.6.1</td><td>dom解析框架</td></tr><tr><td align="center">富文本</td><td>Ueditor 1.1.1</td><td>富文本编辑器框架</td></tr></tbody></table><h3 id="包含模块"><a href="#包含模块" class="headerlink" title="包含模块"></a>包含模块</h3><ul><li><p><em>smart-spring-dependencies</em></p><blockquote><p><em>parent.pom</em>，统一规划主要依赖开源组件和中间件版本，构建插件的版本和配置信息</p></blockquote></li><li><p><em>smart-core</em></p><blockquote><p>公共核心的<em>Core</em>包，定义公共的返回<em>Result</em>、异常、分页等类型以及工具类</p></blockquote></li><li><p><em>smart-spring-support</em></p><blockquote><p>封装常用功能，提供缓存处理、<em>https</em>请求、延时消息、定时任务等已成熟的实现方案</p></blockquote></li><li><p><em>smart-spring-app-core</em></p><blockquote><p>基于<em>Jersey</em>框架封装的<em>Restful</em>请求处理框架，实现了<em>APP Sessio</em>n管理及接口权限验证</p></blockquote></li><li><p><em>smart-spring-web-core</em></p><blockquote><p>基于<em>SpringMVC</em>封装的请求处理框架，实现了<em>Mybatis</em>分页及自动执行<em>SQL</em>初始化脚本</p></blockquote></li></ul><h3 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h3><ul><li>优化mybatis-generator 插件：实现批量生成和指定生成的功能</li><li>SQL初始化功能优化：支持版本迭代识别</li><li>一键生成初始化项目</li><li>环形队列&amp;延时任务处理</li><li>日志自动打印，自动归档</li><li>利用注解自动映射字典中文和日期格式</li></ul><p>欢迎大家一起来参与完善<code>smartSpring</code>，期待您宝贵的建议！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;框架的意义在于提高开发效率，统一开发模式，规范编码，减少重复工作，降低出错，提供必要的公共功能，同时需要易于集成、便于维护。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在搭建项目之时，需要引入依赖、配置框架，通常一些开源组件和配置不同版本之间会出现冲突问题。&lt;br&gt;前端的模版化引擎会统一渲染接口返回值，这就要求服务端需要对异常信息和响应结果进行统一封装。&lt;br&gt;为了加快项目开发进度还需要封装一些常用的类和工具包，比如 &lt;em&gt;App Session&lt;/em&gt;管理、接口签名认证、参数验证、常用类型转换等等，有了这些项目才能正常开工。&lt;br&gt;&lt;br&gt;然而，下次再做类似的项目上述步骤可能还要重来一遍，虽然通常是拿来copy再改改，但是还是比较浪费时间的。&lt;br&gt;所以可以利用面向对象抽象的思想，抽取这类项目的共同之处封装成了种子项目，再开发类似项目时可以直接在此之上迭代，减少无意义的重复工作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://ligang-chn.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="https://ligang-chn.github.io/tags/smartSpring/"/>
    
      <category term="框架" scheme="https://ligang-chn.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://ligang-chn.github.io/tags/Spring/"/>
    
      <category term="Dubbo" scheme="https://ligang-chn.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 02.开发指南</title>
    <link href="https://ligang-chn.github.io/2018/04/18/smartcity-frame-development-guide/"/>
    <id>https://ligang-chn.github.io/2018/04/18/smartcity-frame-development-guide/</id>
    <published>2018-04-18T07:20:27.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ul><li>一个大型的分布式系统一般会包含多个应用，各个应用包含多端展现（<code>移动端、wx端、web门户、后台管理</code>），而且应用之间往往还存在共同的业务（<code>上传、评论、支付、搜索</code>），应用之间还会存在调用关系等。<br> 因此，为了使业务得到很好的复用，模块更加容易拓展和维护，我们希望业务与应用分离。</li><li>应用层只包含前端展现和路由接口，服务层来实现具体业务，以供多端在不同场景下展现。<ul><li>因此业务的接口需要具备通用性，可供<strong>多端多应用多场景</strong>使用，这对各位的设计能力来讲是一个考验（易用性、通用性、易拓展易维护）。</li></ul></li><li>服务层被共享使用，会带来一些其它的<strong>挑战</strong>，比如业务并发压力等，考虑到性能、伸缩性、可用性和与Spring结合使用的技术成本，我们选择阿里的开源服务框架dubbo来解决这些问题，<br> 由dubbo来提供服务治理功能，dubbo-api 提供接口，dubbo-service 提供业务服务。<br> <code>ps：对于dubbo框架不了解的同学可以学习 http://dubbo.wangxingrong.com/User+Guide-zh.htm</code><a id="more"></a></li></ul><p><img src="https://image.chingow.cn/images/smart-spring-%E6%A1%86%E6%9E%B6%E5%88%86%E5%B1%82.jpg" alt="smart-spring-框架分层"></p><p>这个时候有些同学不禁会疑惑，已经有Service业务层处理业务了，我们的biz层又是做什么的呢？<br></p><ul><li>聚合服务；我们有很多分布式服务（<code>上文提到的评论、支付等</code>），biz层的一个主要作用是把它们聚合起来，封装成一个与前端适配的接口</li><li>数据的格式化处理，满足各端应用对数据不同的表现形式。例如：<br> 服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender<code>（性别）</code>，对于服务层来说，它只从语义上定义：1-男，2-女，0-未知。<br> 而接口服务同时给多端应用展现，不同展现层的要求有所不同（app端显示 1-帅哥，2-美女；web门户应用显示1-男性，2-女性），就会出现问题了。<br> 再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务数据（返回 1，2，0）与具体的展现形式无关，因此它返回的数据不应该出现与展现形式的耦合。</li></ul><h3 id="程序分层"><a href="#程序分层" class="headerlink" title="程序分层"></a>程序分层</h3><p><img src="https://image.chingow.cn/images/smart-spring-%E7%A8%8B%E5%BA%8F%E5%88%86%E5%B1%82.jpg" alt="smart-spring-程序分层"></p><ul><li><em>Controller/Restful</em>（接口路由层）：接受前台请求和参数并返回，前台参数校验。</li><li><em>Biz</em>（聚合层）：调用各类业务服务（<em>Service</em>），聚合数据并格式化。</li><li><em>Service</em>（业务层）：调用各个数据库表数据（<em>Dao</em>），实现业务逻辑。</li><li><em>Dao</em>（持久层）：调用<em>SQL</em>，操作数据库。</li></ul><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul><li>基本规范：<br>安装<strong>Alibaba Java Code Guidelines</strong>插件，检查代码规范性。    </li><li>命名规范：<ul><li>Java类名、局域变量、类变量名、方法名采用标准驼峰命名，切勿出现单词拼写错误。</li><li>常量命名由大写字母与下划线组成，禁止简写。</li><li>数据库表名、字段名由小写字母加下划线组成。最多长度30个字母，允许适当使用简写。</li><li>除<code>java</code>文件以外的其他类型文件，包括<code>xml、jsp、properties</code>等由小写字母和横线组成。</li></ul></li><li><em>SVN</em> 使用规范：<ul><li><strong>切记</strong>避免提交不该提交的代码，例如构建生成的文件（<code>.iml</code>、<code>.classpath</code>等）。</li><li>提交SVN必须写备注，清晰规范并能正确描述所提交内容。</li><li>版本迭代完成之后将稳定版代码打Tags。</li></ul></li><li><em>maven</em> 使用规范：<ul><li>parent 项目<code>pom.xml</code>中使用<code>dependencyManagement</code>预定义整个项目所需的内部、外部依赖和配置信息，当项目升级时及时添加、更改。</li><li>属性值统一定义在<code>properties</code>中，便于集中维护。</li><li>开发中的版本号定义为SNAPSHOT，完成后升级为稳定版，下一阶段迭代开发时升级版本号。<br><code>注意：项目交付时不能使用SNAPSHOT版本的jar包（特别是api.jar），以免后续的修改对已有上线项目造成影响。</code></li></ul></li><li><em>GET/POST</em> 请求使用规范：<ul><li>搜索、查询、详情、显示等获取行为使用<code>get</code>。</li><li>提交、更新、删除等操作行为使用<code>post</code>。</li></ul></li><li>数据模型定义规范：<ul><li>api接口层的数据模型，它是对外提供服务接口，为保护数据库数据结构，数据模型不可直接使用数据库映射的实体。</li><li>api接口数据模型的作用是应用层与服务层之间传递数据的对象，命名应以Dto（<code>Data Transfer Object</code>）结尾。</li><li>由于dubbo协议通常传输数据是二进制数据，也就是说你传递对象时对象将会被序列化，所以Dto对象一定要<strong>实现Serializable接口</strong><br>（<code>可安装GenerateSerialVersionUID插件自动生成serialVersionUID</code>），否则dubbo消费者调用会出错。</li><li>应用层的数据模型，它的作用是把某个指定页面的所有数据封装起来，因此把它定义为视图对象，命名应以Vo（<code>View Object</code>）结尾。</li></ul></li><li>异常处理规范：<ul><li>框架已对常见的Http异常进行了识别、处理和封装，无需再重复处理。</li><li>及时抛出业务产生的异常，即 <strong>BusinessException</strong>。</li><li>对可预见的异常以及RPC异常进行日志记录，以便于线上问题追踪。</li></ul></li><li>参数合法性检查规范：<ul><li>在应用控制层进行前端入参合法性校验，避免异常参数流向下一层造成业务异常，甚至<strong>事务无法回滚</strong>问题。</li><li>dubbo-api是提供给自身应用以及其他业务使用的对外接口，考虑到安全性和通用性，需在接口处（<code>已融合Hibernate Validate框架，使用注解即可</code>）做参数校验。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设计思想&quot;&gt;&lt;a href=&quot;#设计思想&quot; class=&quot;headerlink&quot; title=&quot;设计思想&quot;&gt;&lt;/a&gt;设计思想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个大型的分布式系统一般会包含多个应用，各个应用包含多端展现（&lt;code&gt;移动端、wx端、web门户、后台管理&lt;/code&gt;），而且应用之间往往还存在共同的业务（&lt;code&gt;上传、评论、支付、搜索&lt;/code&gt;），应用之间还会存在调用关系等。&lt;br&gt; 因此，为了使业务得到很好的复用，模块更加容易拓展和维护，我们希望业务与应用分离。&lt;/li&gt;
&lt;li&gt;应用层只包含前端展现和路由接口，服务层来实现具体业务，以供多端在不同场景下展现。&lt;ul&gt;
&lt;li&gt;因此业务的接口需要具备通用性，可供&lt;strong&gt;多端多应用多场景&lt;/strong&gt;使用，这对各位的设计能力来讲是一个考验（易用性、通用性、易拓展易维护）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务层被共享使用，会带来一些其它的&lt;strong&gt;挑战&lt;/strong&gt;，比如业务并发压力等，考虑到性能、伸缩性、可用性和与Spring结合使用的技术成本，我们选择阿里的开源服务框架dubbo来解决这些问题，&lt;br&gt; 由dubbo来提供服务治理功能，dubbo-api 提供接口，dubbo-service 提供业务服务。&lt;br&gt; &lt;code&gt;ps：对于dubbo框架不了解的同学可以学习 http://dubbo.wangxingrong.com/User+Guide-zh.htm&lt;/code&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://ligang-chn.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="https://ligang-chn.github.io/tags/smartSpring/"/>
    
      <category term="框架" scheme="https://ligang-chn.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="设计" scheme="https://ligang-chn.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 03.开发说明</title>
    <link href="https://ligang-chn.github.io/2018/04/18/smartcity-frame-development-description/"/>
    <id>https://ligang-chn.github.io/2018/04/18/smartcity-frame-development-description/</id>
    <published>2018-04-18T07:16:26.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要讲解项目的基本结构以及各个主要功能点的开发示例。</p><blockquote><p>由于本项目主要使用阿里的<code>Dubbo</code>来做为开发架构，因此也可用于Dubbo开发者学习。</p></blockquote><a id="more"></a><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>当我们使用这套框架搭一个初始化的项目亦或是一个成熟项目之后，它大概的结构是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">.demo-parent </span><br><span class="line">|-- db-change ········································ 数据库表字段更改记录</span><br><span class="line">|</span><br><span class="line">|-- startup ·········································· 启动脚本，部分项目可能无</span><br><span class="line">|</span><br><span class="line">|-- demo-core ········································ 项目公共jar包，公共变量及方法，小项目舍弃 &lt;!-- more --&gt;</span><br><span class="line">|   |-- src </span><br><span class="line">|   |   |-- main</span><br><span class="line">|   |   |   |-- java </span><br><span class="line">|   |   |   |   `-- 包路径             </span><br><span class="line">|   |   |   |       |-- constants ···················· 公共常量目录，应用所需常量，不包含api常量</span><br><span class="line">|   |   |   |       `-- utils ························ 公用工具类目录        </span><br><span class="line">|   |   |   `-- resources</span><br><span class="line">|   |   `-- test</span><br><span class="line">|   `-- pom.xml ······································ 构建配置信息</span><br><span class="line">|</span><br><span class="line">|-- demo-api ········································· 服务层接口，dubbo-api包，提供服务层接口</span><br><span class="line">|   |-- src </span><br><span class="line">|   |   |-- main</span><br><span class="line">|   |   |   |-- java</span><br><span class="line">|   |   |   |   `-- 包路径             </span><br><span class="line">|   |   |   |       |-- constants ···················· 常量目录，api对外常量            </span><br><span class="line">|   |   |   |       |-- api ·························· dubbo-api接口目录             </span><br><span class="line">|   |   |   |       `-- model ························ 接口出入参数模型目录，模型一般以Dto结尾</span><br><span class="line">|   |   |   |           |-- 模块1              </span><br><span class="line">|   |   |   |           `-- 模块2              </span><br><span class="line">|   |   |   `-- resources</span><br><span class="line">|   |   |       `-- dubbo ···························· duubo配置文件目录</span><br><span class="line">|   |   |           `-- dubbo-consume-demo.xml ······· 提供给消费者的duubo接口，便于消费者集成</span><br><span class="line">|   |   `-- test</span><br><span class="line">|   `-- pom.xml ······································ 构建配置信息</span><br><span class="line">|</span><br><span class="line">|-- demo-app ········································· 应用层，restful接口war包，提供rest请求</span><br><span class="line">|   |-- src</span><br><span class="line">|   |   |-- main</span><br><span class="line">|   |   |   |-- java</span><br><span class="line">|   |   |   |   `-- 包路径            </span><br><span class="line">|   |   |   |       |-- base ························· 基本信息目录           </span><br><span class="line">|   |   |   |       |   |-- config          </span><br><span class="line">|   |   |   |       |   |   |-- RestConfig.java ······ jersry框架里Servlet的配置类，一般不修改</span><br><span class="line">|   |   |   |       |   |-- Config.java ·············· 利用spring-bean对配置信息的映射类</span><br><span class="line">|   |   |   |       |   `-- ReturnCode.java ·········· 异常信息的枚举           </span><br><span class="line">|   |   |   |       |-- biz ·························· 应用逻辑层目录，聚合接口，格式化参数</span><br><span class="line">|   |   |   |       |-- rest ························· 应用控制层目录，接收前端参数，校验合法性</span><br><span class="line">|   |   |   |       `-- vo ··························· 前后端交互的参数模型目录，一般以Vo结尾</span><br><span class="line">|   |   |   |           |-- 模块1             </span><br><span class="line">|   |   |   |           `-- 模块2 </span><br><span class="line">|   |   |   |-- resources ···························· 项目资源目录</span><br><span class="line">|   |   |   |   |-- config ··························· 配置文件目录            </span><br><span class="line">|   |   |   |   |   |-- local ························ 本地调试配置信息目录           </span><br><span class="line">|   |   |   |   |   |-- dev ·························· 开发服务器配置信息目录            </span><br><span class="line">|   |   |   |   |   |-- test ························· 测试环境配置信息目录            </span><br><span class="line">|   |   |   |   |   `-- prod ························· 生产环境配置信息目录            </span><br><span class="line">|   |   |   |   |-- application-context.xml ·········· spring-bean的配置信息          </span><br><span class="line">|   |   |   |   |-- dubbo-consumer.xml ··············· dubbo消费者的初始化配置信息            </span><br><span class="line">|   |   |   |   `-- log4j.properties ················· log4j日志的配置信息           </span><br><span class="line">|   |   |   `-- webapp  ······························ war包的信息配置目录</span><br><span class="line">|   |   |       |-- WEB-INF</span><br><span class="line">|   |   |       |   `-- web.xml ······················ web项目入口，初始化配置信息</span><br><span class="line">|   |   |       `-- index.jsp ························ 项目初始化欢迎页</span><br><span class="line">|   |   `-- test</span><br><span class="line">|   |-- jetty.xml ···································· jetty描述文件，一般不做修改 </span><br><span class="line">|   |-- pom.xml ······································ 项目构建配置信息</span><br><span class="line">|   `-- readMe.txt ··································· 部署说明，注意事项</span><br><span class="line">|</span><br><span class="line">|-- demo-backend ····································· 应用层，项目后台管理系统war包</span><br><span class="line">|   |-- src</span><br><span class="line">|   |   |-- main</span><br><span class="line">|   |   |   |-- java</span><br><span class="line">|   |   |   |   `-- 包路径             </span><br><span class="line">|   |   |   |       |-- base ························· 基本信息目录 </span><br><span class="line">|   |   |   |       |   |-- Config.java ·············· 利用spring-bean对配置信息的映射类</span><br><span class="line">|   |   |   |       |   `-- ReturnCode.java ·········· 异常信息的枚举           </span><br><span class="line">|   |   |   |       |-- biz ·························· 应用逻辑层目录，聚合接口，格式化参数</span><br><span class="line">|   |   |   |       |-- controller ··················· 应用控制层目录，接收前端参数，校验合法性</span><br><span class="line">|   |   |   |       |-- filter ······················· 过滤器目录            </span><br><span class="line">|   |   |   |       |   `-- LoginFilter.java ········· 登陆过滤器，管理登陆时的session信息</span><br><span class="line">|   |   |   |       `-- vo ··························· 前后端交互的参数模型目录，一般以Vo结尾</span><br><span class="line">|   |   |   |           |-- 模块1              </span><br><span class="line">|   |   |   |           `-- 模块2 </span><br><span class="line">|   |   |   |-- resources ···························· 资源目录，同上，不再详细说明</span><br><span class="line">|   |   |   |   |-- config             </span><br><span class="line">|   |   |   |   |   |-- local            </span><br><span class="line">|   |   |   |   |   |-- dev            </span><br><span class="line">|   |   |   |   |   |-- test             </span><br><span class="line">|   |   |   |   |   `-- prod             </span><br><span class="line">|   |   |   |   |-- application-context.xml            </span><br><span class="line">|   |   |   |   |-- dubbo-consumer.xml             </span><br><span class="line">|   |   |   |   `-- log4j.properties             </span><br><span class="line">|   |   |   `-- webapp</span><br><span class="line">|   |   |       |-- resources ························ 前端静态资源目录</span><br><span class="line">|   |   |       |-- views ···························· jsp文件目录</span><br><span class="line">|   |   |       |   |-- 模块1</span><br><span class="line">|   |   |       |   |-- 模块2</span><br><span class="line">|   |   |       |   `-- error ························ 异常请求jsp文件目录</span><br><span class="line">|   |   |       |-- WEB-INF  ························· war包的信息配置目录</span><br><span class="line">|   |   |       |   `-- web.xml ······················ web项目入口，初始化配置信息</span><br><span class="line">|   |   |       `-- index.jsp ························ 初始化欢迎页jsp</span><br><span class="line">|   |   `-- test</span><br><span class="line">|   |-- jetty.xml ···································· jetty描述文件，一般不做修改 </span><br><span class="line">|   |-- jetty-env.xml ································ jetty的配置文件，一般配置数据库连接信息</span><br><span class="line">|   |-- pom.xml ······································ 构建配置信息</span><br><span class="line">|   `-- readMe.txt ··································· 部署说明，注意事项</span><br><span class="line">|</span><br><span class="line">|-- demo-web ········································· 应用层，项目web门户系统war包，类同backend</span><br><span class="line">|</span><br><span class="line">`-- demo-service ····································· 业务层，dubbo-service包，实现api接口</span><br><span class="line">    |-- src</span><br><span class="line">    |   |-- assembly ································· 打包配置目录</span><br><span class="line">    |   |   |-- bin ·································· 启动脚本目录</span><br><span class="line">    |   |   |   |-- run.bat ·························· windows环境启动脚本</span><br><span class="line">    |   |   |   |-- run.sh ··························· linux环境启动脚本 </span><br><span class="line">    |   |   `-- assembly.xml ························· service打包配置信息，一般不做修改</span><br><span class="line">    |   |-- main</span><br><span class="line">    |   |   |-- java</span><br><span class="line">    |   |   |   `-- 包路径             </span><br><span class="line">    |   |   |       |-- base ························· 基本信息目录</span><br><span class="line">    |   |   |       |   |-- Config.java ·············· 利用spring-bean对配置信息的映射类</span><br><span class="line">    |   |   |       |   |-- Constants.java ··········· 常量类，提供本子项目所需使用的常量</span><br><span class="line">    |   |   |       |   `-- ReturnCode.java ·········· 异常信息的枚举          </span><br><span class="line">    |   |   |       |-- dao ·························· 业务持久化层，调用sql，操作数据库</span><br><span class="line">    |   |   |       |-- entity ······················· 数据库表对应映射的实体类     </span><br><span class="line">    |   |   |       |-- service ······················ 业务实现层，api接口的实现</span><br><span class="line">    |   |   |       |-- InitApplication.java ········· 应用初始化类，在容器初始化后调用            </span><br><span class="line">    |   |   |       |-- Provider.java ················ dubbo的启动类，运行main方法启动项目</span><br><span class="line">    |   |   `-- resources</span><br><span class="line">    |   |       |-- config ··························· 配置文件目录</span><br><span class="line">    |   |       |   |-- local             </span><br><span class="line">    |   |       |   |-- dev             </span><br><span class="line">    |   |       |   |-- test             </span><br><span class="line">    |   |       |   `-- prod </span><br><span class="line">    |   |       |-- mapper ··························· Mybatis映射的xml文件目录  </span><br><span class="line">    |   |       |-- META-INF ························· jar包的信息配置目录</span><br><span class="line">    |   |       |   `-- spring ······················· spring配置信息目录</span><br><span class="line">    |   |       |       |-- dubbo-provider.xml ······· spring-bean的配置信息</span><br><span class="line">    |   |       |       `-- spring-context.xml ······· duubo提供者的初始化配置信息</span><br><span class="line">    |   |       |-- sql ······························ 初始化sql存放目录</span><br><span class="line">    |   |       |   |-- initTabel.xml ················ 初始化表结构sql</span><br><span class="line">    |   |       |   `-- initDate.xml ················· 初始化表数据sql</span><br><span class="line">    |   |       |-- log4j.xml ························ log4j日志的配置信息</span><br><span class="line">    |   |       |-- generatorConfig.xml ·············· mybatis反向生成代码配置文件</span><br><span class="line">    |   |       |-- mybatis-generator.properties ····· mybatis反向生成代码配置信息</span><br><span class="line">    |   |       `-- mybatis-config.xml ··············· mybatis配置信息</span><br><span class="line">    |   `-- test</span><br><span class="line">    |-- pom.xml ······································ 构建配置信息</span><br><span class="line">    `-- readMe.txt ··································· 部署说明，注意事项</span><br></pre></td></tr></table></figure><h3 id="开发示例"><a href="#开发示例" class="headerlink" title="开发示例"></a>开发示例</h3><p><em>注：素材侧重于举例说明使用方法，有诸多不规范的地方（注释内容，硬编码等），请勿完全参照。</em></p><h4 id="1-定义常量-amp-枚举"><a href="#1-定义常量-amp-枚举" class="headerlink" title="1. 定义常量&amp;枚举"></a>1. 定义常量&amp;枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommonEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">enum</span> Check implements StateEnum &#123;</span><br><span class="line">        <span class="comment">/** 0 否 ，1 是 ，2 未通过 */</span></span><br><span class="line">        TRUE(<span class="number">1</span>), FALSE(<span class="number">0</span>), NO_PASS(<span class="number">2</span>);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">enum</span> State implements ServiceEnum &#123;</span><br><span class="line">        DISABLE(<span class="number">0</span>, <span class="string">"已禁用"</span>),</span><br><span class="line">        ENABLE(<span class="number">1</span>, <span class="string">"已启用"</span>),</span><br><span class="line">        DELETE(<span class="number">2</span>, <span class="string">"已删除"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 状态 */</span></span><br><span class="line">        <span class="keyword">private</span> Integer state;</span><br><span class="line">        <span class="comment">/** 状态中文解释 */</span></span><br><span class="line">        <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">        State(Integer state, String text) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">            <span class="keyword">this</span>.text = text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义异常返回值"><a href="#2-定义异常返回值" class="headerlink" title="2. 定义异常返回值"></a>2. 定义异常返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ReturnCode implements IReturnCode &#123;</span><br><span class="line">    PARAM_NULL_ID(<span class="number">41001</span>, <span class="string">"missing id"</span>),</span><br><span class="line">    PARAM_INVALID_ID(<span class="number">41007</span>, <span class="string">"invalid id"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其余代码略   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现<code>IReturnCode</code>接口，添加异常业务类型（code，message）</li><li>如项目有core包，可全部定义在core中，避免重复业务</li><li>抛出异常有助于自己排查问题，也便于前端人员定位问题*</li></ul><h4 id="3-定义-dubbo-api"><a href="#3-定义-dubbo-api" class="headerlink" title="3. 定义 dubbo-api"></a>3. 定义 <em>dubbo-api</em></h4><ul><li><p>定义接口类和接口方法，在api包 <em>resources.dubbo</em> 文件夹下<em>dubbo-consume-demo.xml</em> 中声明接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打招呼</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(@NotBlank String name)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Demo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">DemoDto <span class="title">getDemo</span><span class="params">(@NotBlank Integer age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">interface</span>=<span class="string">"包路径.DemoService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">version</span>=<span class="string">"$&#123;dubbo.service.version.demo&#125;"</span> <span class="attr">validation</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>  <code>validation</code>为可选属性，缺省值是<code>false</code>，建议开启。开启验证后<a href="https://blog.csdn.net/danielzhou888/article/details/74740817" target="_blank" rel="noopener"> Hibernate Validator </a>注解生效，会对接口参数进行校验</p></li></ul><h4 id="4-dubbo-Service实现dubbo-api"><a href="#4-dubbo-Service实现dubbo-api" class="headerlink" title="4. dubbo-Service实现dubbo-api"></a>4. <em>dubbo-Service<em>实现</em>dubbo-api</em></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"demoService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoDao demoDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello , "</span> + name + <span class="string">" !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DemoDto <span class="title">getDemo</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoDao.getDemo(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Service注解后指定 &lt;<em>bean id</em>&gt;（与api.xml中定义的id需相同），spring.context.component-scan 扫描后即可自动托管bean对象</p><h4 id="5-配置服务提供者"><a href="#5-配置服务提供者" class="headerlink" title="5. 配置服务提供者"></a>5. 配置服务提供者</h4><ul><li><p>在 <em>pom.xml</em> 中依赖 api-jar 包</p></li><li><p>在 <em>resources.META-INF.spring</em> 目录（缺省目录）内新建配置文件<code>dubbo-provider.xml</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">"true"</span> <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Dubbo提供者配置<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"$&#123;dubbo.provider.application.name&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"$&#123;dubbo.registry.address&#125;"</span> <span class="attr">check</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeout</span>=<span class="string">"$&#123;dubbo.registry.timeout:30000&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 调用超时时间 和 服务版本信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">"$&#123;dubbo.provider.timeout:30000&#125;"</span> <span class="attr">version</span>=<span class="string">"$&#123;dubbo.service.version&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义服务所用协议信息-dubbo协议 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"$&#123;dubbo.dubbo.port&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明服务提供者接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"包路径.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">validation</span>=<span class="string">"true"</span> <span class="attr">retries</span>=<span class="string">"0"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <code>retries</code>为可选属性，缺省值是<code>2</code>，设置为0后可避免服务堵塞情况下自动重试导致事务问题。</p></li></ul><h4 id="6-启动服务提供者"><a href="#6-启动服务提供者" class="headerlink" title="6. 启动服务提供者"></a>6. 启动服务提供者</h4><ul><li>运行 <em>Provider.java</em> 内的<code>main()</code>方法即可启动消费者</li><li>更改 <em>src.assembly.bin</em> 目录内启动脚本中<code>APP_MAINCLASS</code>的路径为 <em>Provider.java</em></li></ul><h4 id="7-配置服务消费者"><a href="#7-配置服务消费者" class="headerlink" title="7. 配置服务消费者"></a>7. 配置服务消费者</h4><ul><li><p>在 <em>pom.xml</em> 中依赖 api-jar 包</p></li><li><p>在 <em>resources</em> 目录内新建配置文件<code>dubbo-consumer.xml</code>，并托管给Spring管理（在<em>web.xml*配置或者 *application-context.xml</em> 配置都可以）</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">"true"</span> <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"$&#123;dubbo.application.name&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"$&#123;dubbo.registry.address&#125;"</span> <span class="attr">check</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">timeout</span>=<span class="string">"$&#123;dubbo.registry.timeout:3000&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 远程服务调用超时时间，是否检查 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"$&#123;dubbo.consumer.timeout:3000&#125;"</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入其他api包中的配置文件，声明其提供的所有接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath*:/dubbo/dubbo-consumer-demo.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 声明欲使用的接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"commentService"</span> <span class="attr">interface</span>=<span class="string">"包路径.CommentService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">version</span>=<span class="string">"$&#123;dubbo.service.version.comment&#125;"</span> <span class="attr">validation</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中配置各项属性，有默认值的可不再重复配置</p><ul><li><code>registry</code>中<code>check</code>属性是检查注册中心是否正常</li><li><code>consumer</code>中<code>check</code>属性时检查对应服务是否正常注册</li></ul></li><li><p>接口如果不是全部需要使用建议单独声明需要的接口，无效声明过多引起连接资源浪费</p></li></ul><h4 id="8-完成-Restful-接口"><a href="#8-完成-Restful-接口" class="headerlink" title="8. 完成 Restful 接口"></a>8. 完成 <em>Restful</em> 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRestful</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/a"</span>)</span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@AppAuthorization</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@PathParam(<span class="string">"name"</span>)</span> String name, @<span class="title">PathParam</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) </span>&#123;</span><br><span class="line">        <span class="comment">// 校验参数，抛出自定义的异常</span></span><br><span class="line">        <span class="keyword">if</span> (ParamVerifyUtil.isEmpty(id)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalParamsException(ReturnCode.PARAM_INVALID_ID);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 校验参数并自动抛出统一异常</span></span><br><span class="line">        ParamVerifyUtil.verifyEmpty(age);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用AppAuthorization注解后，可通过以下方法获取userId</span></span><br><span class="line">        String userId = BasicContext.get().getUserId（）;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用biz接口</span></span><br><span class="line">        xxBiz.xx();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> “hello word”;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在方法上加注注解 <code>@javax.ws.rs.GET</code>/<code>@javax.ws.rs.POST</code> ，声明请求方式</p><ul><li>get请求对用的参数注解为 <code>@QueryParam</code></li><li>post请求对应的参数注解为 <code>@FormParam</code></li></ul></li><li><p>如果请求体是文件流，应在方法上加注注解 <code>@Consumes(MediaType.MULTIPART_FORM_DATA)</code></p></li><li><p>如果需要对请求权限进行验证，需要加上自定义App权限验证注解<code>@AppAuthorization</code>，<br> 使用后框架会对请求进行验证，并根据入参token解析userId</p></li><li><p>两种校验参数方式根据业务自由选择，入参均支持常用数据类型<br><code>ps: jersey框架与Hibernate Validator框架融合时有版本兼容问题，暂未解决，所以暂时使用手动验证。</code></p></li><li><p>如果请求参数过多，可封装成实体类，使用注解 <code>@BeanParam</code>标注实体，<br>实体类的各个参数需加对应请求的注解 <code>@QueryParam</code> or <code>@FormParam</code> ，例如：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@BeanParam DemoFormVo demo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello word"</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoFormVo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@FormParam</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FormParam</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-完成Controller-接口"><a href="#9-完成Controller-接口" class="headerlink" title="9. 完成Controller 接口"></a>9. 完成<em>Controller</em> 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoControlle</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/demo"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@Validated  @ModelAttribute DemoFormVo demo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello word"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoFormVo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">150</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用方式与Restful接口类似，不同的是注解使用SpringMVC的注解<ul><li>实体类的注解使用<code>@ModelAttribute</code>，且不在需要加注参数注解</li><li>使用<a href="https://blog.csdn.net/danielzhou888/article/details/74740817" target="_blank" rel="noopener"> Hibernate Validator </a>框架的注解进行参数合法性验证</li></ul></li></ul><h4 id="10-完成biz层逻辑"><a href="#10-完成biz层逻辑" class="headerlink" title="10. 完成biz层逻辑"></a>10. 完成<em>biz</em>层逻辑</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBiz</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentService commentService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DemoVo <span class="title">demo</span><span class="params">(DemoFormVo form)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 调用demoService接口</span></span><br><span class="line">        DemoDto dto = demoService.getDemo(form.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 识别业务异常，及时抛出</span></span><br><span class="line">        <span class="keyword">if</span>(dto == <span class="keyword">null</span>)&#123;</span><br><span class="line">            logger.error（“xx业务异常”）；</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ReturnCode.PARAM_NULL_ID);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过GsonUtil转换得到DemoVo</span></span><br><span class="line">        DemoVo vo = GsonUtil.convert(dto, DemoVo.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用其他dubbo-api接口</span></span><br><span class="line">        Comment comment = commentService.getComment(form.getAge());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 封装返回值</span></span><br><span class="line">        vo.setComment(comment);</span><br><span class="line">        <span class="keyword">return</span> vo；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>及时识别业务异常，记录日志并抛出</p><h4 id="11-使用Redis缓存"><a href="#11-使用Redis缓存" class="headerlink" title="11. 使用Redis缓存"></a>11. 使用<em>Redis</em>缓存</h4><ul><li>在<em>application-context.xml*中引入bean配置 `&lt;import resource=”classpath</em>:cache/*.xml”/&gt;` ，并在配置文件中配置以下属性<ul><li>redis.host  </li><li>redis.port </li><li>redis.database </li><li>redis.password </li><li>redis.maxIdle     连接池状态为idle的实例个数，缺省值300，可不配置</li><li>redis.maxWait     连接池最大等待时间（s），缺省值3000，可不配置</li><li>redis.maxTotal    连接池最大连接数，缺省值50，可不配置</li></ul></li><li>调用<em>RedisUtils</em>工具类里封装的方法即可。</li></ul><h4 id="12-处理自定义异常"><a href="#12-处理自定义异常" class="headerlink" title="12. 处理自定义异常"></a>12. 处理自定义异常</h4><ul><li><p>在<em>web.xml</em> 里配置SpringMVC的<code>servlet-class</code>。<br> 缺省配置的处理异常 class 为 <code>com.iflytek.sgy.social.web.core.exception.ExceptionDispatcherServlet</code> </p></li><li><p>如果需要处理自定义异常（<em>注：此功能在 V 0.5.0版本后方可使用</em>），则需要编写实现类继承<br><code>com.iflytek.sgy.social.web.core.exception.AbstractExceptionDispatcherServlet</code>，重载<code>handleOtherException()</code>方法，覆盖缺省配置。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayExceptionDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">AbstractExceptionDispatcherServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Result <span class="title">handleOtherException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> PayErrorException) &#123;</span><br><span class="line">        logger.error(<span class="string">" ========== pay error ========== "</span>, ex);</span><br><span class="line">        </span><br><span class="line">        IPayError error = ((PayErrorException) ex).getPayError();</span><br><span class="line">        ReturnCode returnCode = error.getPayError();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回失败结果</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(returnCode.getCode(), returnCode.getErrorMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="13-实现集中管理-APP-Session"><a href="#13-实现集中管理-APP-Session" class="headerlink" title="13. 实现集中管理 APP Session"></a>13. 实现集中管理 <em>APP Session</em></h4><p><em>注：此功能在 V 0.5.0版本后方可使用。</em></p><ul><li><p>实现接口<code>com.iflytek.sgy.social.app.core.base.TokenTemplate</code>，重载抽象方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppToken</span> <span class="keyword">implements</span> <span class="title">TokenTemplate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户UUID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中解析userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token TOKEN</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户UUID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeToken</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户UUID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">destroyToken</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <em>application-context.xml</em> 里加上配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath*:aop/*.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置token管理的实现--&gt;</span>-</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"appToken"</span> <span class="attr">class</span>=<span class="string">"包路径.AppToken"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.iflytek.sgy.social.app.core.base.TokenManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:tokenTemplate-ref</span>=<span class="string">"appToken"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更改<em>web.xml</em> 里<code>servlet-class</code> 为 <code>com.iflytek.sgy.social.app.core.extension.ServletContainer</code></p></li></ul><h4 id="14-自动执行SQL初始化脚本"><a href="#14-自动执行SQL初始化脚本" class="headerlink" title="14. 自动执行SQL初始化脚本"></a>14. 自动执行<em>SQL</em>初始化脚本</h4><p><em>注：此功能在 V 0.5.0版本后方可使用。</em></p><ul><li><p>实现<code>ApplicationListener</code>接口，重载<code>onApplicationEvent()</code>方法，在方法里调用<code>executeSqlInit()</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitApplication</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExecuteSqlDao executeSqlDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取ExecuteSqlDao实例，调用执行sql初始化方法</span></span><br><span class="line">        ExecuteSqlEvent.getInstance(executeSqlDao).executeSqlInit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <em>resources.sql</em> 目录下建立 initTable.xml（初始化建表）和 initData.xml（初始化数据）</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tables</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表名，例如T_NAFC_RESOURCE --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">check</span>&gt;</span>T_TABELE_NAME<span class="tag">&lt;/<span class="name">check</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sql</span>&gt;</span> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tables</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>check</code>标签是表名</li><li><code>sql</code>标签是待执行<em>sql</em>，建表语句 or 数据初始化语句</li></ul></li></ul><h4 id="15-配置常用maven插件"><a href="#15-配置常用maven插件" class="headerlink" title="15. 配置常用maven插件"></a>15. 配置常用<em>maven</em>插件</h4><p><em>注：此功能在 V 0.5.0版本后方可使用。</em></p><ul><li><p><em>dubbo-service</em> 定制化打包插件已预定义直接使用即可</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><em>jetty</em> 插件和 <em>tomcat</em> 插件已预定义直接使用即可，缺省端口是8090，如需改变请覆盖配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jetty.port</span>&gt;</span>8091<span class="tag">&lt;/<span class="name">jetty.port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tomcat.port</span>&gt;</span>8092<span class="tag">&lt;/<span class="name">tomcat.port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jetty插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="16-打包发布"><a href="#16-打包发布" class="headerlink" title="16. 打包发布"></a>16. 打包发布</h4><ul><li><p>根据环境执行不同环境的打包命令，不同环境对于不同的log过滤等级。<br> 命令 <code>mvn clea package -Pdeploy</code></p><ul><li><em>local</em> – DEBUG</li><li><em>dev</em> – DEBUG</li><li><em>test</em> – INFO</li><li><em>prod</em> – ERROR</li><li><em>deploy</em> – ERROR</li></ul></li><li><p><em>注：以下功能在 V 0.5.0版本后方可使用。</em></p><ul><li>除local环境打包后读取classpath下的配置文件，其他环境默认读取<code>/iflytek/zhcs/config/</code>目录下的配置，<br> 如需读取其他目录，可在pom.xml里覆盖配置 <code>environment.path</code>    </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要讲解项目的基本结构以及各个主要功能点的开发示例。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于本项目主要使用阿里的&lt;code&gt;Dubbo&lt;/code&gt;来做为开发架构，因此也可用于Dubbo开发者学习。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://ligang-chn.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="https://ligang-chn.github.io/tags/smartSpring/"/>
    
      <category term="框架" scheme="https://ligang-chn.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dubbo" scheme="https://ligang-chn.github.io/tags/Dubbo/"/>
    
      <category term="开发" scheme="https://ligang-chn.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 04.接口说明</title>
    <link href="https://ligang-chn.github.io/2018/04/18/smartcity-frame-interface-description/"/>
    <id>https://ligang-chn.github.io/2018/04/18/smartcity-frame-interface-description/</id>
    <published>2018-04-18T07:11:31.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具接口说明"><a href="#工具接口说明" class="headerlink" title="工具接口说明"></a>工具接口说明</h3><h4 id="DateUtil"><a href="#DateUtil" class="headerlink" title="DateUtil"></a>DateUtil</h4><p>时间转换工具类（com.xxx.core.util.DateUtil）</p><ul><li>字段概要</li></ul><table><thead><tr><th align="center">限定符</th><th>类型</th><th>字段</th><th>说明</th></tr></thead><tbody><tr><td align="center">static</td><td>String</td><td>DATE_FORMAT_HH_MM</td><td>HH:mm</td></tr><tr><td align="center">static</td><td>String</td><td>DATE_FORMAT_YYYY_MM_DD</td><td>yyyy-MM-dd</td></tr><tr><td align="center">static</td><td>String</td><td>DATE_FORMAT_YYYY_MM_DD_HH_MM</td><td>yyyy-MM-dd HH:mm</td></tr><tr><td align="center">static</td><td>String</td><td>DATE_FORMAT_YYYY_MM_DD_HH_MM_SS</td><td>yyyy-MM-dd HH:mm:ss</td></tr><tr><td align="center">static</td><td>String</td><td>DATE_FORMAT_YYYYMMDD</td><td>yyyyMMdd</td></tr><tr><td align="center">static</td><td>String</td><td>DATE_FORMAT_YYYYMMDDHHMMSS</td><td>yyyyMMddHHmmss</td></tr><tr><td align="center"><a id="more"></a></td><td></td><td></td><td></td></tr></tbody></table><ul><li>方法概要</li></ul><table><thead><tr><th>返回类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td>dateToDateStr(java.util.Date date)</td><td>Date转换为日期字符串:yyyy-MM-dd</td></tr><tr><td>String</td><td>dateToSimpleTimeStr(java.util.Date date)</td><td>Date转换为时间字符串:yyyy-MM-dd HH:mm</td></tr><tr><td>String</td><td>dateToStr(java.util.Date date, java.text.SimpleDateFormat sdf)</td><td>时间转换为字符串:sdf</td></tr><tr><td>String</td><td>dateToTimeStr(java.util.Date date)</td><td>Date转换为时间字符串:yyyy-MM-dd HH:mm:ss</td></tr><tr><td>String</td><td>dateToTimeXXStr(java.util.Date date)</td><td>Date转换为时间字符串:yyyyMMddHHmmss</td></tr><tr><td>String</td><td>formatDate(java.util.Date date, java.lang.String format)</td><td>日期转换,自定义格式</td></tr><tr><td>String</td><td>formatDateStringWithDot(java.lang.String timeStr)</td><td>处理从数据库查询的日期串带 .0的情况</td></tr><tr><td>Date</td><td>formatIdentifyIdToBirthday(java.lang.String identifyId)</td><td>将身份证转换为生日Date</td></tr><tr><td>String</td><td>friendlyFormat(java.util.Date date)</td><td>友好的方式显示时间 , 默认不是当天显示 yyyy-MM-dd HH:mm</td></tr><tr><td>String</td><td>friendlyFormat(java.util.Date date, java.lang.String pattern)</td><td>友好的方式显示时间</td></tr><tr><td>String</td><td>friendlyFormat(long dateLong)</td><td>友好的方式显示时间 , 默认不是当天显示 yyyy-MM-dd HH:mm</td></tr><tr><td>String</td><td>friendlyFormat(long dateLong, java.lang.String pattern)</td><td>友好的方式显示时间</td></tr><tr><td>String</td><td>friendlyFormat(java.lang.String str)</td><td>友好的方式显示时间 , 默认不是当天显示 yyyy-MM-dd HH:mm</td></tr><tr><td>Date</td><td>getAfterDays(java.util.Date date, int days)</td><td>获取某日期之后X天的日期</td></tr><tr><td>Date</td><td>getBeforeDays(java.util.Date date, int days)</td><td>获取某日期之前X天的日期</td></tr><tr><td>Date</td><td>getDate()</td><td>获取当前时间:Date</td></tr><tr><td>int[]</td><td>getDatetimeArray(java.util.Date date)</td><td>获取某时间的 年月日时分秒</td></tr><tr><td>List</td><td>getMonthDays(int year, int month, java.lang.String format)</td><td>获取指定年月的所有天数的字符串集合</td></tr><tr><td>String</td><td>getWeek(java.lang.String dateStr)</td><td>判断一个日期是星期几</td></tr><tr><td>Integer</td><td>getWeekDay(java.lang.String dateStr)</td><td>根据时间格式获取时间当前星期</td></tr><tr><td>boolean</td><td>isBeForeNow(java.lang.String formatDate)</td><td>判断时间是否是当前时间之前 ,当天不算</td></tr><tr><td>boolean</td><td>isDate(java.lang.String dateStr)</td><td>判断字符串是否为时间格式</td></tr><tr><td>Date</td><td>parseDate(java.lang.String dateStr, java.lang.String format)</td><td>日期转换,自定义格式</td></tr><tr><td>Date</td><td>strToDate(java.lang.String str)</td><td>字符串转换为日期:yyyy-MM-dd</td></tr><tr><td>Date</td><td>strToTime(java.lang.String str)</td><td>字符串转换为时间: yyyy-MM-dd HH:mm:ss</td></tr><tr><td>Date</td><td>strXXToTime(java.lang.String str)</td><td>字符串转换为时间: yyyyMMddHHmmss</td></tr><tr><td>String</td><td>timeStrToDateStr(java.lang.String str)</td><td>字符串由时间格式转换为日期格式: yyyy-MM-dd HH:mm:ss → yyyy-MM-dd</td></tr><tr><td>Integer</td><td>transferBirthdayToAge(java.util.Date birthday)</td><td>根据时间得到年龄</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工具接口说明&quot;&gt;&lt;a href=&quot;#工具接口说明&quot; class=&quot;headerlink&quot; title=&quot;工具接口说明&quot;&gt;&lt;/a&gt;工具接口说明&lt;/h3&gt;&lt;h4 id=&quot;DateUtil&quot;&gt;&lt;a href=&quot;#DateUtil&quot; class=&quot;headerlink&quot; title=&quot;DateUtil&quot;&gt;&lt;/a&gt;DateUtil&lt;/h4&gt;&lt;p&gt;时间转换工具类（com.xxx.core.util.DateUtil）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段概要&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;限定符&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;static&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;DATE_FORMAT_HH_MM&lt;/td&gt;
&lt;td&gt;HH:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;static&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;DATE_FORMAT_YYYY_MM_DD&lt;/td&gt;
&lt;td&gt;yyyy-MM-dd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;static&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;DATE_FORMAT_YYYY_MM_DD_HH_MM&lt;/td&gt;
&lt;td&gt;yyyy-MM-dd HH:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;static&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;DATE_FORMAT_YYYY_MM_DD_HH_MM_SS&lt;/td&gt;
&lt;td&gt;yyyy-MM-dd HH:mm:ss&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;static&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;DATE_FORMAT_YYYYMMDD&lt;/td&gt;
&lt;td&gt;yyyyMMdd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;static&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;DATE_FORMAT_YYYYMMDDHHMMSS&lt;/td&gt;
&lt;td&gt;yyyyMMddHHmmss&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;
    
    </summary>
    
    
      <category term="框架" scheme="https://ligang-chn.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="https://ligang-chn.github.io/tags/smartSpring/"/>
    
      <category term="框架" scheme="https://ligang-chn.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 05.常见问题</title>
    <link href="https://ligang-chn.github.io/2018/04/18/smartcity-frame-common-problem/"/>
    <id>https://ligang-chn.github.io/2018/04/18/smartcity-frame-common-problem/</id>
    <published>2018-04-18T06:56:15.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Q-返回值-code-400405"><a href="#Q-返回值-code-400405" class="headerlink" title="Q : 返回值 code 400405"></a>Q : 返回值 <em>code</em> 400405</h4><p><em>A</em> : GET/POST请求使用错误。 </p><h4 id="Q-消费者调用了别人的提供者服务，导致调试困难"><a href="#Q-消费者调用了别人的提供者服务，导致调试困难" class="headerlink" title="Q : 消费者调用了别人的提供者服务，导致调试困难"></a>Q : 消费者调用了别人的提供者服务，导致调试困难</h4><p><em>A</em> : 这是怎么造成的呢？<a id="more"></a>服务版本号设置是<code>dubbo.service.version= 0.5_${user.name}</code>，<br>只要<code>user.name</code>不同，理论上是不会存在交叉调用情况的；<br> 但这个<code>user.name</code>其实是操作系统当前登陆的用户名，大多数人都是Administrator用户登陆的，<br> 因此会出现版本号相同的情况，dubbo默认的负载均衡策略为Random Loadbalance（随机均衡算法），此时就有可能调用到其他人的服务了。<br>怎样避免这种情况发生呢？修改 user.name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">找到IDEA的安装目录，比如 C:\Program Files\JetBrains\IntelliJ IDEA 2017.2.3\bin </span><br><span class="line">用文本编辑器打开idea.exe.vmoptions（win32bit）和idea64.exe.vmoptions（win64bit），新建一行</span><br><span class="line">添加-Duser.name=your name</span><br></pre></td></tr></table></figure><h4 id="Q-service-项目启动时，日志不停刷新内容：asyncTotalCount-false"><a href="#Q-service-项目启动时，日志不停刷新内容：asyncTotalCount-false" class="headerlink" title="Q : service 项目启动时，日志不停刷新内容：asyncTotalCount: {false}"></a>Q : <em>service</em> 项目启动时，日志不停刷新内容：<em>asyncTotalCount: {false}</em></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paginator.PageInterceptor - dialectClass: &#123;***.paginator.dialect.OracleDialect&#125; </span><br><span class="line">paginator.PageInterceptor - asyncTotalCount: &#123;<span class="keyword">false</span>&#125;</span><br></pre></td></tr></table></figure><p><em>A</em> : 这是由于Mapper.xml中分页的sql有错误，检查近期提交的sql，特别是<code>parameterType</code>和<code>resultType</code></p><h4 id="Q-service-项目启动时报错-object-is-not-an-instance-of-declaring-class"><a href="#Q-service-项目启动时报错-object-is-not-an-instance-of-declaring-class" class="headerlink" title="Q : service 项目启动时报错 object is not an instance of declaring class"></a>Q : <em>service</em> 项目启动时报错 <em>object is not an instance of declaring class</em></h4><p><em>A</em> : 这是由于接口类没有暴露方法，导致服务没有实例化。</p><h4 id="Q-调用-dubbo-service-提供者的接口时报错-Failed-to-invoke-the-method"><a href="#Q-调用-dubbo-service-提供者的接口时报错-Failed-to-invoke-the-method" class="headerlink" title="Q : 调用 dubbo-service 提供者的接口时报错 Failed to invoke the method"></a>Q : 调用 <em>dubbo-service</em> 提供者的接口时报错 <em>Failed to invoke the method</em></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.rpc.RpcExeptiom:Failed to invoke the method</span><br><span class="line">com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:<span class="number">101</span>)</span><br></pre></td></tr></table></figure><p><em>A</em> : 这是由于在zookeeper中没有找到服务提供者，请检查服务提供者是否正常启动、服务版本号是否正确、接口参数类型是否正确。<br> 必要时可参考dubbo-admin控制台信息。</p><h4 id="Q-部署在-linux服务器上，service服务在zookeeper上注册的地址与服务器地址不一致。"><a href="#Q-部署在-linux服务器上，service服务在zookeeper上注册的地址与服务器地址不一致。" class="headerlink" title="Q : 部署在 linux服务器上，service服务在zookeeper上注册的地址与服务器地址不一致。"></a>Q : 部署在 <em>linux</em>服务器上，<em>service</em>服务在<em>zookeeper</em>上注册的地址与服务器地址不一致。</h4><p><em>A</em> : 可能是hosts ip 或者 DNS 设置错误</p><ul><li>检查<code>/etc/sysconfig/network</code>中的 <strong>HOSTNAME</strong> 与 <code>/etc/hosts</code>中的 <strong>${HOSTNAME}</strong> 对应的 hosts ip地址是否正确；</li><li>检查<code>/etc/resolv.conf</code>中的 <strong>nameserver</strong> 对应的DNS地址是的正确。</li></ul><h4 id="Q-service-服务出现异常-java-io-IOException-Connection-reset-by-peer"><a href="#Q-service-服务出现异常-java-io-IOException-Connection-reset-by-peer" class="headerlink" title="Q : service*服务出现异常 *java.io.IOException: Connection reset by peer"></a>Q : <em>service*服务出现异常 *java.io.IOException: Connection reset by peer</em></h4><p><em>A</em> : 出现 Connection reset by peer 原因可能是多方面的，不过更常见的原因是</p><ul><li>服务器的并发连接数超过了其承载量，服务器会将其中一些连接Down掉；</li><li>客户关掉了浏览器，而服务器还在给客户端发送数据；</li></ul><p>解决方法是：修改zookeeper安装目录下 conf/zoo.cfg文件。将maxClientCnxns参数改成更大的值。</p><h4 id="Q-ajax请求接口返回信息是空，基本信息-flag、code、message都没有"><a href="#Q-ajax请求接口返回信息是空，基本信息-flag、code、message都没有" class="headerlink" title="Q : ajax请求接口返回信息是空，基本信息 flag、code、message都没有"></a>Q : <em>ajax</em>请求接口返回信息是空，基本信息 <em>flag、code、message</em>都没有</h4><p><em>A</em> : SpringMVC框架返回值为null时，无法对返回值进行Result对象封装，请注意！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Q-返回值-code-400405&quot;&gt;&lt;a href=&quot;#Q-返回值-code-400405&quot; class=&quot;headerlink&quot; title=&quot;Q : 返回值 code 400405&quot;&gt;&lt;/a&gt;Q : 返回值 &lt;em&gt;code&lt;/em&gt; 400405&lt;/h4&gt;&lt;p&gt;&lt;em&gt;A&lt;/em&gt; : GET/POST请求使用错误。 &lt;/p&gt;
&lt;h4 id=&quot;Q-消费者调用了别人的提供者服务，导致调试困难&quot;&gt;&lt;a href=&quot;#Q-消费者调用了别人的提供者服务，导致调试困难&quot; class=&quot;headerlink&quot; title=&quot;Q : 消费者调用了别人的提供者服务，导致调试困难&quot;&gt;&lt;/a&gt;Q : 消费者调用了别人的提供者服务，导致调试困难&lt;/h4&gt;&lt;p&gt;&lt;em&gt;A&lt;/em&gt; : 这是怎么造成的呢？
    
    </summary>
    
    
      <category term="框架" scheme="https://ligang-chn.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="https://ligang-chn.github.io/tags/smartSpring/"/>
    
      <category term="框架" scheme="https://ligang-chn.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SmartSpring框架 -- 06.升级计划</title>
    <link href="https://ligang-chn.github.io/2018/04/18/smartcity-frame-upgrade-plan/"/>
    <id>https://ligang-chn.github.io/2018/04/18/smartcity-frame-upgrade-plan/</id>
    <published>2018-04-18T06:50:05.000Z</published>
    <updated>2019-06-19T23:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="V-0-5-0-SNAPSHOT"><a href="#V-0-5-0-SNAPSHOT" class="headerlink" title="V 0.5.0-SNAPSHOT"></a><em>V 0.5.0-SNAPSHOT</em></h3><pre><code>初始化版本，完成时间 2017-07-20</code></pre><ul><li>技术选型落地，规范开发流程和项目结构</li><li>在<code>pom.xml</code>里预定义常用开源组件依赖版本</li><li>拦截<code>Response</code>的返回值，自动封装成 <a href="https://ws1.sinaimg.cn/large/006tNc79ly1g2jvhtn6yqj30ts0l8tb1.jpg" target="_blank" rel="noopener">Result</a> </li><li>拦截<code>RuntimeException</code>异常，统一处理自动封装<a id="more"></a></li><li>融合 <em>Hibernate Validator</em> 验证框架，简化参数校验流程</li><li>初始化常用工具类，包含字符处理、集合处理、参数验证、时间格式、Json处理、SQL过滤等</li></ul><h3 id="V-0-5-0"><a href="#V-0-5-0" class="headerlink" title="V 0.5.0"></a><em>V 0.5.0</em></h3><pre><code>第一个迭代版本，完成时间 2018-04-08</code></pre><ul><li>增加了插件配置信息和环境配置信息预定义</li><li>集中管理分布式应用的<code>APP Session</code></li><li>根据 Token 认证增强 APP 接口安全性</li><li>支持处理自定义异常</li><li>自动执行<em>SQL</em>初始化脚本</li><li>支持自定义打包环境路径</li></ul><h3 id="V-0-5-1"><a href="#V-0-5-1" class="headerlink" title="V 0.5.1"></a><em>V 0.5.1</em></h3><pre><code>优化0.5.0版本中提出的问题，进行中……</code></pre><ul><li>为 APP 接口安全性验证增加一个开关，方便开发调试</li><li>优化 <em>mybatis-generator</em> 插件：实现批量生成和指定生成的功能</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;V-0-5-0-SNAPSHOT&quot;&gt;&lt;a href=&quot;#V-0-5-0-SNAPSHOT&quot; class=&quot;headerlink&quot; title=&quot;V 0.5.0-SNAPSHOT&quot;&gt;&lt;/a&gt;&lt;em&gt;V 0.5.0-SNAPSHOT&lt;/em&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;初始化版本，完成时间 2017-07-20&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;技术选型落地，规范开发流程和项目结构&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;pom.xml&lt;/code&gt;里预定义常用开源组件依赖版本&lt;/li&gt;
&lt;li&gt;拦截&lt;code&gt;Response&lt;/code&gt;的返回值，自动封装成 &lt;a href=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1g2jvhtn6yqj30ts0l8tb1.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Result&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;拦截&lt;code&gt;RuntimeException&lt;/code&gt;异常，统一处理自动封装
    
    </summary>
    
    
      <category term="框架" scheme="https://ligang-chn.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="smartSpring" scheme="https://ligang-chn.github.io/tags/smartSpring/"/>
    
      <category term="框架" scheme="https://ligang-chn.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>

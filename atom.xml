<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiGang&#39;s Blog</title>
  
  <subtitle>日拱一卒，功不唐捐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ligang-chn.github.io/"/>
  <updated>2020-01-19T08:19:39.160Z</updated>
  <id>https://ligang-chn.github.io/</id>
  
  <author>
    <name>小木子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再见，2019</title>
    <link href="https://ligang-chn.github.io/2020/01/19/%E5%86%8D%E8%A7%81%EF%BC%8C2019/"/>
    <id>https://ligang-chn.github.io/2020/01/19/再见，2019/</id>
    <published>2020-01-19T08:11:31.000Z</published>
    <updated>2020-01-19T08:19:39.160Z</updated>
    
    <content type="html"><![CDATA[<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119160918346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="70%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><a id="more"></a><h3 id="再见，2019"><a href="#再见，2019" class="headerlink" title="再见，2019"></a>再见，2019</h3><p>明天就回家了，今天正好有时间，那就总结总结2019年吧！</p><p>放假了才知道自己的自律能力还是很差，虽然有时间，有很多事，但就是提不上劲学习。一定缺失学习氛围，嗯，就是！这个锅可以甩！</p><p>一年又过去了。现在已经研二过半，明年就要考虑找工作的事情，说实话，现在还是优点迷茫。总结去年也写过，但是写的内容都是拼拼凑凑，貌似流水账，逻辑那叫一个乱。今年开始写博客了，所以年终总结也不能落下，毕竟，今天闲的！</p><p>2019年，本命年，算是我人生中比较多姿，也坎坷的一年吧。四季都一些事情发生，很多事情慢慢变成了过去，但是于我而言，回顾一年的经历，哪些地方做得还行，哪些地方需要改进，对自己的提升也是有很大帮助的。</p><h4 id="2019之原罪"><a href="#2019之原罪" class="headerlink" title="2019之原罪"></a>2019之原罪</h4><p>开篇必须先言其短！</p><p>今年越发感觉时间不够用了。一方面是自己时间管理能力差；另一方面也是源于自己的懒惰。每天花了很多时间在学习，但是产出很低，整个人一天都没有什么精神。每一天只是看似过的很充实，总是感觉心里欠缺点东西。现在回忆过去的一年内发生的事情，很多画面想诉诸笔端，却无从下笔。</p><p>1）<strong>读书太少</strong>。读书可以提升一个人的内涵，增加知识面，更有助于提升气质。在我的桌子上，技术类的书籍占据了99%，文学类的书籍屈指可数，明年需要多读一些非技术类的书籍。</p><p>2）<strong>运动频率低</strong>。在实验室一坐就是一整天，坐着的时间长达8小时，虽然手环设置了“久坐提醒”，哎，可是大部分时候正在看视频或打字，不想动弹。长时间看着电脑，眼睛累的不行，所以去吃饭或者在路上的时候都把眼镜摘掉（因为这个原因，有时候朋友碰到了打招呼，我都没有注意到，我真不是故意的！）晚上睡觉已经好久不睡枕头了，平坦着感觉脖子好舒服啊！但因为脑袋直接搁在床板上，时间长了，有段时间头疼的不行哦！</p><p>3）<strong>表达能力差</strong>。平时与人交流，脑中的想法和我表述的大相径庭，逻辑很乱，永远不知道自己在说什么。喜怒哀乐也统统摆在脸上，遇到讨厌的人或事，就喜欢直怼。有时候事后回想，都感觉自己幼稚，太不成熟了。</p><p>4）<strong>坚持在哪里</strong>。很早之前就打算写博客，记录学习中的关键点和生活的点滴，一个月又一个月，每次刚写一点就感觉麻烦，坚持不下去。今年借助GitHub搭建了个人博客，可以废弃了很久，并没有怎么更新。定了每周更新一篇的计划也没有执行。</p><p>5）<strong>缺乏面对疾风的心态</strong>。不管是学习上的困惑，还是生活中的坎坷，总是向着逃避，不敢正视问题本身。尤其在事情接踵而来，应接不暇时，常常容易宕机，然后选择逃避，彻底放纵自己，再次面对时还是一筹莫展。现在还是在学校，以后工作，问题更是来自四面八方，所以学会面对疾风吧！</p><blockquote><p>喝口水，接着。。。</p></blockquote><h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>2019年年初本来计划每周运动一次，去操场跑几圈，然而Flag不到一周就倒了，夏天太热，冬天太冷，不过，最主要的原因是操场太远，哈哈哈！下半年变成了一个月跑步一次，11月学校有个酷跑迷你马拉松，5Km的，一时兴起参加了，哎，长时间不锻炼，跑完累死了。好在最后还是坚持下来了！</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155157978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><p>2020，不管如何，还是要多锻炼，毕竟身体是自己的，天天对着电脑，不仅对眼睛不好，坐着也对腰不好。计划就不定了，我每次定的计划很少能执行完的。</p><h4 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h4><p>有个手环看着自己，还是不错的！先看看有了手环之后的睡眠记录吧。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155306153.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center>深睡的时间比较少，睡眠时间也比较晚，大多在12点左右，中午必须补充睡眠，不然下午完全废了，无精打采的。虽然知道熬夜对身体不好，但是身不由己啊，现在身体有点不舒服，该警惕了。之前看到这样一段话：> 知道后来才发现，>> 熬夜是缓解压力的一种方式。>> 爸妈都睡了，老师都睡了；>> 喜欢的人也睡了，全世界都睡了；>> 不用再去担心什么事情了。>> 用这好不容易偷来的时光，赶紧做点自己喜欢的。的确，这很符合我内心的独白。有时候，就是喜欢安静了自己一个人去考虑一些事情。很多朋友说我不怎么说话，有时候我变得话多了，都不认识了。我表现的沉默寡言的时候，心里有事情困扰，只想静静地理清思路。#### 游戏说实在的，游戏偶尔凑凑热闹，还是挺开心的，王者很适合解乏。晚上回宿舍与室友一起开黑，感觉挺爽！有时候排位，哎，猪一般的队友，打的想投降。王者里面我比较喜欢法师和刺客，喜欢那种一套带人走的感觉。时间精力有限，但是这几天，天天沦陷在峡谷。谁让之前一路飙升，赶紧人生达到了巅峰呢！游戏，玩的就是开心，输赢不需要太在意！#### 华为网挑赛19年4月份，过完清明节，参加了华为网络精英挑战赛，本来只是闲着无聊，冲着华为去的。比赛共三轮，初赛当时自己是有点把握的，虽然内容很多，时间比较紧，但是40%的过关率，相信自己不会太差。果然，进了复赛。复赛要到华为上海研究所，不得不说，华为真的是在举办比赛，服务太周到了，比赛过程水果无限量供应，中午的菜更是丰富，菜都没上完，我们就吃饱啦！比赛挺紧张的，因为我们组是上午集体面试，下午上机操作。所以等待时，闲聊发现，周围都是上交、负担、同济、中科大的，还有博士生，大部分都是研二，只要几个和我一样的研一的和大四的。当时心里慌得一匹，毕竟我那么菜。一直等这上一组结束，紧张的我去了次厕所，回来发现人都进去了。哎，当时刚坐下时更是不知所措。集体面试是分为两个小组，小组讨论，然后双方对抗，阐述自己方案的合理性。这个从来没有经历过，所以小组讨论刚开始，我没有怎么说话。还和我们组的方案设计产生了分歧，他们不认可我的意见，哎。讨论结束，面试官问我们组方案时，我也不知道自己哪来的勇气，站起来说出了自己想法，以至于对面小组，后面还表示他们组内意见统一，哎，我貌似给我们组背后插了一刀。不过，我真的是有充分的理由坚持自己的方案。全程我都很紧张，不停地在记录对方的方案，寻找缺陷，终于找到一个点，在关于新技术的使用上存在安全隐患问题，新技术还不完善，存在一些漏洞，但是效益巨大。我突然想到AWS与IBM的案例，我觉得能充分说明这个问题，阐述完自己的想法，感觉爽翻了。最后，面试官还夸了我，台风不错。哇，开心！这是我吗,哈哈哈！<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/2020011915533898.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="60%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center>下午上机操作，时间紧迫，最后还是存在一些问题，但是大部分做出来了。比赛结束HR带我们参观了华为上研所，当时真的没有心情参观，紧张比赛结果。结果真的出乎我的意料，进入前10了，还有奖品，华为B5手环，香～还有面试绿卡唉！最重要的是，进入决赛了，而且还是去深圳，华为总部。复赛到决赛，时隔一个月，难度更大。决赛的场面挺大，全国的选手都需要过去，优秀的人真的太多了，最后的冠军队伍组合无敌了，国防科大、湖大、中南、澳大利亚，其中还有个博士，太强了！赛程最后一天是参观华为松山湖基地，欧洲风格，真的好漂亮！仿照欧洲著名的建筑物建造了，转了一圈，真的很想在那里工作。最后在喜来登度假酒店举办的晚宴，第一次在沙滩浪，这个世界真的有比基尼小姐姐，那里的海水比之前去东极岛的好多了，能够下海玩。<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155415737.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="70%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155440551.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="70%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155510991.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="60%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><p>晚宴我们组两队，10个人，哎，不开心啊，没获奖，所以借酒浇愁。整个晚宴，我们这桌喝的就最多，大概要了八九瓶红酒，真的开心啊！华为真的在举办比赛。还想参加！</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155534204.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><h4 id="德国汉诺威"><a href="#德国汉诺威" class="headerlink" title="德国汉诺威"></a>德国汉诺威</h4><p>学校有个海外交流的项目，是去德国汉诺威大学。我觉得，要多走走，多看看，如果只是拘泥于上海，拘泥于国内，世界有太多的精彩会错过。</p><p>一个月的生活，认识了一些很好的朋友，自己做饭，我发现，我是个大厨！顶级厨师，嗯！</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155558531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center>德国的生活环境还是比较喜欢的，安静，一切看上去不是那么忙碌！外国人很懂得生活，国内的生活给人的感觉就是很浮躁，为了工作，为了薪水，为了家庭，感觉风风火火的。外国人的素质，不得不说挺好的，我比较喜欢那种环境。感触比较深的就是垃圾分类和空瓶子回收，垃圾分类做的很好，回国之后，上海也开始实行垃圾分类了，但是刚起步还需要慢慢来！德国的超市门口有一个瓶子回收的机器，有些瓶子是可以回收的，然后给你一张小票，买东西时可以折现。我们发现这个秘密后，每次上完课，教授发给我们的矿泉水瓶都收好，我们组的加起来快2欧了，然后买点菜回去，没办法，穷啊，外国的菜太贵了。最后是从法国回上海的，参观了卢浮宫，凯旋门，可以那时候我手机坏了，不能拍照。卢浮宫真的得壮观，收藏的展品，让人叹为观止！有个阿波罗神殿，本来想看，但是维护中看不了，不过看见了蒙娜丽莎的微笑，哈哈哈，人真的好多，乌压压一片！<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://img-blog.csdnimg.cn/20200119155627466.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><p>。。。写不动了，饿死了，快点收尾，我要去吃饭！（肚子的旁白）</p><p>下次，哎，不会了，一旦放下，不会在写的。</p><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><p>面对在下一个十年，2020年，希望能够做到下面六点：</p><ol><li>每月至少一篇高质量博文；</li><li>练习吉他，能够达到solo效果；</li><li>一场轻松的旅行，目标四川；</li><li>坚持锻炼，每周坚持跑步（但愿Flag不要倒）；</li><li>每天坚持一道算法题，锻炼思维；</li><li>能集中解决很多困惑，形成自己的原则与思维方式，并开始学着拒绝！</li></ol><p>2020年，一切又从零开始。</p><p>不乱于心，不困于情，不畏将来，不念过去，平静，便好！相</p><p>信前方一定会有另一番不同的风景，善待自己！</p><p>祝大家新年快乐，元旦快乐！</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
    &lt;img style=&quot;border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot; src=&quot;https://img-blog.csdnimg.cn/20200119160918346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70&quot; width=&quot;70%&quot;&gt;
    &lt;br&gt;
    &lt;div style=&quot;color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;&quot;&gt;&lt;/div&gt;
&lt;/center&gt;
    
    </summary>
    
    
    
      <category term="总结" scheme="https://ligang-chn.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ligang-chn.github.io/2019/12/26/GDBT/"/>
    <id>https://ligang-chn.github.io/2019/12/26/GDBT/</id>
    <published>2019-12-26T01:35:20.372Z</published>
    <updated>2019-12-26T01:35:20.372Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Qt—QSS样式表</title>
    <link href="https://ligang-chn.github.io/2019/10/07/QtQSS/"/>
    <id>https://ligang-chn.github.io/2019/10/07/QtQSS/</id>
    <published>2019-10-07T12:37:56.000Z</published>
    <updated>2019-10-08T07:20:16.057Z</updated>
    
    <content type="html"><![CDATA[<p>​        Qt样式表的概念、术语和语法都受到HTML的层叠样式表（CSS）的启发，不过Qt样式表应用于部件的世界。</p><p>​        样式表可以使用<code>QApplication::setStyleSheet()</code>函数将其设置到<strong>整个应用程序上</strong>，也可以使用<code>QWigdget::setStyleSheet()</code>函数将其设置到一个指定部件上。如果在不同的级别都设置了样式表，那么Qt会使用所有有效的样式表，这被称为样式表的层叠。</p><a id="more"></a><h4 id="1-样式规则"><a href="#1-样式规则" class="headerlink" title="1 样式规则"></a>1 样式规则</h4><p>​        样式表包含了一系列的样式规则，每个<strong>样式规则</strong>由<strong>选择器</strong>和<strong>声明</strong>组成。</p><p>​        <code>选择器</code>：指定了受该规则影响的部件；</p><p>​        <code>声明</code>：指定了这个部件上要设置的属性。</p><p>​        Qt样式表中一般不区分大小写，只有类名、对象名和Qt属性名是区分大小写的。一些选择器可以指定相同的声明，使用逗号隔开。样式表的声明部分是一些“属性：值”对组成的列表，它们包含在大括号中，使用分号隔开。</p><h4 id="2-选择器类型"><a href="#2-选择器类型" class="headerlink" title="2 选择器类型"></a>2 选择器类型</h4><p>​        常用的选择器类型：</p><div class="table-container"><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">通用选择器</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">类型选择器</td><td style="text-align:center">QPushButton</td></tr><tr><td style="text-align:center">属性选择器</td><td style="text-align:center">QPushButton[flat=“false”]</td></tr><tr><td style="text-align:center">类选择器</td><td style="text-align:center">.QPushButton</td></tr><tr><td style="text-align:center">ID选择器</td><td style="text-align:center">QPushButton#okButton</td></tr><tr><td style="text-align:center">后代选择器</td><td style="text-align:center">QDialog QPushButton</td></tr><tr><td style="text-align:center">孩子选择器</td><td style="text-align:center">QDialog&gt;QPushButton</td></tr></tbody></table></div><h4 id="3-子控件"><a href="#3-子控件" class="headerlink" title="3 子控件"></a>3 子控件</h4><p>​        选择器可以包含子控件来对部件的特定子控件应用规则。</p><h4 id="4-伪状态"><a href="#4-伪状态" class="headerlink" title="4 伪状态"></a>4 伪状态</h4><p>​        选择器可以包含伪状态来限制规则在部件的指定状态上应用。伪状态出现在选择器之后，用<code>冒号</code>隔离。</p><p>​        例如鼠标悬停使用<code>hover</code>。伪状态使用<code>感叹号</code>来表示<code>否定</code>，<code>!hover</code>。</p><p>​        伪状态还可以连用，达到<code>逻辑与</code>的效果。中间使用<code>冒号</code>。</p><p>​        如果中间使用<code>逗号</code>，则表示<code>逻辑或</code>操作。</p><p>​        伪状态也可以和子控件联合使用：针对上面3的子控件。</p><h4 id="5-冲突解决"><a href="#5-冲突解决" class="headerlink" title="5 冲突解决"></a>5 冲突解决</h4><p>​        当几个样式规则对相同的属性指定了不同的值就会产生冲突。</p><p>​        <strong>解决冲突的原则</strong>：</p><p>​        1、特殊的选择器优先。</p><p>​        2、有伪状态比没有伪状态优先。</p><p>​        3、如果两个选择符的特殊性相同，则后面出现的比前面的优先。</p><h4 id="6-继承"><a href="#6-继承" class="headerlink" title="6 继承"></a>6 继承</h4><p>​        当使用Qt样式表时，部件并不会自动从父部件继承字体和颜色设置。</p><h4 id="7-自定义部件外观"><a href="#7-自定义部件外观" class="headerlink" title="7 自定义部件外观"></a>7 自定义部件外观</h4><p>​        当使用样式表时，每一个部件都被看作是拥有4个同心矩形的盒子：内容content、填衬padding、边框border、边距margin。默认除内容外，其他值均为0。</p><p>​        可以使用：</p><p>​        <code>background-image</code>：指定一个背景；</p><p>​        <code>background-clip</code>：默认指定背景只能在边框以内的区域进行绘制，通过这个属性可以更改；</p><p>​        <code>background-repeat</code>：控制背景图片重复方式；</p><p>​        <code>background-origin</code>：控制背景图片原点。</p><p>​        </p><p>​        如果想要背景随着部件的大小变化，<strong>自动缩放</strong>，那就必须使用<code>border-image</code>。如果同时指定了<code>border-image</code>和<code>background-image</code>，那么<code>border-image</code>就会绘制在<code>background-image</code>上。</p><p>​        如果图片的尺寸与部件的大小不匹配，它不会拉伸或平铺。图片的对齐方式通过<code>image-position</code>来设置。</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        Qt样式表的概念、术语和语法都受到HTML的层叠样式表（CSS）的启发，不过Qt样式表应用于部件的世界。&lt;/p&gt;
&lt;p&gt;​        样式表可以使用&lt;code&gt;QApplication::setStyleSheet()&lt;/code&gt;函数将其设置到&lt;strong&gt;整个应用程序上&lt;/strong&gt;，也可以使用&lt;code&gt;QWigdget::setStyleSheet()&lt;/code&gt;函数将其设置到一个指定部件上。如果在不同的级别都设置了样式表，那么Qt会使用所有有效的样式表，这被称为样式表的层叠。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Qt" scheme="https://ligang-chn.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://ligang-chn.github.io/tags/Qt/"/>
    
      <category term="CSS" scheme="https://ligang-chn.github.io/tags/CSS/"/>
    
      <category term="QSS" scheme="https://ligang-chn.github.io/tags/QSS/"/>
    
  </entry>
  
  <entry>
    <title>QString&amp;QByteArray&amp;QVariant</title>
    <link href="https://ligang-chn.github.io/2019/10/07/QtQString/"/>
    <id>https://ligang-chn.github.io/2019/10/07/QtQString/</id>
    <published>2019-10-07T08:17:33.000Z</published>
    <updated>2019-10-07T12:29:25.177Z</updated>
    
    <content type="html"><![CDATA[<p>​        QString存储了一串QChar，而QChar提供了一个16位的Unicode 4.0字符。在后台，QString使用隐式共享来减少内存使用和避免不必要的数据复制。</p><a id="more"></a><h4 id="1-隐式共享"><a href="#1-隐式共享" class="headerlink" title="1 隐式共享"></a>1 隐式共享</h4><p>​        又称为写时复制。</p><p>​        使用隐式共享类作为参数传递是既安全又有效的，因为只有一个指向该数据的指针被传递了，只有当函数向它写入时才会复制该数据。</p><p>​        <strong>一个共享类 = 指向一个共享数据块的指针 + 数据组</strong></p><p>​        共享数据块包含了一个引用计数。每当有新的对象引用了数据块，引用计数就会递增，而对象不再引用数据块就会递减。当引用计数为0 时，共享数据块就会被销毁。当处理共享对象时，有两种复制方法：<code>深复制</code>和<code>浅复制</code>。</p><p>​        <code>深复制</code>：复制一个对象；</p><p>​        <code>浅复制</code>：复制一个引用（仅仅是一个指向该共享数据块的指针）。</p><p>​        当隐式共享类使用“=”操作符时就是使用浅复制。但是当一个对象被修改时，就必须进行一次深复制。</p><p>​        共享的好处是程序不需要进行不必要的数据复制，这样可以减少数据复制、使用更少的内存，对象也可以很容易地被分配，或者作为参数被传递，或者从函数被返回。</p><p>​        Qt中隐式共享类：QByteArray、QCursor、QFont、QPixmap、QString、QUrl、QVariant、所有的容器类等。</p><h4 id="2-QByteArray"><a href="#2-QByteArray" class="headerlink" title="2 QByteArray"></a>2 QByteArray</h4><p>​        提供一个字节数组，可以用来存储原始字节（包括‘\0’）和传统的以‘\0’结尾的8位字符串。</p><h4 id="3-QVariant"><a href="#3-QVariant" class="headerlink" title="3 QVariant"></a>3 QVariant</h4><p>​        QVariant类像是常见的Qt数据类型的一个共用体，一个QVariant对象在一个时间只保存一个单一类型的单一的值。可以使用<code>toT()</code>(T代表一种数据类型)函数将其转换位T类型，并且获取它的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        QString存储了一串QChar，而QChar提供了一个16位的Unicode 4.0字符。在后台，QString使用隐式共享来减少内存使用和避免不必要的数据复制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Qt" scheme="https://ligang-chn.github.io/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://ligang-chn.github.io/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="https://ligang-chn.github.io/2019/10/05/datastructureList/"/>
    <id>https://ligang-chn.github.io/2019/10/05/datastructureList/</id>
    <published>2019-10-05T06:46:08.000Z</published>
    <updated>2019-11-26T03:40:00.449Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-什么是线性表"><a href="#1-什么是线性表" class="headerlink" title="1 什么是线性表"></a>1 什么是线性表</h4><blockquote><p>线性表（List）：多个数据元素的有限序列。</p></blockquote><p>​        强调几个关键的地方：</p><p>​        首先，是一个<strong>序列</strong>；</p><p>​        其次，线性表是<strong>有限的</strong>。</p><p>​        <a id="more"></a></p><p>​        在较复杂的线性表中，一个数据元素可以由<strong>若干个数据项</strong>组成。</p><p>​        线性表常见的操作：</p><p>​        <code>InitList(*L)</code>：初始化操作，建立一个空的线性表L。</p><p>​        <code>ListEmpty(L)</code>：若线性表为空，返回true，否则为false。</p><p>​        <code>ClearList(*L)</code>：将线性表清空。</p><p>​        <code>GetElem(L,i,*e)</code>：将线性表L中的第i个位置元素值返回给e。</p><p>​        <code>LocateElem(L,e)</code>：在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号；否则返回0。</p><p>​        <code>ListInsert(*L,i,e)</code>：在线性表L中的第i个位置插入新元素e。</p><p>​        <code>ListDelete(*L,i,e)</code>：删除线性表L中的第i个位置元素，并用e返回其值。</p><p>​        <code>ListLength(L)</code>：返回线性表L的元素个数。</p><h4 id="2-顺序存储结构"><a href="#2-顺序存储结构" class="headerlink" title="2 顺序存储结构"></a>2 顺序存储结构</h4><p>​        描述顺序存储结构需要三个属性：</p><ul><li><p>存储空间的起始位置：数组data；</p></li><li><p>线性表的最大存储容量：数组长度MaxSize；</p></li><li><p>线性表的当前长度：length。</p></li></ul><p>​        【注意】：这里的“数组长度”和“线性表长度”的区别？</p><p>​        数组长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</p><p>​        线性表的长度是线性表中元素的个数，随着线性表插入和删除的进行，这个量是变化的。</p><p>​        ==<strong>随机存储结构</strong>==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序存储的结构代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20 <span class="comment">//存储空间初始分配量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType data[MAXSIZE];<span class="comment">//数组存储数据元素，最大值为MAXSIZE</span></span><br><span class="line"><span class="keyword">int</span> length;  <span class="comment">//线性表当前长度</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h5 id="2-1-获取元素"><a href="#2-1-获取元素" class="headerlink" title="2.1 获取元素"></a>2.1 获取元素</h5><p>​        判断线性表是否为空，确保获取的位置i在数组下标范围内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素操作</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">//操作结果：用e返回L中第i个数据元素的值</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span> || i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">*e = L.data[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-插入操作"><a href="#2-2-插入操作" class="headerlink" title="2.2 插入操作"></a>2.2 插入操作</h5><p>思路：1）如果插入的位置不合理，则抛出异常；</p><p>​        2）如果线性表长度大于等于数组长度，则抛出异常或动态增加容量；</p><p>​        3）从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置；</p><p>​        4）将要插入元素填入i处；</p><p>​        5）表长加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入元素操作</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(SqList *L,<span class="keyword">int</span> i ,ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;length == MAXSIZE)<span class="comment">//线性表已满</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length+<span class="number">1</span>)<span class="comment">//当i不再范围内时</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= L-&gt;length)<span class="comment">//插入数据位置不在表尾</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将要插入位置后数据元素后移一位</span></span><br><span class="line"><span class="keyword">for</span> (k = L-&gt;length - <span class="number">1</span>; k &gt;= i - <span class="number">1</span>; k--)</span><br><span class="line">L-&gt;data[k + <span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;data[i - <span class="number">1</span>] = e;<span class="comment">//新元素插入</span></span><br><span class="line">L-&gt;length++;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-删除操作"><a href="#2-3-删除操作" class="headerlink" title="2.3 删除操作"></a>2.3 删除操作</h5><p>思路：1）如果删除位置不合理，抛出异常；</p><p>​        2）取出删除元素；</p><p>​        3）从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；</p><p>​        4）表长减1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList *L, <span class="keyword">int</span> i, ElemType *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;length == <span class="number">0</span>);<span class="comment">//线性表为空</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">1</span> || i&gt; L-&gt;length + <span class="number">1</span>)<span class="comment">//删除位置不正确</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">if</span> (i &lt; L-&gt;length) &#123;</span><br><span class="line">*e = L-&gt;data[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (k = i; k &lt; L-&gt;length; k++)<span class="comment">//将删除位置后继元素前移</span></span><br><span class="line">L-&gt;data[k - <span class="number">1</span>] = L-&gt;data[k];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        对于顺序存储结构而言，在存、读数据时，时间复杂度是O(1);而插入或删除时，时间复杂度是O(n)。</p><h4 id="3-链式存储结构"><a href="#3-链式存储结构" class="headerlink" title="3 链式存储结构"></a>3 链式存储结构</h4><h5 id="3-1-顺序存储结构的不足"><a href="#3-1-顺序存储结构的不足" class="headerlink" title="3.1 顺序存储结构的不足"></a>3.1 顺序存储结构的不足</h5><p>​        顺序存储结构在插入或删除操作时，需要移动大量的元素，耗时。</p><h5 id="3-2-链式存储结构"><a href="#3-2-链式存储结构" class="headerlink" title="3.2 链式存储结构"></a>3.2 链式存储结构</h5><p>​        包含<code>数据域</code>和<code>指针域</code>。链表中第一个结点的存储位置叫作<code>头指针</code>。在单链表的第一个结点前附加一个结点，称为<code>头结点</code>。头结点的数据域可以不存任何信息，也可以存线性表长度等公共数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">ElemType data;<span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><h5 id="3-3-单链表读取"><a href="#3-3-单链表读取" class="headerlink" title="3.3 单链表读取"></a>3.3 单链表读取</h5><p>思路：1）声明一个指针p指向链表的第一个结点，初始化j从1开始；</p><p>​        2）当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</p><p>​        3）若到链表末尾p为空，则说明第i个结点不存在；</p><p>​        4）否则查找成功，返回结点p的数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType *e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LinkList p;  <span class="comment">//声明一个指针</span></span><br><span class="line">p = L-&gt;next; <span class="comment">//让p指向链表L的第一个结点</span></span><br><span class="line">j = <span class="number">1</span>;<span class="comment">//j为计数器</span></span><br><span class="line"><span class="keyword">while</span> (p&amp;&amp;j&lt;i)<span class="comment">//p不为空且计数器还没有等于i</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next; <span class="comment">//指向下一个结点</span></span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//第i个结点不存在</span></span><br><span class="line">*e = p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-单链表插入"><a href="#3-4-单链表插入" class="headerlink" title="3.4 单链表插入"></a>3.4 单链表插入</h5><blockquote><p>链表插入其实就是将待插入位置前一结点的指针域指向新结点，将新结点的指针域指向原来此位置的结点。</p></blockquote><p>思路：1）声明一指针p指向链表头结点，初始化j从1开始；</p><p>​        2）当j&lt;i时，就遍历链表，让 p的指针向后移动，不断指向下一结点，j累加1；</p><p>​        3）若到链表末尾p为空，则说明第i个结点不存在；</p><p>​        4）否则查找成功，在系统中生成一个空结点s；</p><p>​        5）将数据元素e赋值给<code>s-&gt;data</code>;</p><p>​        6）单链表的插入标准语句<code>s-&gt;next=p-&gt;next</code>;<code>p-&gt;next=s</code>；</p><p>​        7）返回成功。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList *L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LinkList p, s;</span><br><span class="line">p = *L;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p&amp;&amp;j &lt; i)<span class="comment">//寻找第i-1个结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; i)<span class="comment">//第i个结点不存在</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//生成新的结点</span></span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-5-单链表删除"><a href="#3-5-单链表删除" class="headerlink" title="3.5 单链表删除"></a>3.5 单链表删除</h5><blockquote><p>将待删除位置前的结点的指针域指向待删除位置结点后一结点，绕过此位置的结点。</p></blockquote><p>思路：1）声明一指针p指向链表头指针，初始化j从1开始；</p><p>​        2）当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；</p><p>​        3）若到链表末尾p为空，则说明第i个结点不存在；</p><p>​        4）否则查找成功，将欲删除的结点<code>p-&gt;next</code>赋值给q；</p><p>​        5）单链表的删除标准语句<code>p-&gt;next=q-&gt;next</code>;</p><p>​        6）将q结点中的数据赋值给e，作为返回；</p><p>​        7）释放q结点；</p><p>​        8）返回成功。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList *L, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LinkList p, q;</span><br><span class="line">p = *L;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next&amp;&amp;j &lt; i)<span class="comment">//寻找第i-1个结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;next) || j &gt; i)<span class="comment">//第i个结点不存在</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">*e = q-&gt;data;</span><br><span class="line"><span class="built_in">free</span> (q);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-单链表的整表创建"><a href="#3-6-单链表的整表创建" class="headerlink" title="3.6 单链表的整表创建"></a>3.6 单链表的整表创建</h5><p>​        创建单链表的过程就是一个动态生成链表的过程。</p><p>思路：1）声明一个指针p和计数器j；</p><p>​        2）初始化一空链表L；</p><p>​        3）让L的头结点的指针指向NULL，即建立一个带头结点的单链表；</p><p>​        4）循环：</p><ul><li>生成一个新结点赋值给p；</li><li>随机生成一数字赋值给p的数据域p-&gt;data;</li><li>将p插入到头结点与前一新结点之间。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整表创建(头插法)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListHead</span><span class="params">(LinkList *L, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">LinkList p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">srand(time(<span class="number">0</span>));   <span class="comment">//初始化随机数种子</span></span><br><span class="line">*L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">(*L)-&gt;next = <span class="literal">NULL</span>;<span class="comment">//先建立一个带头结点的单链表</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">p-&gt;next = (*L)-&gt;next;</span><br><span class="line">(*L)-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整表创建(尾插法)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListHead</span><span class="params">(LinkList *L, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">LinkList p,r;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">srand(time(<span class="number">0</span>));   <span class="comment">//初始化随机数种子</span></span><br><span class="line">*L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    r=*L; <span class="comment">//r为指向尾部的结点</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">p-&gt;data = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">        r=p;</span><br><span class="line">&#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-7-单链表的整表删除"><a href="#3-7-单链表的整表删除" class="headerlink" title="3.7 单链表的整表删除"></a>3.7 单链表的整表删除</h5><p>思路：1）声明一结点p和q；</p><p>​        2）将第一个结点赋值给p；</p><p>​        3）循环：</p><pre><code>    - 将下一结点赋值给q；    - 释放p；    - 将q赋值给p；</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整表删除</span></span><br><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(LinkList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p, q;</span><br><span class="line">p = (*L)-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">(*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-静态链表"><a href="#4-静态链表" class="headerlink" title="4 静态链表"></a>4 静态链表</h4><blockquote><p>用数组描述的链表，就叫静态链表，也称为游标实现法。</p></blockquote><p>​        对数组第一个和最后一个元素作为特殊元素处理，不存数据。通常把未被使用的数组元素称为备用链表，即空着的位置数组元素。数组第一个元素的cur（游标）存放<strong>备用链表</strong>的第一个结点的下标，数组的最后一个元素存放第一个有数值的元素的下标。</p><h4 id="5-循环链表"><a href="#5-循环链表" class="headerlink" title="5 循环链表"></a>5 循环链表</h4><blockquote><p>将单链表中终端结点的指针端改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表。</p></blockquote><p>​        其实循环链表和单链表的主要差异就体现在循环的判断条件上，原来是判断指针与是否为空，现在是判断是否为头结点。</p><p>​        不过我们这里可以改进以下循环链表，使用尾指针代替头指针，这样对于查找开始结点和终端结点都很方便了。</p><h4 id="6-双向链表"><a href="#6-双向链表" class="headerlink" title="6 双向链表"></a>6 双向链表</h4><pre><code>    &gt;双向链表：在单链表的每个结点中，再设置一个指向其前驱结点的指针域。</code></pre><p>​        这里插入操作时，顺序很重要。</p><p>​        $p\rightarrow q$，现在要在p和q之间，插入s结点；</p><p>​        $p\rightarrow s\rightarrow q$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;prior=p;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior=s;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line"><span class="comment">//注意这里结点之间都是双向的。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-什么是线性表&quot;&gt;&lt;a href=&quot;#1-什么是线性表&quot; class=&quot;headerlink&quot; title=&quot;1 什么是线性表&quot;&gt;&lt;/a&gt;1 什么是线性表&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;线性表（List）：多个数据元素的有限序列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        强调几个关键的地方：&lt;/p&gt;
&lt;p&gt;​        首先，是一个&lt;strong&gt;序列&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;​        其次，线性表是&lt;strong&gt;有限的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="数据结构" scheme="https://ligang-chn.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ligang-chn.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C++" scheme="https://ligang-chn.github.io/tags/C/"/>
    
      <category term="线性表" scheme="https://ligang-chn.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>机器学习—降维</title>
    <link href="https://ligang-chn.github.io/2019/10/04/PCA/"/>
    <id>https://ligang-chn.github.io/2019/10/04/PCA/</id>
    <published>2019-10-04T11:07:05.000Z</published>
    <updated>2019-10-04T11:12:19.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么需要降维？"><a href="#为什么需要降维？" class="headerlink" title="为什么需要降维？"></a>为什么需要降维？</h3><p>​        （1）多余的特征会影响或误导学习器</p><p>​        （2）更多特征意味着更多参数需要调整，过拟合风险也越大</p><p>​        （3）数据的维度可能只是虚高，真实维度可能比较小</p><p>​        （4）维度越少意味着训练越快，更多东西可以尝试，能够得到更好的结果</p><p>​        （5）如果我们想要可视化数据，就必须限制在两个或三个维度上</p><a id="more"></a><p>​        <strong>因此，我们需要通过降维把无关或冗余的特征删掉。</strong></p><p>​        <strong>降维的方法主要有</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[降维] --&gt;| | B[特征提取]</span><br><span class="line">B[特征提取] --&gt;| | 1[线性降维]</span><br><span class="line">B[特征提取] --&gt;| | 2[流形学习-非线性降维]</span><br><span class="line">B[特征提取] --&gt;| | 3[奇异值分解SVD]</span><br><span class="line">1[线性降维] --&gt;| | 11[主成分分析]</span><br><span class="line">1[线性降维] --&gt;| | 12[因子分析]</span><br><span class="line">1[线性降维] --&gt;| | 13[独立成分分析]</span><br><span class="line">1[线性降维] --&gt;| | 14[线性判别分析]</span><br><span class="line"></span><br><span class="line">A[降维] --&gt;| | C[特征筛选]</span><br><span class="line">C[特征筛选] --&gt;| | D[缺失值比率]</span><br><span class="line">C[特征筛选] --&gt;| | E[低方差滤波]</span><br><span class="line">C[特征筛选] --&gt;| | F[高相关滤波]</span><br><span class="line">C[特征筛选] --&gt;| | G[随机森林]</span><br><span class="line">C[特征筛选] --&gt;| | H[反向特征消除]</span><br><span class="line">C[特征筛选] --&gt;| | J[前向特征选择]</span><br></pre></td></tr></table></figure><p>​        低方差滤波：方差很小，包含的信息量很少；</p><p>​        高相关滤波：比如两个特征相关性较大，一个特征基本上可以替代另一个特征，就可以只保留一个；</p><p>​        随机森林：可以返回特征的重要性；</p><p>​        反向特征消除：把数据放到模型里面训练，剃掉一个特征来看看，模型的改变会不会很大；</p><p>​        前向特征选择：选一个最重要的特征放到模型里面，然后加一个重要的特征，观察模型改变；</p><h3 id="维度诅咒"><a href="#维度诅咒" class="headerlink" title="维度诅咒"></a>维度诅咒</h3><p>​        当训练实例拥有几千个甚至上百万个特征时，不仅导致训练非常缓慢，也更加难找到好的解决方案，这个问题就是维度诅咒。</p><p>​        在现实中，我们一般可以大量减少特征的数量，其一是有些特征对于分类任务来说是无足轻重的，比如，MNIST图像中边框的白色区域像素位，另外两个相邻像素通常是高度相关的，如果将它们合成为一个像素，也不会丢失太多的信息。</p><p>​        两种主要的数据降维方法：<strong>投影</strong>，<strong>流形学习</strong>；</p><p>​        三种降维技术：PCA，Kernal PCA ，LLE。</p><p>​        </p><p>​        高纬度数据集很大可能是非常稀疏的：大多数训练实例可能彼此之间相聚较远。训练集的维度越高，过度拟合的风险就越大。理论上来说，通过增大训练集，使训练实例达到足够的密度，是可以解开维度的诅咒的。但是，实践中，要达到给定密度所需要的训练实例数量随着维度增加呈指数式上升。</p><h3 id="数据降维的主要方法"><a href="#数据降维的主要方法" class="headerlink" title="数据降维的主要方法"></a>数据降维的主要方法</h3><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>​         实际中，训练实例在所有维度上并不是均匀分布的，许多特征几乎是不变的，有些特征是高度相关的。因此，高维空间的所有训练实例实际上（或近似）受一个低得多的低维子空间的影响。</p><p>​        在许多情况下，子空间可能会弯曲或转动。</p><h4 id="流形学习"><a href="#流形学习" class="headerlink" title="流形学习"></a>流形学习</h4><p>​        d维流形学习就是n（其中，d&lt;n）维空间中的一部分，局部类似于一个d维超平面。</p><p>​        </p><h3 id="降维算法—PCA"><a href="#降维算法—PCA" class="headerlink" title="降维算法—PCA"></a>降维算法—PCA</h3><p>​        主成分分析法，是一种非监督的机器学习算法，主要用于数据的降维。通过降维，可以发现更便于人类理解的特征，其他也可以用于：可视化，去噪。</p><p>​        PCA是通过抛弃携带信息量较少的纬度，保留主要的特征信息来对数据进行降维处理，思路上是使用少数几个有代表性、互不相关特征来代替原先的大量的、存在一定相关性的特征，从而加速机器学习进程。白化的目的是去掉数据之间的相关联度和令方差归一化。【数据预处理方式（去均值、归一化、PCA降维）<a href="https://blog.csdn.net/maqunfi/article/details/82252480】" target="_blank" rel="noopener">https://blog.csdn.net/maqunfi/article/details/82252480】</a></p><h4 id="什么是PCA"><a href="#什么是PCA" class="headerlink" title="什么是PCA"></a>什么是PCA</h4><p>​        对于一个有两个特征的数据集，如果我们用x轴表示特征1，y轴表示特征2，那么结果如下：</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么需要降维？&quot;&gt;&lt;a href=&quot;#为什么需要降维？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要降维？&quot;&gt;&lt;/a&gt;为什么需要降维？&lt;/h3&gt;&lt;p&gt;​        （1）多余的特征会影响或误导学习器&lt;/p&gt;
&lt;p&gt;​        （2）更多特征意味着更多参数需要调整，过拟合风险也越大&lt;/p&gt;
&lt;p&gt;​        （3）数据的维度可能只是虚高，真实维度可能比较小&lt;/p&gt;
&lt;p&gt;​        （4）维度越少意味着训练越快，更多东西可以尝试，能够得到更好的结果&lt;/p&gt;
&lt;p&gt;​        （5）如果我们想要可视化数据，就必须限制在两个或三个维度上&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://ligang-chn.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="PCA" scheme="https://ligang-chn.github.io/tags/PCA/"/>
    
      <category term="降维" scheme="https://ligang-chn.github.io/tags/%E9%99%8D%E7%BB%B4/"/>
    
      <category term="Python" scheme="https://ligang-chn.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习—Kmeans聚类</title>
    <link href="https://ligang-chn.github.io/2019/10/03/Kmeans%E8%81%9A%E7%B1%BB/"/>
    <id>https://ligang-chn.github.io/2019/10/03/Kmeans聚类/</id>
    <published>2019-10-03T02:17:23.000Z</published>
    <updated>2019-10-04T10:54:43.726Z</updated>
    
    <content type="html"><![CDATA[<p>​        聚类算法是一种典型的无监督算法，目的是依据已知数据，将相似度高的样本集中到各自的簇中。</p><p>​        聚类算法可以实现数据分割，异常点的监控。所谓的异常点就是远离簇的样本，而这些样本可能就是某些场景下的关注点。</p><p>​        聚类算法种类有：Kmeans聚类、K中心聚类、谱系聚类、EM聚类算法、基于密度的聚类和基于网格的聚类等。</p><p>​        本文主要是Kmeans聚类，该算法利用距离远近的思想将目标数据聚为指定的k个簇，簇内样本越相似，表明聚类效果越好。簇中心点由各簇样本均值计算得到。</p><a id="more"></a><h3 id="Kmeans的思想"><a href="#Kmeans的思想" class="headerlink" title="Kmeans的思想"></a>Kmeans的思想</h3><p>​        该算法思路很简单，就是不断计算各样本点与簇中心之间的距离，直到<strong>所有簇内样本的离差平方和之和</strong>达到最小为止。具体步骤如下：</p><p>​        1）从数据中随机挑选k个样本点作为原始的簇中心；</p><p>​        2）计算剩余样本与簇中心的距离，并把各样本标记为离k个簇中心最近的类别；</p><p>​        3）重新计算各簇内样本点的均值，并以均值作为新的k个簇中心；</p><p>​        4）不断重复2）和3），直到簇的中心的变化趋于稳定，形成最终的k个簇。</p><h3 id="Kmeans的原理"><a href="#Kmeans的原理" class="headerlink" title="Kmeans的原理"></a>Kmeans的原理</h3><p>​        根据如上思想，可以将<strong>目标函数</strong>表示为：</p><script type="math/tex; mode=display">J(c_1,c_2,...c_k)=\sum_{j=1}^{k}\sum_{i}^{n_j}(x_i-c_j)^2</script><p>​        其中，</p><p>​        $c_j$表示第$j$个簇的簇中心，</p><p>​        $x_i$属于第$j$个簇的样本$i$，</p><p>​        $n_j$表示第$j$个簇的样本总量。</p><p>​        即，在第$j$个簇内，计算其他样本点到簇中心的距离平方，然后将所有的距离平方累加求和（内层求和号），此时一个簇计算得到的是一个距离和值，最后将所有簇（$j$个簇）的距离和值再次累加求和（外层求和号），就是所有簇内样本的离差平方和之和。</p><p>​        对于上述目标函数，未知数是$c_j$，要想求目标函数的最小值，得先确定$c_j$的值。刚好目标函数是一个凸函数，可以通过求导的方式获取$c_j$的值。</p><p>​        第一步，对目标函数求偏导</p><script type="math/tex; mode=display">\frac {\partial J}{\partial c_j}=\sum_{i=1}^{n_j}-2(x_i-c_j)</script><p>​        【注意】：由于这里仅对第$j$个簇中心求偏导，所以其他簇此时的偏导数均为0。</p><p>​        第二步，令导数为0</p><script type="math/tex; mode=display">\sum_{i=1}^{n_j}-2(x_i-c_j)=0\\n_jc_j-\sum_{i=1}^{n_j}x_i=0\\c_j= \frac {\sum_{i=1}^{n_j}x_i}{n_j}=\mu_j</script><p>​        由此看出，<strong>只有当簇中心$c_j$为簇内样本的均值时，目标函数才会达到最小</strong>。这也是上面为什么用均值作为簇中心。</p><h3 id="K值确定"><a href="#K值确定" class="headerlink" title="K值确定"></a>K值确定</h3><p>​        前面都是基于已知的k个簇运算出最佳的簇中心，如果聚类之前不知道该聚为几类，该如何确定最佳的k值呢？</p><p>​        常用的有三种方式：<code>簇内离差平方和拐点法</code>、<code>轮廓系数法</code>、<code>间隔统计量法</code>。</p><h4 id="拐点法"><a href="#拐点法" class="headerlink" title="拐点法"></a>拐点法</h4><p>​        拐点法比较简单，类似于PCA降维时通过绘制贡献率曲线决定维数。通过可视化方法找到”拐点“对应的k值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入第三方包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成三组二元正态分布随机数 </span></span><br><span class="line">np.random.seed(<span class="number">1234</span>)</span><br><span class="line">mean1 = [<span class="number">0.5</span>, <span class="number">0.5</span>]</span><br><span class="line">cov1 = [[<span class="number">0.3</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0.3</span>]]</span><br><span class="line">x1, y1 = np.random.multivariate_normal(mean1, cov1, <span class="number">1000</span>).T</span><br><span class="line"></span><br><span class="line">mean2 = [<span class="number">0</span>, <span class="number">8</span>]</span><br><span class="line">cov2 = [[<span class="number">1.5</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">x2, y2 = np.random.multivariate_normal(mean2, cov2, <span class="number">1000</span>).T</span><br><span class="line"></span><br><span class="line">mean3 = [<span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line">cov3 = [[<span class="number">1.5</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">x3, y3 = np.random.multivariate_normal(mean3, cov3, <span class="number">1000</span>).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三组数据的散点图</span></span><br><span class="line">plt.scatter(x1,y1)</span><br><span class="line">plt.scatter(x2,y2)</span><br><span class="line">plt.scatter(x3,y3)</span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造自定义函数，用于绘制不同k值和对应总的簇内离差平方和的折线图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_SSE</span><span class="params">(X, clusters)</span>:</span></span><br><span class="line">    <span class="comment"># 选择连续的K种不同的值</span></span><br><span class="line">    K = range(<span class="number">1</span>,clusters+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 构建空列表用于存储总的簇内离差平方和</span></span><br><span class="line">    TSSE = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> K:</span><br><span class="line">        <span class="comment"># 用于存储各个簇内离差平方和</span></span><br><span class="line">        SSE = []</span><br><span class="line">        kmeans = KMeans(n_clusters=k)</span><br><span class="line">        kmeans.fit(X)</span><br><span class="line">        <span class="comment"># 返回簇标签</span></span><br><span class="line">        labels = kmeans.labels_</span><br><span class="line">        <span class="comment"># 返回簇中心</span></span><br><span class="line">        centers = kmeans.cluster_centers_</span><br><span class="line">        <span class="comment"># 计算各簇样本的离差平方和，并保存到列表中</span></span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> set(labels):</span><br><span class="line">            SSE.append(np.sum((X.loc[labels == label,]-centers[label,:])**<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># 计算总的簇内离差平方和 </span></span><br><span class="line">        TSSE.append(np.sum(SSE))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中文和负号的正常显示</span></span><br><span class="line">    plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">    plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 设置绘图风格</span></span><br><span class="line">    plt.style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">    <span class="comment"># 绘制K的个数与GSSE的关系</span></span><br><span class="line">    plt.plot(K, TSSE, <span class="string">'b*-'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'簇的个数'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'簇内离差平方和之和'</span>)</span><br><span class="line">    <span class="comment"># 显示图形</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将三组数据集汇总到数据框中</span></span><br><span class="line">X = pd.DataFrame(np.concatenate([np.array([x1,y1]),np.array([x2,y2]),np.array([x3,y3])], axis = <span class="number">1</span>).T)</span><br><span class="line"><span class="comment"># 自定义函数的调用</span></span><br><span class="line">k_SSE(X, <span class="number">15</span>)</span><br></pre></td></tr></table></figure><h4 id="轮廓系数法"><a href="#轮廓系数法" class="headerlink" title="轮廓系数法"></a>轮廓系数法</h4><p>​        该方法综合考虑了<code>簇的密集性</code>与<code>分散性</code>两个信息，即数据集被划分为k个簇，簇内高密集，簇间高分散。轮廓系数的计算方式：</p><script type="math/tex; mode=display">S(i)=\frac {b(i)-a(i)}{max(a(i),b(i))}</script><p>​        其中，$a(i)$——簇内的密集性，代表样本i与同簇内其他样本点距离的平均值；</p><p>​        $b(i)$——簇间的分散性，计算过程，样本i与其他非同簇样本点距离的平均值，然后从平均值中挑选出最小值。</p><p>​        当$S(i)$接近于-1，说明样本分配的不合理，需要将其分配到其他簇；</p><p>​        当$S(i)$近似为0，说明样本处于模糊地带，即簇的边界；</p><p>​        当$S(i)$近似为1，说明样本i分配的合理。</p><p>​        <strong>可以看出$S(i)$仅仅是计算单个样本i的轮廓系数，最后需要对所有点的轮廓系数求均值，才是对应k个簇的总轮廓系数</strong>。</p><p>​        当总轮廓系数小于0时，说明聚类效果不佳；</p><p>​        当总轮廓系数接近于1时，说明簇内样本的平均距离a非常小，簇间距离b非常大，聚类合理。</p><p>​        <code>sklearn</code>中对应模块：<code>metrices中的silhouette_score</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造自定义函数，用于绘制不同k值和对应轮廓系数的折线图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_silhouette</span><span class="params">(X, clusters)</span>:</span></span><br><span class="line">    K = range(<span class="number">2</span>,clusters+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 构建空列表，用于存储个中簇数下的轮廓系数</span></span><br><span class="line">    S = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> K:</span><br><span class="line">        kmeans = KMeans(n_clusters=k)</span><br><span class="line">        kmeans.fit(X)</span><br><span class="line">        labels = kmeans.labels_</span><br><span class="line">        <span class="comment"># 调用字模块metrics中的silhouette_score函数，计算轮廓系数</span></span><br><span class="line">        S.append(metrics.silhouette_score(X, labels, metric=<span class="string">'euclidean'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中文和负号的正常显示</span></span><br><span class="line">    plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">    plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 设置绘图风格</span></span><br><span class="line">    plt.style.use(<span class="string">'ggplot'</span>)    </span><br><span class="line">    <span class="comment"># 绘制K的个数与轮廓系数的关系</span></span><br><span class="line">    plt.plot(K, S, <span class="string">'b*-'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'簇的个数'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'轮廓系数'</span>)</span><br><span class="line">    <span class="comment"># 显示图形</span></span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义函数的调用</span></span><br><span class="line">k_silhouette(X, <span class="number">15</span>)</span><br></pre></td></tr></table></figure><h4 id="间隔统计量法"><a href="#间隔统计量法" class="headerlink" title="间隔统计量法"></a>间隔统计量法</h4><p>​        该方法适用于任何聚类算法。</p><p>​        Gap Statistic方法就是通过比较参照数据集的期望和实际数据集的对数，找到其下降最快的k值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数，计算簇内任意两样本之间的欧氏距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">short_pair_wise_D</span><span class="params">(each_cluster)</span>:</span></span><br><span class="line">    mu = each_cluster.mean(axis = <span class="number">0</span>)</span><br><span class="line">    Dk = sum(sum((each_cluster - mu)**<span class="number">2</span>)) * <span class="number">2.0</span> * each_cluster.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> Dk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算簇内的Wk值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_Wk</span><span class="params">(data, classfication_result)</span>:</span></span><br><span class="line">    Wk = <span class="number">0</span></span><br><span class="line">    label_set = set(classfication_result)</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> label_set:</span><br><span class="line">        each_cluster = data[classfication_result == label, :]</span><br><span class="line">        Wk = Wk + short_pair_wise_D(each_cluster)/(<span class="number">2.0</span>*each_cluster.shape[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> Wk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算GAP统计量 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gap_statistic</span><span class="params">(X, B=<span class="number">10</span>, K=range<span class="params">(<span class="number">1</span>,<span class="number">11</span>)</span>, N_init = <span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 将输入数据集转换为数组</span></span><br><span class="line">    X = np.array(X)</span><br><span class="line">    <span class="comment"># 生成B组参照数据</span></span><br><span class="line">    shape = X.shape</span><br><span class="line">    tops = X.max(axis=<span class="number">0</span>)</span><br><span class="line">    bots = X.min(axis=<span class="number">0</span>)</span><br><span class="line">    dists = np.matrix(np.diag(tops-bots))</span><br><span class="line">    rands = np.random.random_sample(size=(B,shape[<span class="number">0</span>],shape[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(B):</span><br><span class="line">        rands[i,:,:] = rands[i,:,:]*dists+bots</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自定义0元素的数组，用于存储gaps、Wks和Wkbs</span></span><br><span class="line">    gaps = np.zeros(len(K))</span><br><span class="line">    Wks = np.zeros(len(K))</span><br><span class="line">    Wkbs = np.zeros((len(K),B))</span><br><span class="line">    <span class="comment"># 循环不同的k值，</span></span><br><span class="line">    <span class="keyword">for</span> idxk, k <span class="keyword">in</span> enumerate(K):</span><br><span class="line">        k_means =  KMeans(n_clusters=k)</span><br><span class="line">        k_means.fit(X)</span><br><span class="line">        classfication_result = k_means.labels_</span><br><span class="line">        <span class="comment"># 将所有簇内的Wk存储起来</span></span><br><span class="line">        Wks[idxk] = compute_Wk(X,classfication_result)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 通过循环，计算每一个参照数据集下的各簇Wk值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(B):</span><br><span class="line">            Xb = rands[i,:,:]</span><br><span class="line">            k_means.fit(Xb)</span><br><span class="line">            classfication_result_b = k_means.labels_</span><br><span class="line">            Wkbs[idxk,i] = compute_Wk(Xb,classfication_result_b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算gaps、sd_ks、sk和gapDiff</span></span><br><span class="line">    gaps = (np.log(Wkbs)).mean(axis = <span class="number">1</span>) - np.log(Wks)        </span><br><span class="line">    sd_ks = np.std(np.log(Wkbs), axis=<span class="number">1</span>)</span><br><span class="line">    sk = sd_ks*np.sqrt(<span class="number">1</span>+<span class="number">1.0</span>/B)</span><br><span class="line">    <span class="comment"># 用于判别最佳k的标准，当gapDiff首次为正时，对应的k即为目标值</span></span><br><span class="line">    gapDiff = gaps[:<span class="number">-1</span>] - gaps[<span class="number">1</span>:] + sk[<span class="number">1</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 中文和负号的正常显示</span></span><br><span class="line">    plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">    plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 设置绘图风格</span></span><br><span class="line">    plt.style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">    <span class="comment"># 绘制gapDiff的条形图</span></span><br><span class="line">    plt.bar(np.arange(len(gapDiff))+<span class="number">1</span>, gapDiff, color = <span class="string">'steelblue'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'簇的个数'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'k的选择标准'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 自定义函数的调用</span></span><br><span class="line">gap_statistic(X)</span><br></pre></td></tr></table></figure><hr><p>​        上述三种方法判断合理的k值方法为：</p><p>​        <code>拐点法</code>：找到斜率变化最大的那个k；</p><p>​        <code>轮廓系数法</code>：找到曲线最高、最接近1的k；</p><p>​        <code>间隔统计量法</code>：找到gapdiff首次出现正值的k。</p><h3 id="Kmeans聚类的注意点"><a href="#Kmeans聚类的注意点" class="headerlink" title="Kmeans聚类的注意点"></a>Kmeans聚类的注意点</h3><p>​        在做Kmeans聚类时<strong>注意</strong>：</p><p>​        1）聚类前必须指定具体的簇数k值；</p><p>​        2）对原始数据集做必要的标准化处理，如果原始数据集在量纲上存在差异，就必须标准化，否则不需要；</p><p>​        3）如果数据集中有离散型的字符型变量，需要对该变量做预处理，比如设置哑变量或转换成数值化的因子。</p><p>​        可以借助<code>seaborn</code>的<code>lmplot</code>方法绘制聚类效果的散点图；为了直观对比k个簇内样本之间的差异，可以使用雷达图对各个维度的信息进行展现。雷达图的绘制需要<code>pygal</code>模块，调用<code>Radar</code>类。</p><h3 id="手动实现Kmeans聚类算法"><a href="#手动实现Kmeans聚类算法" class="headerlink" title="手动实现Kmeans聚类算法"></a>手动实现Kmeans聚类算法</h3><h4 id="构建距离计算函数"><a href="#构建距离计算函数" class="headerlink" title="构建距离计算函数"></a>构建距离计算函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#样本点和簇中心的距离计算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEclud</span><span class="params">(arrA,arrB)</span>:</span></span><br><span class="line">    dist=np.sum(np.power(arrA-arrB,<span class="number">2</span>),axis=<span class="number">1</span>)<span class="comment">#这里用平方和代替距离，简化计算</span></span><br><span class="line">    <span class="keyword">return</span> dist</span><br></pre></td></tr></table></figure><h4 id="随机初始簇心"><a href="#随机初始簇心" class="headerlink" title="随机初始簇心"></a>随机初始簇心</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成随机簇中心</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randCent</span><span class="params">(dataSet,k)</span>:</span></span><br><span class="line">    n=dataSet.shape[<span class="number">1</span>]<span class="comment">#获取数据集的特征数</span></span><br><span class="line">    data_min=dataSet.iloc[:,:].min()<span class="comment">#获取每一列特征的最小值</span></span><br><span class="line">    data_max=dataSer.iloc[:,:].max()<span class="comment">#获取每一列特征的最大值</span></span><br><span class="line">    data_cent=np.random.uniform(data_min,data_max,(k,n))<span class="comment">#生成取值范围内的随机数，k行n列，即初始簇中心</span></span><br><span class="line">    <span class="keyword">return</span> data_cent</span><br></pre></td></tr></table></figure><h4 id="Kmeans聚类算法"><a href="#Kmeans聚类算法" class="headerlink" title="Kmeans聚类算法"></a>Kmeans聚类算法</h4><p>​        在执行Kmeans聚类算法时，需要不断地迭代质心，因此需要两个可迭代容器来完成该目标。</p><p>​        第一个容器用于存放和更新质心，该容器可考虑使用list来执行，list不仅是可迭代对象，同时list内不同元素索引位置也可用于标记和区分各质心，即各簇的编号；</p><p>​        第二个容器则需要记录、保存和更新各点到质心之间的距离，并能够方便对其进行比较，该容器由有3列的数组来执行。</p><p>​            <strong>第一列用于存放最近一次计算完成后某点到各质心的最短距离；</strong></p><p>​            <strong>第二列用于计算完成后根据最短距离得到的代表对应质心的数值索引，即所属簇，即质心的编号；</strong></p><p>​            <strong>第三列用于存放上一次对应的质心编号；</strong></p><p>​        后两列用于比较质心发生变化后某点所属簇的情况是否发生变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Kmeans聚类算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KMeans</span><span class="params">(dataSet,k,distMeas=distEclud,createCent=randCent)</span>:</span></span><br><span class="line">    m,n=dataSet.shape</span><br><span class="line">    centroids=createCent(dataSet,k)<span class="comment">#生成k个质心</span></span><br><span class="line">    clusterAssment=np.zeros((m,<span class="number">3</span>))<span class="comment">#容器2</span></span><br><span class="line">    clusterAssment[:,<span class="number">0</span>]=np.inf<span class="comment">#存放无穷大值</span></span><br><span class="line">    clusterAssment[:,<span class="number">1</span>:<span class="number">3</span>]=<span class="number">-1</span><span class="comment">#存放-1作为初始值</span></span><br><span class="line">    <span class="comment">#连接原始数据集和容器2</span></span><br><span class="line">    result_set=pd.concat([dataSet,pd.DataFrame(clusterAssment)],axis=<span class="number">1</span>,ignore_index=<span class="literal">True</span>)</span><br><span class="line">    clusterChanged=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> clusterChanged:</span><br><span class="line">        clusterChanged=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            dist=distMeas(dataSet.iloc[i,:].values,centroids)<span class="comment">#计算样本点与所有初始质心的距离</span></span><br><span class="line">            result_set.iloc[i,n]=dist.min()<span class="comment">#获取与所有质心的距离中最小的一个</span></span><br><span class="line">            <span class="comment">#获取最小距离的索引,其实此时的索引就是特征索引值</span></span><br><span class="line">            result_set.iloc[i,n+<span class="number">1</span>]=np.where(dist==dist.min())[<span class="number">0</span>]</span><br><span class="line">         <span class="comment">#只有当所有质心都与上次相同</span></span><br><span class="line">        clusterChanged=<span class="keyword">not</span> (result_set.iloc[:,<span class="number">-1</span>]==result_set.iloc[:,<span class="number">-2</span>]).all()</span><br><span class="line">        <span class="keyword">if</span> clusterChanged:</span><br><span class="line">            cent_df=result_set.grouby(n+<span class="number">1</span>).mean()<span class="comment">#各个簇分组统计均值</span></span><br><span class="line">            centroids=cen_df.iloc[:,:n].values<span class="comment">#用簇中所有点的均值作为质心</span></span><br><span class="line">            result_set.iloc[:,<span class="number">-1</span>]=result_set.iloc[:,<span class="number">-2</span>]<span class="comment">#将索引更新</span></span><br><span class="line">    <span class="keyword">return</span> centroids,result_set</span><br></pre></td></tr></table></figure><p>​        在聚类结束之后，可以查看最后一列查看分类情况，如：<code>result.iloc[:,-1].value_counts()</code>。</p><p>​        </p><h4 id="误差平方和"><a href="#误差平方和" class="headerlink" title="误差平方和"></a>误差平方和</h4><p>​        误差平方和（SSE）是聚类算法模型最重要评估指标。</p><p>​        对于聚类算法而言，误差平方和仍然有一定的局限性，主要体现在以下几点：</p><ul><li><p>对于任意数据集而言，聚类误差平方和和质心数量高度相关，随着质心增加，误差平方和将逐渐下降；</p></li><li><p>误差平方和还与数据集本身数据量大小、量纲大小、数据维度高度相关，数据量越大、量纲越大、维度越高则在相同质心数量情况下误差平方和也将更大。</p></li></ul><p>​        增加簇的个数肯定可以降低SSE值，但这违背了聚类的目标，即在保持簇的数据不变的情况下，提高簇的质量。</p><p>​        因此，模型误差平方和没有绝对意义，比较不同数据集聚类结果的误差平方和没有任何意义，误差平方和在聚类分析中主要作用有以下两点：</p><ul><li><p>确定模型最优化目标，结合距离计算方法进而推导质心选取方法；</p></li><li><p>对于确定数据集可绘制横轴为质心数量、纵轴为误差平方和的曲线，可以判断，曲线整体将呈现下降趋势，其实就是上面所说的”拐点法”。</p></li></ul><p>​        </p><h4 id="使用后处理来提高聚类性能"><a href="#使用后处理来提高聚类性能" class="headerlink" title="使用后处理来提高聚类性能"></a>使用后处理来提高聚类性能</h4><p>​        对生成的簇进行后处理，一种方法是将最大的SSE值的簇划分为两个簇。具体实现时可以将最大簇包含的点过滤出来并在这些点上运行Kmeans聚类算法，k设为2。</p><p>​        由于为了保持簇的总数不变，上面拆分变成两个簇，就需要将某两个簇合并成一个簇，有两种可以量化的方法：合并最近的质心，或者合并两个是的SSE增幅最小的质心。</p><ol><li>通过计算所有质心之间的距离，然后合并距离最近的两个点来实现。</li><li>合并两个簇然后计算总的SSE值。</li></ol><p>​        必须在所有可能的两个簇上重复上述处理的过程，直到找到合并最佳的两个簇为止。这就是后面即将提到的“二分 Kmeans算法”。</p><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>​        随机初始质心对最终的聚类结果是有影响的，所以尽量降低初始化质心的随机性对最后聚类结果造成影响，方案有以下几种：</p><p>​        1）在初始化质心随机生成的过程中，尽可能的让质心更加分散</p><p>​            这点其实在利用<code>np.random.random</code>进行[0,1)区间取均匀分布抽样而不是进行随机抽样。</p><p>​        2）人工制定初始质心</p><p>​            即在观察数据集分布情况后，手工设置初始质心，此举也能降低随机性影响。</p><p>​        3）增量的更新质心</p><p>​            </p><h3 id="二分Kmeans算法"><a href="#二分Kmeans算法" class="headerlink" title="二分Kmeans算法"></a>二分Kmeans算法</h3><p>​        为克服Kmeans算法收敛于局部最小值的问题，提出二分Kmeans算法，该算法的思路是，首先将所有点看作一个簇，然后一分为二。之后选择其中一个簇继续进行划分，选择哪一个簇进行划分取决于对其划分是否可以最大程度降低SSE值，直到得到用户指定的簇数目为止。</p><p>​        另一种做法是选择SSE最大的簇进行划分，直到簇数据达到k为止。</p><p>​                        </p><p>​                    </p><h3 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h3><p>​        （1）<a href="https://www.cnblogs.com/mfryf/p/9007524.html" target="_blank" rel="noopener">机器学习sklearn19.0聚类算法——Kmeans算法</a></p><p>​        （2）从零开始学Python数据分析与挖掘</p><p>​        （3）机器学习实战</p><p>​        （4）<a href="https://www.bilibili.com/video/av39246256" target="_blank" rel="noopener">菊安酱的机器学习  第9期 Kmeans聚类</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        聚类算法是一种典型的无监督算法，目的是依据已知数据，将相似度高的样本集中到各自的簇中。&lt;/p&gt;
&lt;p&gt;​        聚类算法可以实现数据分割，异常点的监控。所谓的异常点就是远离簇的样本，而这些样本可能就是某些场景下的关注点。&lt;/p&gt;
&lt;p&gt;​        聚类算法种类有：Kmeans聚类、K中心聚类、谱系聚类、EM聚类算法、基于密度的聚类和基于网格的聚类等。&lt;/p&gt;
&lt;p&gt;​        本文主要是Kmeans聚类，该算法利用距离远近的思想将目标数据聚为指定的k个簇，簇内样本越相似，表明聚类效果越好。簇中心点由各簇样本均值计算得到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://ligang-chn.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://ligang-chn.github.io/tags/Python/"/>
    
      <category term="聚类" scheme="https://ligang-chn.github.io/tags/%E8%81%9A%E7%B1%BB/"/>
    
      <category term="KMeans" scheme="https://ligang-chn.github.io/tags/KMeans/"/>
    
  </entry>
  
  <entry>
    <title>弄清相对路径</title>
    <link href="https://ligang-chn.github.io/2019/10/02/%E5%BC%84%E6%B8%85%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    <id>https://ligang-chn.github.io/2019/10/02/弄清相对路径/</id>
    <published>2019-10-02T02:40:52.000Z</published>
    <updated>2019-10-02T03:27:49.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><p>​        一般我们在进行数据挖掘之前，需要先将数据集从文件中读取到例如pandas的DataFrame数据框中，那么需要指定路径。所以理清一下路径表示的问题。</p><p>​        路径表示分为<code>绝对路径</code>和<code>相对路径</code>。</p><a id="more"></a><p>​        <code>绝对路径</code>：即文件在本地磁盘上的真正路径；</p><p>​        <code>相对路径</code>：即相对于当前文件的路径。通俗点说，就是你要读取文件的位置相对于正在执行的程序文件所处位置的路径。</p><p>​        比较而言，绝对路径毫无灵活性，在不同计算机上执行程序就必须重新指定路径；相对路径只需要将文件放在相应的位置，程序不需要修改就能执行。【注意：由于系统的原因，可能有“/”和“\”的区别，所以一般加上<code>r</code>即可。】</p><p>​        </p><h3 id="相对路径-和-的区别"><a href="#相对路径-和-的区别" class="headerlink" title="相对路径./和../的区别"></a>相对路径./和../的区别</h3><p>​        <code>./</code>：表示目前所在路径；</p><p>​        <code>../</code>：表示上一层路径；</p><p>​        <code>/</code>：代码根目录。</p><p>​        <strong>举个栗子</strong>：</p><p>​        下面这段代码是要读取一个数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris=pd.read_csv(<span class="string">'./datas/iris.csv'</span>)</span><br></pre></td></tr></table></figure><p>​        这里的程序执行文件是<code>Kmeans.ipynb</code>，数据在<code>datas</code>文件夹中；</p><p><img src="githubBlog_Back_Upsource/1569985314016.png" alt="1569985314016"></p><p>​        因为此时程序文件<code>Kmeans.ipynb</code>和<code>datas</code>文件夹是同级的，所以就是在当前路径下索引即可。</p><p>​        如果说<code>datas</code>文件夹在上一级文件，那么就需要使用<code>../</code>。</p><p>​        <strong>相当于以<code>Kmeans.ipynb</code>文件为基点，跳到要找的文件，如果需要返回上级文件夹，就需要使用一次<code>../</code>；否则用<code>./</code>就可以了。</strong></p><hr><p>​        如果还不是很明白，可以看看下面的两篇博客，比较容易理解。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>​        <a href="https://blog.csdn.net/chao_1083934282/article/details/88353861" target="_blank" rel="noopener">秒懂文件路径/ 和 ./ 和 ../ 和 ../../</a></p><p>​        <a href="https://blog.csdn.net/qq_34769573/article/details/80445681" target="_blank" rel="noopener">相对路径./与../区别</a></p><hr><p>​        如有疑问或文中有不妥之处，可以留言交流！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;路径问题&quot;&gt;&lt;a href=&quot;#路径问题&quot; class=&quot;headerlink&quot; title=&quot;路径问题&quot;&gt;&lt;/a&gt;路径问题&lt;/h3&gt;&lt;p&gt;​        一般我们在进行数据挖掘之前，需要先将数据集从文件中读取到例如pandas的DataFrame数据框中，那么需要指定路径。所以理清一下路径表示的问题。&lt;/p&gt;
&lt;p&gt;​        路径表示分为&lt;code&gt;绝对路径&lt;/code&gt;和&lt;code&gt;相对路径&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="细节" scheme="https://ligang-chn.github.io/categories/%E7%BB%86%E8%8A%82/"/>
    
    
      <category term="路径" scheme="https://ligang-chn.github.io/tags/%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>70周年</title>
    <link href="https://ligang-chn.github.io/2019/10/01/70%E5%91%A8%E5%B9%B4/"/>
    <id>https://ligang-chn.github.io/2019/10/01/70周年/</id>
    <published>2019-10-01T03:05:31.000Z</published>
    <updated>2019-10-01T05:57:17.001Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/ligang-chn/Blog_Back_Up/master/source/70.png" width="100%"></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ligang-chn/Blog_Back_Up/master/source/70.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归</title>
    <link href="https://ligang-chn.github.io/2019/09/30/LineRegression/"/>
    <id>https://ligang-chn.github.io/2019/09/30/LineRegression/</id>
    <published>2019-09-30T14:16:23.000Z</published>
    <updated>2020-01-08T06:50:01.833Z</updated>
    
    <content type="html"><![CDATA[<p>​        线性回归——一种有监督的学习算法，即在建模过程中必须同时具备自变量x和因变量y。更为概括地说，线性模型就是对输入特征加权求和，再加上一个我们称为偏置项的常数。</p><a id="more"></a><p>​        <strong>两种不同的训练模型的方法</strong>：</p><ul><li>通过“闭式”方程——直接计算出最适合训练集的模型参数（也就是使训练集上的成本函数最小化的模型参数）。</li><li>使用迭代优化的方法，即梯度下降法（GD）。逐渐调整模型参数直至训练集上的成本函数调至最低。包括梯度下降的几种变体：批量梯度下降、小批量梯度下降、随机梯度下降。</li></ul><p>​        </p><h4 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>​        又称为简单线性回归模型，是指模型中只有一个自变量和一个因变量，给模型的数学表达式可以表示成：</p><script type="math/tex; mode=display">y=ax+b+\xi</script><p>​        类似于一次函数，其中$\xi$为模型的误差，$a$和$b$统称为回归系数。<strong>误差项$\xi$的存在主要是为了平衡等号两边的值</strong>，通常被称为模型无法解释的部分。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20190913141802837.png?80" alt></p><h5 id="确定目标函数"><a href="#确定目标函数" class="headerlink" title="确定目标函数"></a>确定目标函数</h5><p>​        我们希望预测值和实际值的差距尽量小，那么如何表示该差距呢？</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913141833519.png"></div><p>​        由于误差项$\xi$是y与ax+b的差，结果可能是正值或负值，因此误差项$\xi$达到最小的问题需转换为误差平方和最小的问题（<strong>最小二乘法的思路</strong>）。</p><script type="math/tex; mode=display">J(a,b)=\sum^{n} _{i=1} {\xi^2}=\sum^{n}_{i=1}{(y_i-ax_i-b)^2}</script><p>​        上面的函数可以称为<code>损失函数（loss function)</code>或<code>效用函数（utility function）</code>。通过分析问题，确定问题的损失函数或者效用函数；通过最优化损失函数或者效用函数，获得机器学习的模型。</p><p>​        求解误差项最小就是求解$J(a,b)$的最小值。该目标函数其实就是一个二元二次函数，可以使用偏导数的方法求解出a和b，进而得到目标函数的最小值。（这里可能你会有疑问：为什么求出a和b，就能得到目标函数的最小值？——这是因为这里我们已知x和y，自变量其实是a和b，J是因变量，所以要求J的最小值，自然需要对a和b求偏导。对于损失函数、代价函数、目标函数的理解参见博客：<a href="https://www.cnblogs.com/geaozhang/p/11442343.html#commentform" target="_blank" rel="noopener">理解代价函数</a>）<br>推到过程如下图：</p><p><img src="LineRegression.assets/20190913141935781.png?40" alt></p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913141935781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_9,color_FFFFFF,t_70" width="20%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142114758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142126409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142151545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142203519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><blockquote><p>Python计算得到模型的回归参数，有第三方模块statsmodels，它是专门用于统计建模的第三方模块，可以调用子模块中的ols函数计算a和b。</p></blockquote><p>​        </p><h5 id="简单线性回归的实现"><a href="#简单线性回归的实现" class="headerlink" title="简单线性回归的实现"></a>简单线性回归的实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleLinearRegression1</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化Simple Linear Regression 模型"""</span></span><br><span class="line">        self.a_=<span class="literal">None</span></span><br><span class="line">        self.b_=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self,x_train,y_train)</span>:</span></span><br><span class="line">        <span class="string">"""根据训练数据集x_train,y_train训练Simple Linear Regression 模型"""</span></span><br><span class="line">        <span class="keyword">assert</span> x_train.ndim==<span class="number">1</span>,\</span><br><span class="line">        <span class="string">"Simple Linear Regressor can only solve single feature training data"</span></span><br><span class="line">        <span class="keyword">assert</span> len(x_train)==len(y_train),\</span><br><span class="line">        <span class="string">"the size of x_train must be equal to the size of y_train"</span></span><br><span class="line"></span><br><span class="line">        x_mean=np.mean(x_train)<span class="comment">#计算均值</span></span><br><span class="line">        y_mean=np.mean(y_train)<span class="comment">#计算均值</span></span><br><span class="line"></span><br><span class="line">        num=<span class="number">0.0</span></span><br><span class="line">        d=<span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> x_i,y_i <span class="keyword">in</span> zip(x_train,y_train):</span><br><span class="line">            num+=(x_i-x_mean)*(y_i-y_mean)<span class="comment">#计算a的分子</span></span><br><span class="line">            d+=(x_i-x_mean)**<span class="number">2</span><span class="comment">#计算a的分母</span></span><br><span class="line"></span><br><span class="line">        self.a_=num/d<span class="comment">#得到a</span></span><br><span class="line">        self.b_=y_mean-self.a_*x_mean<span class="comment">#得到b</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self,x_predict)</span>:</span></span><br><span class="line">        <span class="string">"""给定待预测数据集x_predict,返回表示x_predict的结果向量"""</span></span><br><span class="line">        <span class="keyword">assert</span> x_predict.ndim==<span class="number">1</span>,\</span><br><span class="line">        <span class="string">"Simple Linear Regressor can only solve single feature training data"</span></span><br><span class="line">        <span class="keyword">assert</span> self.a_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.b_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>,\</span><br><span class="line">        <span class="string">"must fit before predict!"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> np.array([self._predict(x) <span class="keyword">for</span> x <span class="keyword">in</span> x_predict])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_predict</span><span class="params">(self,x_signle)</span>:</span></span><br><span class="line">        <span class="string">"""给定单个待预测数据x_signle,返回x_signle的预测结果值"""</span></span><br><span class="line">        <span class="keyword">return</span> self.a_*x_signle+self.b_<span class="comment">#根据上面计算的a和b，构建线性模型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SimpleLinearRegression1()"</span></span><br></pre></td></tr></table></figure><h5 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h5><p>​        从上面的简单线性回归实现中，我们可以看到，对于回归系数的计算，我们是通过for循环+数学公式计算得到的，在这里我再次贴出那段实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for循环计算</span></span><br><span class="line"><span class="keyword">for</span> x_i,y_i <span class="keyword">in</span> zip(x_train,y_train):</span><br><span class="line">    num+=(x_i-x_mean)*(y_i-y_mean)<span class="comment">#计算a的分子</span></span><br><span class="line">    d+=(x_i-x_mean)**<span class="number">2</span><span class="comment">#计算a的分母</span></span><br></pre></td></tr></table></figure><p>​        如果数据量比较大，那么这个过程是很缓慢的，所以需要优化。</p><p>​        首先，从数学表达式上来看，</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142312680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><p>​        a的分子和分母都可以用下面的向量的点乘表示。向量的运算速度高于for循环。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142332988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div>​        通过numpy的向量运算可以提高性能。那么我们将上面的for循环的代码修改一下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num=(x_i-x_mean).dot(y_i-y_mean)</span><br><span class="line">d=(x_i-x_mean).dot(x_i-x_mean)</span><br></pre></td></tr></table></figure>####  多元线性回归#####  定义​        上面讨论的是一元线性回归模型，相对来说比较简单。实际上，我们的数据集的属性（即自变量）不止一个。对于含有多个属性的数据构建线性回归模型就是多元线性回归模型。如下图：<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142354427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div>​        从上图可以看出，X是一组向量，具有多个特征。​        **线性回归模型预测**：$$\hat y^{(i)}=\theta_0+\theta_1X_1^{(1)}+\theta_2X_2^{(2)}+…\theta_nX_n^{(n)}$$​        **线性回归模型预测（向量化）**：$$\hat y=X_b\cdot {\theta}$$​        ##### 目标函数​        对于多元线性回归模型，目标函数和一元线性回归模型基本一致：<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142417725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142430433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        上面我们添加X_0参数，使其恒等于1，这样我们就可以使用向量的方式表示预测模型了。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142451839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%"></div><p>​        所以，目标函数的求解变成了：</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913142506369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%"></div><p>​        闭式解法——就是一个直接得出结果的数学方程（即多元线性回归的正规方程解）：</p><script type="math/tex; mode=display">\theta =(X_b^TX_b)^{-1}X_b^Ty</script><p>​        求解出来的$\theta$如下：</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913143759539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><h5 id="多元线性回归的实现"><a href="#多元线性回归的实现" class="headerlink" title="多元线性回归的实现"></a>多元线性回归的实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#from .metrics import r2_score</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""""初始化Linear Regression模型"""</span></span><br><span class="line">        self.coef_=<span class="literal">None</span></span><br><span class="line">        self.interception_=<span class="literal">None</span></span><br><span class="line">        self._theta=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit_normal</span><span class="params">(self,X_train,y_train)</span>:</span></span><br><span class="line">        <span class="string">""""根据训练数据集X_train,y_train训练Linear Regression模型"""</span></span><br><span class="line">        <span class="keyword">assert</span> X_train.shape[<span class="number">0</span>]==y_train.shape[<span class="number">0</span>],\</span><br><span class="line">            <span class="string">"the size of X_train must be equal to the size of y_train"</span></span><br><span class="line"></span><br><span class="line">        X_b=np.hstack([np.ones((len(X_train),<span class="number">1</span>)),X_train])</span><br><span class="line">        self._theta=np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y_train)</span><br><span class="line"></span><br><span class="line">        self.interception_=self._theta[<span class="number">0</span>]</span><br><span class="line">        self.coef_=self._theta[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self,X_predict)</span>:</span></span><br><span class="line">        <span class="string">"""给定待预测数据集X_predict，返回表示X——predict的结果向量"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.interception_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.coef_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>,\</span><br><span class="line">            <span class="string">"must fit before predict!"</span></span><br><span class="line">        <span class="keyword">assert</span>  X_predict.shape[<span class="number">1</span>]==len(self.coef_),\</span><br><span class="line">            <span class="string">"the feature number of X_predict must be equal to X_train"</span></span><br><span class="line"></span><br><span class="line">        X_b = np.hstack([np.ones((len(X_predict), <span class="number">1</span>)), X_predict])</span><br><span class="line">        <span class="keyword">return</span> X_b.dot(self._theta)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,X_test,y_test)</span>:</span></span><br><span class="line">        <span class="string">"""根据测试数据集X_test和y_test确定当前模型的准确度"""</span></span><br><span class="line"></span><br><span class="line">        y_predict=self.predict(X_test)</span><br><span class="line">        <span class="comment">#return r2_score(y_test,y_predict)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LinearRegression()"</span></span><br></pre></td></tr></table></figure><h5 id="计算复杂度"><a href="#计算复杂度" class="headerlink" title="计算复杂度"></a>计算复杂度</h5><p>​        标准方程求逆的矩阵$X^T\cdot X$，是一个$n*n$的矩阵（n是特征数量）。对这种矩阵求逆的计算复杂度通常为$O(n^{2.4})到O(n^{3})$之间（取决于实现）。因此当特征数量特别大时，标准方程的计算是很缓慢的。好的一面，线性模型一经训练完成，预测就非常迅速。</p><h4 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>​        其实可以用线性模型拟合<strong>非线性数据</strong>。一个简单的方法就是将每个特征的幂次方添加为一个新特征，然后在这个拓展过的特征集上训练线性模型。这种方法被称为<strong>多项式回归</strong>。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913143847432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><p>​        将$X^2$和$X$分别看作两个特征，那么这个多项式回归依然可以看成线性回归。只不过对于x来说，是一个2次方程。</p><p>​        【注意】：当存在多个特征时，多项式回归能够发现特征和特征之间的关系（纯线性模型做不到这一点）。这是因为PolynomialFeatures会在给定的多项式阶数下，<strong>添加所有特征组合</strong>。如下：</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913143904702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div>​        要小心特征组合的数量爆炸！！！#####  验证数据集与交叉验证<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913143918265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>​        测试数据集不参与模型的创建。​        仍然存在一个问题：**随机**？​        由于我们的验证数据集都是随机的从数据集中切出来的，那么训练出来的模型可能对于这份验证数据集过拟合，但是我们只有这一份数据集，一旦这个数据集中相应的有比较极端的数据，就可能导致这个模型不准确。于是就有了**交叉验证**。<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913143936274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913143953799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144005942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><h5 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h5><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144025319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>​        我们由已知的训练数据得到的曲线，在面对新的数据的能力非常弱，即**泛化能力差**。例如，我们在训练数据集上模型的准确率很好，但是在测试数据集上模型准确率却很差。<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144041506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>​        因此，我们需要寻找泛化能力最好的地方。​    ​        使用交叉验证来评估模型的泛化性能，如果模型在训练集上表现良好，但是交叉验证的泛化表现非常糟糕，那么模型就是**过拟合**。如果在二者上的表现都不佳，那就是**欠拟合**。这就是判读模型太简单还是太复杂的一种方法。如下图：分别是欠拟合和过拟合。<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144056722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144106164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%"></div><p>​        高阶多项式回归模型就可能过度拟合训练数据，而线性模型则是拟合不足。</p><h5 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h5><p>​        另外一种方法是观察学习曲线：这个曲线绘制的是模型在训练集和验证集上，关于”训练集大小“的性能函数。要生成这个曲线，只要在不同大小的训练子集上多次训练模型即可。随着训练样本的逐渐增多，算法训练出的模型的表现能力的变化。</p><p>​        </p><h4 id="偏差方差权衡"><a href="#偏差方差权衡" class="headerlink" title="偏差方差权衡"></a>偏差方差权衡</h4><script type="math/tex; mode=display">模型误差=偏差+方差+不可避免的误差</script><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144127783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><p>​        偏差——原因在于错误的假设。比如假设数据是线性的，而实际上是二次的。高偏差模型最有可能对训练数据拟合不足。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144142892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>​        方差——原因在于模型对于训练数据的微小变化过度敏感。具有高自由度的模型很可能有高方差，所以很容易对训练数据过拟合。<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144155791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        不可避免的误差——因为数据本身的噪声。清理数据，减少这部分误差。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144222271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144234155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144244242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div><h4 id="正则线性模型"><a href="#正则线性模型" class="headerlink" title="正则线性模型"></a>正则线性模型</h4><p>​        减少过拟合的一个好办法就是<strong>对模型正则化</strong>：它拥有的自由度越低，就越不容易过度拟合数据。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/2019091314430022.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​<br>前面根据线性回归模型的参数估计公式：$\theta=(X^TX)^{-1}X^Ty$可知，得到$\theta$的前提是矩阵$X^TX$可逆。但在实际应用中，可能会出现<strong>自变量个数多于样本量</strong>（即，矩阵不是n*n的，而是n*m的）或自变量存在<strong>多重共线性</strong>（比如列方向上存在某一列是另外一列的倍数）的情况，此时无法根据公式计算回归系数的估计值$\theta$。为解决这类问题，基于线性回归模型的另外两种扩展的回归模型，分别是<strong>岭回归</strong>和<strong>LASSO回归</strong>。</p><h5 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h5><p>​        岭回归是线性回归的正则化版：在成本函数中添加一个等于$a\sum_{i=1}^{n}\theta_i^2$的正则项。</p><p>​        【注意】：正则项只能在<strong>训练</strong>的时候添加到成本函数中，一旦训练完成，你需要使用<strong>未正则化的性能指标</strong>来评估模型性能。</p><p>​        训练阶段使用的成本函数与测试时使用的成本函数不同是非常常见的现象。除了正则化以外，还有一个导致这种不同的原因是，训练时的成本函数通常都可以使用优化过的衍生函数，而测试用的性能指标需要尽可能接近最终目标。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144314473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>也就是，$$J(\theta)=\sum_{i=1}^n (y-X_b\theta)^2+\alpha \frac{1}{2}\sum_{i=1}^n\theta^2$$为求解目标函数$J(\theta)$的最小值，需要对其求导，并令导函数为0。这里不再推导，只说一下大致步骤：1）根据线性代数知识，展开目标函数中的平方项；2）对展开的目标函数求导；3）令导数为0，计算回归系数$\theta$。求得结果：$$\theta=(X_b^TX_b+\alpha \frac{1}{2}E)^{-1}X_b^Ty$$这里可以看出来，和之前没有正则项的回归系数相比，仅仅多了正则项的系数。$\alpha$是L2正则项平方的系数，用来平衡模型的方差（回归系数的方差）和偏差（真实值和预测值之间的差异）。对于岭回归来说，随着$\alpha$的增大，模型方差会减小而偏差会增大。>在执行岭回归之前，必须对数据进行缩放，因为它对输入特征的大小非常敏感。#####  LASSO回归​        与岭回归一样，它也是向成本函数添加一个正则项，但是它增加的是权重向量的L1范数，而不是L2范数的平方的一半。<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144439445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>​        LASSO回归的一个重要特点是它倾向于完全消除掉最不重要特征的权重（也就是将它们设置为0）。换句话说，LASSO回归会自动执行特征选择并输出一个稀疏模型（即只有很少的特征有非零权重）。<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144451848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><h5 id="弹性网络"><a href="#弹性网络" class="headerlink" title="弹性网络"></a>弹性网络</h5><p>​        弹性网络是岭回归与LASSO回归之间的中间地带。其正则项就是岭回归和LASSO回归的正则项的混合，混合比例通过r来控制。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144505887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><h5 id="L1正则，L2正则"><a href="#L1正则，L2正则" class="headerlink" title="L1正则，L2正则"></a>L1正则，L2正则</h5><div align="center">     <img src="https://img-blog.csdnimg.cn/2019091314451888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>​        前面我们求解目标函数都是通过”闭式“方程解，第二种方法是使用优化迭代的方法，即梯度下降。</p><p>​        梯度下降是一种通用的优化算法，其核心思想就是<strong>迭代调整参数，从而使成本函数最小化</strong>。</p><p>​        梯度就是<strong>分别对每个变量进行微分</strong>，然后用逗号分隔开，梯度是用&lt;&gt;包括起来的，说明梯度其实是一个<strong>向量</strong>。</p><script type="math/tex; mode=display">J(\Theta)=0.55-(5\theta_1+2\theta_2+12\theta_3)</script><script type="math/tex; mode=display">\nabla J(\Theta)=<\frac {\partial J } {\partial \theta_1 },\frac {\partial J } {\partial \theta_2 },\frac {\partial J } {\partial \theta_3 }>=<-5,-2,12></script><p>​        <strong>梯度的意义</strong>：</p><ul><li><p>在单变量的函数中，梯度其实就是函数的微分，代表函数在某个给定点的切线的斜率；</p></li><li><p>在多变量函数中，梯度就是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向。</p></li></ul><p>​        <strong>梯度下降法</strong>，是一种基于搜索的最优化方法；（不是一个机器学习算法）</p><p>​        <strong>作用</strong>：最小化一个损失函数；</p><p>​        <strong>梯度上升法</strong>：最大化一个效用函数。</p><p>​        导数可以代表方向，对应J增大的方向。</p><script type="math/tex; mode=display">-\eta \frac{dJ}{d\theta}</script><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144606596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div>​        并不是所有函数都有唯一的极值点；​        **解决方案**：- 多次运行，随机化初始点；- 梯度下降法的初始点也是一个超参数。##### 模拟实现梯度下降法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(initial_theta,eta,epsilon=<span class="number">1e-8</span>)</span>:</span></span><br><span class="line">    theta=initial_theta</span><br><span class="line">    theta_history.append(initial_theta)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gradient=dJ(theta)</span><br><span class="line">        last_theta=theta</span><br><span class="line">        theta=theta-eta*gradient</span><br><span class="line">        theta_history.append(theta)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(abs(J(theta)-J(last_theta))&lt;epsilon):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_theta_history</span><span class="params">()</span>:</span></span><br><span class="line">    plt.plot(plot_x,J(plot_x))</span><br><span class="line">    plt.plot(np.array(theta_history),J(np.array(theta_history)),<span class="string">'ro-'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">eta=<span class="number">0.9</span></span><br><span class="line">theta_history=[]</span><br><span class="line">gradient_descent(<span class="number">0.</span>,eta)</span><br><span class="line">plot_theta_history()</span><br></pre></td></tr></table></figure><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144622730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><h5 id="线性回归中使用梯度下降法"><a href="#线性回归中使用梯度下降法" class="headerlink" title="线性回归中使用梯度下降法"></a>线性回归中使用梯度下降法</h5><p>​        应用梯度下降法，需要保证所有特征值的大小比例都差不多，否则收敛时间会长很多。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144643825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        在线性回归中，我们需要求解目标函数最小，现在使用梯度下降法试试：</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144656119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div>​        求解梯度：<div align="center">     <img src="https://img-blog.csdnimg.cn/2019091314470669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%"></div><p>​        <strong>实现梯度下降法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_gd</span><span class="params">(self,X_train,y_train,eta=<span class="number">0.01</span>,n_iters=<span class="number">1e4</span>)</span>:</span></span><br><span class="line">    <span class="string">"""根据训练数据集X_train,y_train,使用梯度下降法训练Linear Regression模型"""</span></span><br><span class="line">    <span class="keyword">assert</span> X_train.shape[<span class="number">0</span>]==y_train.shape[<span class="number">0</span>],\</span><br><span class="line">        <span class="string">"the size of X_train must be euqal to the size of y_train"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">J</span><span class="params">(theta,X_b,y)</span>:</span><span class="comment">#目标函数</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> np.sum((y - X_b.dot(theta)) ** <span class="number">2</span>) / len(X_b)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dJ</span><span class="params">(theta, X_b, y)</span>:</span><span class="comment">#求解偏导数</span></span><br><span class="line">        res = np.empty(len(theta))</span><br><span class="line">        res[<span class="number">0</span>] = np.sum(X_b.dot(theta) - y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(theta)):</span><br><span class="line">            res[i] = (X_b.dot(theta) - y).dot(X_b[:, i])</span><br><span class="line">        <span class="keyword">return</span> res * <span class="number">2</span> / len(X_b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(X_b, y, initial_theta, eta, n_iters=<span class="number">1e4</span>, epsilon=<span class="number">1e-8</span>)</span>:</span></span><br><span class="line">        theta = initial_theta</span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            gradient = dJ(theta, X_b, y)</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * gradient</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (abs(J(theta, X_b, y) - J(last_theta, X_b, y)) &lt; epsilon):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line">    X_b = np.hstack([np.ones((len(X_train), <span class="number">1</span>)), X_train])</span><br><span class="line">    initial_theta = np.zeros(X_b.shape[<span class="number">1</span>])  <span class="comment"># theta向量的行数=X_b向量的列数</span></span><br><span class="line">    self._theta=gradient_descent(X_b,y_train,initial_theta,eta,n_iters)</span><br><span class="line"></span><br><span class="line">    self.interception_=self._theta[<span class="number">0</span>]</span><br><span class="line">    self.coef_=self._theta[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  self</span><br></pre></td></tr></table></figure><p>​        之前我们在目标函数中使用向量化对求解过程进行优化，这里我们也可以使用向量化。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144720109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="50%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144733346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        通过向量化的方式，我们程序在求解计算时就会快很多。</p><h5 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h5><p>​        <strong>批量梯度下降法（Batch Gradient Descent）</strong></p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144748579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        这是之前的向量化公式，我们在求解梯度时，每一项都要对<strong>所有的样本</strong>进行计算。每一步都使用整批训练数据。因此面对非常庞大的训练集时，算法变得极慢。但是梯度下降法随特征数量扩展的表现比较好：如果要训练的线性模型拥有几十万个特征，使用梯度下降法比标准方程快得多。</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144805345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144816388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        随机梯度下降法的学习率不能是一个固定值，需要是递减的。随机性的好处在于可以逃离局部最优，但缺点是永远定位不出最小值。要解决这个困境，有一个办法是逐步降低学习率。【<strong>模拟退火的思想</strong>】</p><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144829990.png" width="18%"></div>​        ​        **SGD算法实现**：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_sgd</span><span class="params">(self,X_train,y_train,n_iters=<span class="number">5</span>,t0=<span class="number">5</span>,t1=<span class="number">50</span>)</span>:</span></span><br><span class="line">    <span class="string">"""根据训练数据集X_train,y_train,使用随机梯度下降法训练Linear Regression模型"""</span></span><br><span class="line">    <span class="keyword">assert</span> X_train.shape[<span class="number">0</span>]==y_train.shape[<span class="number">0</span>],\</span><br><span class="line">        <span class="string">"the size of X_train must be euqal to the size of y_train"</span></span><br><span class="line">    <span class="keyword">assert</span> n_iters&gt;=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dJ_sgd</span><span class="params">(theta, X_b_i, y_i)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> X_b_i*(X_b_i.dot(theta)-y_i)*<span class="number">2.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sgd</span><span class="params">(X_b, y, initial_theta, n_iters, t0=<span class="number">5</span>,t1=<span class="number">50</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">learning_rate</span><span class="params">(t)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> t0/(t+t1)</span><br><span class="line"></span><br><span class="line">        theta=initial_theta</span><br><span class="line">        m=len(X_b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cur_iter <span class="keyword">in</span> range(n_iters):</span><br><span class="line">            indexes=np.random.permutation(m)</span><br><span class="line">            X_b_new=X_b[indexes]</span><br><span class="line">            y_new=y[indexes]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">                gradient = dJ_sgd(theta, X_b_new[i], y_new[i])</span><br><span class="line">                theta = theta - learning_rate(cur_iter*m+i) * gradient</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line">    X_b = np.hstack([np.ones((len(X_train), <span class="number">1</span>)), X_train])</span><br><span class="line">    initial_theta = np.zeros(X_b.shape[<span class="number">1</span>])  <span class="comment"># theta向量的行数=X_b向量的列数</span></span><br><span class="line">    self._theta=sgd(X_b,y_train,initial_theta,n_iters,t0,t1)</span><br><span class="line"></span><br><span class="line">    self.interception_=self._theta[<span class="number">0</span>]</span><br><span class="line">    self.coef_=self._theta[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  self</span><br></pre></td></tr></table></figure>#####  关于梯度的调试<div align="center">     <img src="https://img-blog.csdnimg.cn/2019091314484895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144905314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><h4 id="衡量线性回归的指标"><a href="#衡量线性回归的指标" class="headerlink" title="衡量线性回归的指标"></a>衡量线性回归的指标</h4><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913145027264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913145017458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="30%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913145005383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="20%"></div>​        **最好的衡量线性回归法的指标**：<div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144951792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><div align="center">     <img src="https://img-blog.csdnimg.cn/2019091314494256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><p>​        <strong>R Squared</strong>：</p><ul><li>R^2^&lt;=1;</li><li>R^2^越大越好。当我们的预测模型不犯任何错误时，R^2^得到最大值1；</li><li>当我们的模型等于基准模型时，R^2^为0；</li><li>如果R^2^&lt;0，说明我们学习到的模型还不如基准模型。此时，很有可能我们的数据不存在任何线性关系。</li></ul><div align="center">     <img src="https://img-blog.csdnimg.cn/20190913144924195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MzgwMw==,size_16,color_FFFFFF,t_70" width="40%"></div><h4 id="线性回归算法总结"><a href="#线性回归算法总结" class="headerlink" title="线性回归算法总结"></a>线性回归算法总结</h4><p>​        1、评价线性回归算法：R Squared</p><p>​        2、典型的参数学习，对比KNN：非参数学习</p><p>​        3、只能解决回归问题，对比KNN：既可以解决分类问题，又可以解决线性问题    </p><p>​        4、对数据有假设：线性，对比KNN对数据没有假设</p><p>​        5、优点：对数据具有强解释性</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        线性回归——一种有监督的学习算法，即在建模过程中必须同时具备自变量x和因变量y。更为概括地说，线性模型就是对输入特征加权求和，再加上一个我们称为偏置项的常数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://ligang-chn.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://ligang-chn.github.io/tags/Python/"/>
    
      <category term="机器学习" scheme="https://ligang-chn.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="梯度下降法" scheme="https://ligang-chn.github.io/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://ligang-chn.github.io/2019/09/30/KMP/"/>
    <id>https://ligang-chn.github.io/2019/09/30/KMP/</id>
    <published>2019-09-30T14:16:23.000Z</published>
    <updated>2019-11-26T03:41:41.162Z</updated>
    
    <content type="html"><![CDATA[<p>学习到串这一章，碰到一个不太好理解的算法，记录一下。</p><p>数据结构：<strong>串</strong>；</p><p>字串的<strong>定位操作</strong>通常称为串的模式匹配，算是串中最重要的操作之一。这里主要讲一下KMP模式匹配算法（即<strong>克努特-莫里斯-普拉特算法</strong>）。</p><a id="more"></a><h2 id="1、前缀值求解"><a href="#1、前缀值求解" class="headerlink" title="1、前缀值求解"></a>1、前缀值求解</h2><p>在进行KMP算法操作之前需要求解将要匹配的字符串的<strong>前缀值</strong>，表现为一个前缀数组。（有些书中称为next数组）<br><strong>第一步，前缀表</strong><br>下面是即将要匹配的字符串，先写出前缀表：<br><img src="https://img-blog.csdnimg.cn/20190327103519635.png#pic_center =200x200" alt="在这里插入图片描述"><br><strong>第二步，求出前缀值</strong><br>把每个前缀当成独立的字符串，找出最长的公共的前后缀，并且这个前后缀是比原始字符串要短；<br><img src="https://img-blog.csdnimg.cn/20190327103954172.png#pic_center =500x250" alt="在这里插入图片描述"><br>然后，将最后一行删除，因为最后的字符串就是其本身，同时在最前面添加一个-1。<br>这样就构成了前缀数组：-1，0，0，1，2；</p><p><strong>进行匹配</strong><br><img src="https://img-blog.csdnimg.cn/20190327104404752.png#pic_center =500x250" alt="在这里插入图片描述"><br>当出现匹配失败时（如上图），查找失配位置的前缀值，比如上图匹配a和b失败，当前的前缀值是1（即图中红色的圆圈处），所以转到匹配字符串下标为1的位置（即图中绿色的圆圈处）。<br>此时，将P串后移，使得红叉和绿圈对齐，从这里继续开始匹配。<br>绿圈之前的字符不再需要匹配，因为前面一定是匹配的，不需要验证了。（这就是KMP算法相对于朴素匹配算法的优势）<br><strong>第三步，前缀实现</strong><br>下图是前缀值求解的算法图解：<br><img src="https://img-blog.csdnimg.cn/20190327105635605.png#pic_center =600x300" alt="在这里插入图片描述"><br>在上图中，下标为6的位置的前缀值怎么求解？</p><p><img src="https://img-blog.csdnimg.cn/20190327105221318.png#pic_center =600x300" alt="在这里插入图片描述"><br>通过观察6位置之前的字符串，发现5处的前缀值为1，要使6处的前缀值为2，只有其位置的字符为B。所以，需要做的就是检查一下，6处的字符是不是B。<br>len——字符串达到的最大的长度；<br>其实现为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前缀实现</span></span><br><span class="line"><span class="keyword">void</span> prefix_table(char pattern[], int prefix[], int n) &#123;</span><br><span class="line">prefix[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">int len = <span class="number">0</span>;</span><br><span class="line">int i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (pattern[i] == pattern[len]) &#123;</span><br><span class="line">len++;</span><br><span class="line">prefix[i] = len;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">len = prefix[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">prefix[i] = len;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将前缀数组后后移一位，方便后面KMP算法计算</span></span><br><span class="line"><span class="keyword">void</span> move_prefix_table(int prefix[], int n)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line"><span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">prefix[i] = prefix[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">prefix[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、KMP实现"><a href="#2、KMP实现" class="headerlink" title="2、KMP实现"></a>2、KMP实现</h2><p><img src="https://img-blog.csdnimg.cn/20190327112544238.png#pic_center =600x300" alt="在这里插入图片描述"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> kmp_search(char text[], char pattern[])</span><br><span class="line">&#123;</span><br><span class="line">int n = strlen(pattern);  <span class="comment">//计算字符串长度</span></span><br><span class="line">int * prefix = malloc(sizeof(int) * n);<span class="comment">//内存分配</span></span><br><span class="line">prefix_table(pattern, prefix, n);<span class="comment">//前缀表求解</span></span><br><span class="line">move_prefix_table(prefix, n);<span class="comment">//前缀表移位</span></span><br><span class="line"><span class="comment">//text[i]   ,len(text)   =m;</span></span><br><span class="line"><span class="comment">//pattern[j],len(pattrn) =n;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == n - <span class="number">1</span> &amp;&amp; text[i] == pattern[j])</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"Found pattern at %d\n"</span>, i - j);</span><br><span class="line">j = prefix[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (text[i] == pattern[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = prefix[j];</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3、参考"><a href="#3、参考" class="headerlink" title="3、参考"></a>3、参考</h2><p>视频：<a href="https://www.bilibili.com/video/av11866460/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener">https://www.bilibili.com/video/av11866460/?spm_id_from=333.788.videocard.0</a><br>书籍：大话数据结构</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习到串这一章，碰到一个不太好理解的算法，记录一下。&lt;/p&gt;
&lt;p&gt;数据结构：&lt;strong&gt;串&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;字串的&lt;strong&gt;定位操作&lt;/strong&gt;通常称为串的模式匹配，算是串中最重要的操作之一。这里主要讲一下KMP模式匹配算法（即&lt;strong&gt;克努特-莫里斯-普拉特算法&lt;/strong&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://ligang-chn.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://ligang-chn.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="KMP" scheme="https://ligang-chn.github.io/tags/KMP/"/>
    
      <category term="C++" scheme="https://ligang-chn.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：性能优化</title>
    <link href="https://ligang-chn.github.io/2019/05/20/hexo-performance-optimization/"/>
    <id>https://ligang-chn.github.io/2019/05/20/hexo-performance-optimization/</id>
    <published>2019-05-20T09:15:23.000Z</published>
    <updated>2019-09-30T12:59:56.850Z</updated>
    
    <content type="html"><![CDATA[<p>在访问很多博客的时候，页面加载和响应速度往往都要上十秒，严重影响用户的体验。<br>本文将探究如何利用常用的方案来进行性能优化，主要包括:</p><ul><li>CDN加速</li><li>Nginx压缩、缓存</li><li>图床</li></ul><a id="more"></a><p>首先，可利用 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a> 帮助分析网页加载速度，根据报告结果和优化建议进行针对性的优化。<br>常见的网站提速方案有：cdn加速，压缩源文件，nginx gzip压缩，减少网站一些不必要的引入，图片大小等。</p><h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><p>在阅读下文之前，如果你还不知道 CDN 是什么，请先移步<a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener">百度百科：CDN词条</a> 进行一些了解。<br>在所有静态资源中，对加载速度影响较大且存在大幅优化空间的主要还是「JavaScript 第三方库」脚本，设定成合适的 CDN 地址，此特性可以加速静态资源的加载。<br>对于我 Hexo 博客来说，NexT 主题已经做好了配置，只需添加 CDN 加载源，将其改为从公共 CDN 加载即可。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>vendors</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># jquery: //cdn.jsdelivr.net/npm/jquery@2/dist/jquery.min.js</span></span><br><span class="line"><span class="comment"># jquery: //cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js</span></span><br><span class="line"><span class="attr">jquery:</span> <span class="string">//cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>比较常用的开源项目 CDN 服务商主要有 unpkg、bootcdn、 cdnjs、jsdelivr 和 cloudflare，本站主要使用 jsdelivr 提供的 CDN 加速服务。</p><h3 id="Nginx压缩、缓存"><a href="#Nginx压缩、缓存" class="headerlink" title="Nginx压缩、缓存"></a>Nginx压缩、缓存</h3><div class="note info">            <p>Nginx 是一个高性能的 Web 服务器，可以适当地分配流量（负载均衡器）、流媒体、动态调整图像大小、缓存内容等等，合理配置可以有效提高网站的响应速度。</p>          </div><h4 id="开启gzip"><a href="#开启gzip" class="headerlink" title="开启gzip"></a>开启gzip</h4><p>gzip压缩页面需要浏览器和服务器双方都支持，实际上就是服务器端压缩，传到浏览器后浏览器解压并解析。<br>修改nginx.conf，在http模块中增加gzip配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#开启gzip压缩;</span><br><span class="line">gzip  on;</span><br><span class="line"></span><br><span class="line">#设置允许压缩的页面最小字节数;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line">#设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line"></span><br><span class="line">#压缩版本</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line">#设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快;级别越高，压缩就越小</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line"></span><br><span class="line">#制定压缩的类型</span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json image/svg+xml application/x-font-ttf font/opentype image/x-icon;</span><br><span class="line"></span><br><span class="line">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span><br><span class="line">gzip_disable "MSIE [1-6]\.";</span><br><span class="line"></span><br><span class="line">#选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写</span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure><h4 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h4><p>修改nginx.conf，在server中配置缓存和失效时间：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">    access_log off;</span><br><span class="line">    expires 30d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">    access_log off;</span><br><span class="line">    expires 24h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(html|htm)$ &#123;</span><br><span class="line">     expires 1h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><div class="note info">            <p>目前各大云服务商都提供了对象存储服务，如七牛云 QINIU、又拍云 USS、腾讯云 COS、阿里云 OSS 等。我们可以使用这些服务器来存储图片信息，并将其称为图床。</p>          </div><p>使用图床的好处：</p><ul><li>可以减轻服务器的存储压力；</li><li>减轻应为图片带来的额外的流量消耗；</li><li>图床一般都是具有cdn加速的，可以让你的网页变得更快。</li></ul><p>我主要是看中了cdn加速这点，这个对网站的性能提升太重要了。</p><p>常用的云存储服务费用对比：</p><div class="table-container"><table><thead><tr><th style="text-align:center">限定符</th><th style="text-align:center">免费存储空间</th><th style="text-align:center">免费下载流量</th><th style="text-align:center">免费请求</th><th style="text-align:center">免费时间</th><th style="text-align:center">HTTPS</th><th style="text-align:center">CDN</th></tr></thead><tbody><tr><td style="text-align:center">微博图床</td><td style="text-align:center">无限</td><td style="text-align:center">无限</td><td style="text-align:center">无限</td><td style="text-align:center">永久</td><td style="text-align:center"><i class="fa fa-close"></i></td><td style="text-align:center"><i class="fa fa-check"></i></td></tr><tr><td style="text-align:center">七牛云</td><td style="text-align:center">10G</td><td style="text-align:center">10G</td><td style="text-align:center">PUT: 10万次 <br>GET: 100万次</td><td style="text-align:center">永久</td><td style="text-align:center"><i class="fa fa-check"></i></td><td style="text-align:center"><i class="fa fa-check"></i></td></tr><tr><td style="text-align:center">青云QingStor</td><td style="text-align:center">30G</td><td style="text-align:center">11G</td><td style="text-align:center">PUT: 10万次 <br>GET: 100万次</td><td style="text-align:center">12个月</td><td style="text-align:center"><i class="fa fa-check"></i></td><td style="text-align:center"><i class="fa fa-check"></i></td></tr><tr><td style="text-align:center">又拍云USS</td><td style="text-align:center">10G</td><td style="text-align:center">15G</td><td style="text-align:center">无限</td><td style="text-align:center">12个月</td><td style="text-align:center"><i class="fa fa-check"></i></td><td style="text-align:center"><i class="fa fa-check"></i></td></tr><tr><td style="text-align:center">阿里云OSS</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center"><i class="fa fa-check"></i></td><td style="text-align:center"><i class="fa fa-check"></i></td></tr><tr><td style="text-align:center">腾讯云COS</td><td style="text-align:center">50G</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">6个月</td><td style="text-align:center"><i class="fa fa-check"></i></td><td style="text-align:center"><i class="fa fa-check"></i></td></tr><tr><td style="text-align:center">Github</td><td style="text-align:center">100G</td><td style="text-align:center">无限</td><td style="text-align:center">无限</td><td style="text-align:center">永久</td><td style="text-align:center"><i class="fa fa-check"></i></td><td style="text-align:center"><i class="fa fa-close"></i></td></tr></tbody></table></div><ul><li>七牛云是专业云服务商，提供比较完备的服务，且免费额度足够个人博客使用。</li><li>七牛云的定位就是 CDN，让你在浏览网页的时候最快的接收到页面中的图片、音频等文件，所以非常适合个人、企业用户用来储存站点资源，且CDN加速也不会产生太多的费用。</li><li>微博图床是匿名图床，如果有一天禁止外链访问的话，图片将全部丢失。想着辛辛苦苦制作的图片有丢失的风险，马上就放弃了。【2019年4月微博图床开启了防盗链，对图片 CDN 添加了引用来源<code>Referer</code>检测，对于非微博站内引用的请求统统拒绝访问】</li><li>GitHub 看起来是个不错的选择，但是网络访问速度不是很理想，随即放弃了。</li><li>阿里云OSS也是个不错的选择，有个9元包年40G存储空间，无限流量。</li></ul><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p>综合比较之后：我选择了七牛云的对象存储作为图床(高效、快速、有保障)。<br><img src="https://image.chingow.cn/images/20190610215145_FVk4s5_Screenshot.jpeg" alt="七牛云对象存储" title="七牛云对象存储"></p><h4 id="注册账号并实名认证"><a href="#注册账号并实名认证" class="headerlink" title="注册账号并实名认证"></a>注册账号并实名认证</h4><p>注册 <a href="https://portal.qiniu.com/signup?code=1hjtnnywndb9u" target="_blank" rel="noopener">七牛开发者平台</a> 账号，并前往 <strong>个人中心</strong>  -&gt;  <strong>个人信息</strong> 实名认证。</p><h4 id="新建存储空间"><a href="#新建存储空间" class="headerlink" title="新建存储空间"></a>新建存储空间</h4><ul><li><p>进入控制台，打开 <strong>对象存储</strong>  -&gt; <strong>新建存储空间</strong>， 即可创建新的Bucket。<br>【存储区域】：建议选择一个离你较近的CDN<br>【访问控制】：这里必须选择“公开空间”，因为设置为私有空间，图片的外链是无法访问的。</p></li><li><p>进入新创建的存储空间，在 <strong>空间概览</strong>里点击 <strong>自定义域名</strong> 为空间绑定融合cdn加速域名。详细的参数解释可以参考 <a href="https://developer.qiniu.com/fusion/manual/4939/the-domain-name-to-access" target="_blank" rel="noopener">官方域名接入文档</a> 。<br><img src="https://image.chingow.cn/images/20190610224405_2DZajr_Screenshot.jpeg" alt="自定义域名" title="自定义域名"><br>【域名类型】：如果没有特殊需求，选择普通域名即可。<br>【加速域名】：建议填写的是，您未在使用的二级或三级域名等，请勿轻易绑定www域名避免影响您的源站服务。<br>【源站配置】：当您为存储空间绑定自定义域名的时候，源站配置默认为七牛云存储空间即可。</p></li><li><p>配置CNAME<br>创建加速域名成功后，七牛云会提供CNAME地址，需要在域名服务提供商处将加速域名指向分配的CNAME地址，配置生效后，即可享受CDN加速服务。根据控制台的引导文档并参考 <a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name" target="_blank" rel="noopener">官方配置域名CNAME文档</a> 。</p></li></ul><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>进入新创建的存储空间，在 <strong>内容管理</strong> 中上传、下载、访问、修改资源，这样就可以使用资源的外链了。<br>上传图片文件以后，复制外链连接就可以利用这个链接访问这个图片了。<br><img src="https://image.chingow.cn/images/20190610224604_5uT2oa_Screenshot.jpeg" alt="使用资源外链" title="使用资源外链"></p><h3 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h3><p>如果每次都需要在web端点击上传图片，然后复制外链的操作就比较麻烦了，使用工具可以让我们更加方便地上传资源。<br>Mac平台上有多款图床工具，找到了几个优秀的工具，做了个对比：</p><style>table th:nth-of-type(2){width: 10%;;}table th:nth-of-type(5){width: 15%;}</style><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">收费标准</th><th style="text-align:center">优点</th><th style="text-align:center">缺点</th><th style="text-align:center">推荐指数</th><th style="text-align:center">下载链接</th></tr></thead><tbody><tr><td style="text-align:center">ipic</td><td style="text-align:center">60元/年</td><td style="text-align:center">剪贴板、压缩、拖拽上传，功能强大，支持多种云服务</td><td style="text-align:center">免费版只支持微博图床</td><td style="text-align:center"><i class="fa fa-star"></i></td><td style="text-align:center"><a href="https://itunes.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12" target="_blank" rel="noopener">Mac App Store</a></td></tr><tr><td style="text-align:center">PicGo</td><td style="text-align:center">免费</td><td style="text-align:center">链接上传，支持相册管理</td><td style="text-align:center">不支持清除上传历史</td><td style="text-align:center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star-half-o"></i></i></i></td><td style="text-align:center"><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo.dmg</a></td></tr><tr><td style="text-align:center">PicUploader</td><td style="text-align:center">免费</td><td style="text-align:center">压缩上传，多文件、文件夹同时上传</td><td style="text-align:center">不支持顶部菜单</td><td style="text-align:center"><i class="fa fa-star"> <i class="fa fa-star"></i></i></td><td style="text-align:center"><a href="https://github.com/xiebruce/PicUploader/releases" target="_blank" rel="noopener">PicUploader.zip</a></td></tr><tr><td style="text-align:center">云存储管理</td><td style="text-align:center">免费</td><td style="text-align:center">链接上传，可视化相册管理</td><td style="text-align:center">上传速度太慢，会卡死（不能忍受(°⌓°;）</td><td style="text-align:center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star"></i></i></i></td><td style="text-align:center"><a href="https://github.com/willnewii/qiniuClient" target="_blank" rel="noopener">云存储管理客户端</a></td></tr><tr><td style="text-align:center">cuImage</td><td style="text-align:center">免费</td><td style="text-align:center">剪贴板、压缩、拖拽上传，与ipic类似</td><td style="text-align:center">仅支持七牛云<br>不支持链接上传</td><td style="text-align:center"><i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star"> <i class="fa fa-star">  <i class="fa fa-star-half-o"></i></i></i></i></i></td><td style="text-align:center"><a href="https://github.com/hulizhen/cuImage/releases" target="_blank" rel="noopener">Mac App Store</a></td></tr></tbody></table></div><p>如果是使用七牛云图床我推荐cuImage，它的功能完善，使用剪贴板、拖曳、甚至是快捷键都可以直接将图片上传到云存储，并直接生成Markdown外链，操作十分简便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在访问很多博客的时候，页面加载和响应速度往往都要上十秒，严重影响用户的体验。&lt;br&gt;本文将探究如何利用常用的方案来进行性能优化，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDN加速&lt;/li&gt;
&lt;li&gt;Nginx压缩、缓存&lt;/li&gt;
&lt;li&gt;图床&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
      <category term="七牛云" scheme="https://ligang-chn.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：功能强化</title>
    <link href="https://ligang-chn.github.io/2019/05/19/hexo-function-optimization/"/>
    <id>https://ligang-chn.github.io/2019/05/19/hexo-function-optimization/</id>
    <published>2019-05-19T14:08:03.000Z</published>
    <updated>2019-09-30T12:59:47.359Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.chingow.cn/background/20190602023505_JefG9q_6DE1E34E-037D-4EA6-A8CC-68280E0EAC1D-1264-00000122BCC398FB_tmp.jpeg" alt="Photo in Chongqing Fengjie" title="Photo in Chongqing Fengjie"></p><p>开源的力量让第三方插件的支持越来越多，本文介绍了在如何利用插件来加强网站的功能，主要包括:</p><ul><li>分类时间线</li><li>DaoVoice</li><li>站内搜索</li><li>文章推荐</li><li>Valine评论</li><li>图片灯箱<a id="more"></a></li></ul><h2 id="分类时间线"><a href="#分类时间线" class="headerlink" title="分类时间线"></a>分类时间线</h2><p>归档页面的时间线会让文章显示得很有条理，但是分类里却没有，可以通过修改布局自己实现这个时间线功能。</p><p><img src="https://image.chingow.cn/images/20190602012728_SmUFAI_Screenshot.jpeg?400x" alt="分类时间线" title="分类时间线"></p><p>在主题的分类布局文件中添加以下代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/category.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in page.posts %&#125;</span><br><span class="line"><span class="addition">+&#123;# Show year #&#125;</span></span><br><span class="line"><span class="addition">+&#123;% set year %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% set post.year = date(post.date, 'YYYY') %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% if post.year !== year %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% set year = post.year %&#125;</span></span><br><span class="line"><span class="addition">+&lt;div class="collection-title"&gt;</span></span><br><span class="line"><span class="addition">+&lt;h2 class="archive-year motion-element" id="archive-year-&#123;&#123; year &#125;&#125;"&gt;&#123;&#123; year &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="addition">+&lt;/div&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+&#123;# endshow #&#125;</span></span><br><span class="line">&#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&#123;% block script_extra %&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% if theme.use_motion %&#125;</span></span><br><span class="line"><span class="addition">+&lt;script type="text/javascript" id="motion.page.archive"&gt;</span></span><br><span class="line"><span class="addition">+$('.archive-year').velocity('transition.slideLeftIn');</span></span><br><span class="line"><span class="addition">+&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% endblock %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="在线联系DaoVoice"><a href="#在线联系DaoVoice" class="headerlink" title="在线联系DaoVoice"></a>在线联系DaoVoice</h2><p>该功能由 <a href="http://dashboard.daovoice.io" target="_blank" rel="noopener">DaoVoice</a> 插件提供，效果如图：<br><img src="https://image.chingow.cn/images/20190603010423_YeqmzM_Screenshot.jpeg?300x" alt="DaoVoice" title="DaoVoice"></p><p>首先去 <a href="http://dashboard.daovoice.io/get-started?invite_code=3d64b7fd" target="_blank" rel="noopener">DaoVoice官网</a> 注册，输入邀请码 3d64b7fd，注册后查看<strong>app_id</strong> 并复制，在 <span id="inline-purple">主题配置文件</span> _config.yml 中添加daovoice的配置：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">&#123;your</span> <span class="string">app_id&#125;</span></span><br></pre></td></tr></table></figure><p>按照官网开发文档说明里 <strong>应用设置</strong>—&gt;<strong>安装到网站</strong>的设置，在head的布局模板中插入相关 JavaScript 代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_partials/head.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+&#123;% if theme.daovoice %&#125;</span></span><br><span class="line"><span class="addition">+&lt;script&gt;</span></span><br><span class="line"><span class="addition">+(function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/$&#123;your_app_id&#125;.js","daovoice")</span></span><br><span class="line"><span class="addition">+daovoice('init', &#123;</span></span><br><span class="line"><span class="addition">+app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line"><span class="addition">+&#125;);</span></span><br><span class="line"><span class="addition">+daovoice('update');</span></span><br><span class="line"><span class="addition">+&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;# Export some HEXO Configurations to Front-End #&#125;</span><br><span class="line">&lt;script id="hexo.configurations"&gt;</span><br></pre></td></tr></table></figure><p>具体样式设计可以在 <strong>应用设置</strong> -&gt; <strong>聊天设置</strong> 后边改。</p><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">hexo-generator-searchdb</a> 提供，效果如图：</p><p><img src="https://image.chingow.cn/images/20190602014351_let2yO_Screenshot.jpeg?650x" alt="站内搜索" title="站内搜索"></p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>local_search</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span><span class="comment"># 开启站内搜索</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span><span class="comment"># 自动和手动触发</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">3</span>  <span class="comment"># 每篇文章显示的搜索结果数量</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>搜索弹框的页边距有点点挤，在自定义样式文件中添加样式规则来增加页边距：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//增加搜索弹窗的页边距</span><br><span class="line"><span class="selector-class">.local-search-popup</span> <span class="selector-id">#local-search-result</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">40px</span></span><br><span class="line">  height: <span class="built_in">calc</span>(100% - 95px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p>该功能由 <a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">hexo-related-popular-posts</a> 插件提供，效果如图：</p><p><img src="https://image.chingow.cn/images/20190602014455_EGjrzz_Screenshot.jpeg?350x&quot;文章推荐&quot;" alt="文章推荐"></p><p>在站点根目录中执行以下命令安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启相关文章推荐功能：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  title:</span>  <span class="comment"># custom header, leave empty to use the default one</span></span><br><span class="line"><span class="attr">  display_in_home:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  params:</span></span><br><span class="line"><span class="attr">    maxCount:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>此时会在每篇文章结尾根据标签相关性和内容相关性来推荐相关文章。</p><p>事实上并非每篇文章都需要开启该功能，可在文章 Front-Matter 中设置 <code>related_posts</code> 字段来控制是否在文末显示相关文章，然后修改文章布局模板中相关的判定条件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.related_posts.enable and (theme.related_posts.display_in_home or not is_index) and post.related_posts %&#125;</span></span><br><span class="line">    &#123;% include 'post-related.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了方便可在草稿模板 scaffolds\draft.md 中统一添加 <code>related_posts</code> 字段默认值：</p><figure class="highlight diff"><figcaption><span>scaffolds/draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ related_posts: true</span></span><br></pre></td></tr></table></figure><h2 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h2><p><img src="https://image.chingow.cn/images/20190602015658_Y7Rj8t_Screenshot.jpeg?650x&quot;Valine评论&quot;" alt="Valine评论"></p><blockquote><p>Valine 诞生于 2017 年 8 月 7 日，是一款基于 <a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a> 提供后端数据服务的快速、简洁且高效的无后端评论系统，支持匿名评论、持Markdown、Emoji等都是它的绝对优势，而且 Next 主题也已经内置了 Valine 组件，使用起来非常方便。</p></blockquote><p>首先，在LeanCloud上注册账号并创建应用，设置LeanCloud的信息。</p><p>在 <strong>存储</strong> -&gt; <strong>数据</strong> 中 新建一个名为<code>Counter</code> 的 Class，<code>ACL</code>权限设置为 <strong>无限制</strong>：<br>在 <strong>设置</strong> -&gt; <strong>安全中心</strong> 中添加博客域名到 Web 安全域名中，以保护LeanCloud应用的数据安全。</p><div class="note info">            <p>在LeanCloud中的Class可以理解为数据库中的数据表。Counter用于存储记录文章访问量，记录是以url作为唯一依据的，所以根据默认的permalink组成结构，如果你更改了文章的发布日期和标题中的任意一个，都会造成文章阅读数值的清零重计。</p>          </div><p>然后，在 <span id="inline-purple">主题配置文件</span> _config.yml 开启评论功能即可：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>    <span class="comment"># 开启 Valine 评论</span></span><br><span class="line">  <span class="comment"># 设置应用 id 和 key</span></span><br><span class="line"><span class="attr">  appid:</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span>  <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="comment"># 关闭提醒与验证</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  placeholder:</span>  <span class="comment"># 文本框默认文字</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span>  <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># 需要填写的信息字段</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span>  <span class="comment"># 每页评论数</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-cn</span> <span class="comment"># language, available values: en, zh-cn</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">true</span> <span class="comment"># 开启文章阅读次数统计</span></span><br><span class="line"><span class="attr">  comment_count:</span> <span class="literal">false</span> <span class="comment"># 首页是否开启评论数</span></span><br></pre></td></tr></table></figure><p>有时候我们并不想在文章标题下显示评论数量，如要隐藏，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//屏蔽标题下的评论数量</span><br><span class="line"><span class="selector-class">.post-comments-count</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评论区会显示评论人的浏览器和操作系统版本号等信息，如果只想要一个干净的评论界面，而没有多余其他的信息，可在自定义样式文件中添加如下代码：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//屏蔽评论组件的多余信息</span><br><span class="line"><span class="selector-id">#comments</span> <span class="selector-class">.info</span>, <span class="selector-id">#comments</span> <span class="selector-class">.vsys</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，集成评论服务后，所有的页面也会带有评论，包括标签、关于等页面。这里需要在添加字段<code>comments</code>并将值设置为 false 即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="图片灯箱"><a href="#图片灯箱" class="headerlink" title="图片灯箱"></a>图片灯箱</h2><p>添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由 <a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">fancyBox</a> 提供。</p><p>在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 themes/next/<span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中设置 <code>fancybox: true</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>刷新浏览器即可生效。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>文章中大量的优化方案都参照了 <a href="yearito.cn">yearito</a> 的优化精髓，在集成第三方插件或者自定义新功能的过程中尽量做到：</p><ul><li>可以在站点配置 / 主题配置文件中方便快捷的开启 / 关闭插件服务</li><li>可以在语言包 zh-CN.yml 中快速修改页面中的自定义文案，而不是在代码中将文字表述写死</li><li>尽量在自定义样式文件 custom.styl 和自定义布局文件 custom.swig 中添加代码，而非修改主题源码<br>新增文件统一放在 _custom 目录下</li><li>所有以上这些原则，尽管实现起来可能更复杂，需要更多的代码，但都是为了让站点更好维护，更灵活方便。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.chingow.cn/background/20190602023505_JefG9q_6DE1E34E-037D-4EA6-A8CC-68280E0EAC1D-1264-00000122BCC398FB_tmp.jpeg&quot; alt=&quot;Photo in Chongqing Fengjie&quot; title=&quot;Photo in Chongqing Fengjie&quot;&gt;&lt;/p&gt;
&lt;p&gt;开源的力量让第三方插件的支持越来越多，本文介绍了在如何利用插件来加强网站的功能，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类时间线&lt;/li&gt;
&lt;li&gt;DaoVoice&lt;/li&gt;
&lt;li&gt;站内搜索&lt;/li&gt;
&lt;li&gt;文章推荐&lt;/li&gt;
&lt;li&gt;Valine评论&lt;/li&gt;
&lt;li&gt;图片灯箱
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：内容优化</title>
    <link href="https://ligang-chn.github.io/2019/05/18/hexo-content-optimization/"/>
    <id>https://ligang-chn.github.io/2019/05/18/hexo-content-optimization/</id>
    <published>2019-05-18T08:08:13.000Z</published>
    <updated>2019-09-30T12:59:01.308Z</updated>
    
    <content type="html"><![CDATA[<p>NexT主题内提供了很多功能来让内容更加丰富，本文介绍了如何开启和定制这些功能，主要包括:</p><ul><li>模板设置</li><li>文章发布修改时间、字数统计</li><li>文章版权声明</li><li>链接样式、底部标签样式</li><li>图片尺寸处理</li><li>代码块复制、显示和隐藏</li><li>草稿和发布<a id="more"></a></li></ul><h2 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h2><p>为了便于创建新文章时更加便利，可以在hexo的<code>scaffolds</code>文件夹内创建模板文件，比如我创建的草稿模板</p><figure class="highlight markdown"><figcaption><span>scaffolds/draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="文章发布修改时间"><a href="#文章发布修改时间" class="headerlink" title="文章发布修改时间"></a>文章发布修改时间</h2><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>post_meta</code>，可用于控制信息的显示：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span>  <span class="comment"># 显示文字说明</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span>  <span class="comment"># 显示文章创建时间</span></span><br><span class="line"><span class="attr">  updated_at:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span>  <span class="comment"># 文章修改时间</span></span><br><span class="line"><span class="attr">    another_day:</span> <span class="literal">false</span>  <span class="comment"># 只有当修改时间和创建时间不是同一天的时候才显示</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span>  <span class="comment"># 分类信息</span></span><br></pre></td></tr></table></figure><h2 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h2><p>该功能由 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a> 提供，效果如图：<br><img src="https://image.chingow.cn/images/20190602020607_IyueIG_Screenshot.jpeg?420x" alt="文章统计" title="文章统计"></p><p>在根目录下执行如下命令安装相关依赖：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>在 <span id="inline-blue">站点配置文件</span> _config.yml 中添加<code>symbols_count_time</code>配置，这些配置项主要用于控制每项统计信息是否显示：</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span>         <span class="comment"># 统计单篇文章字数</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span>            <span class="comment"># 估算单篇文章阅读时间</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">false</span>  <span class="comment"># 统计站点总字数</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">false</span>     <span class="comment"># 估算站点总阅读时间</span></span><br></pre></td></tr></table></figure><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中做如下修改，这些配置项主要用于控制统计信息的显示样式：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span>  <span class="comment"># 是否换行显示 统计信息</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span>  <span class="comment"># 文章统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 站点统计信息中是否显示“本文字数/阅读时长”等描述文字</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span>  <span class="comment"># Average Word Length：平均字符长度</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span>  <span class="comment"># Words Per Minute：阅读速度</span></span><br></pre></td></tr></table></figure><h2 id="文末版权声明"><a href="#文末版权声明" class="headerlink" title="文末版权声明"></a>文末版权声明</h2><p>NexT主题已经内置了版权声明功能，只需开启配置即可，效果如下：<br><img src="https://image.chingow.cn/images/20190602011504_NtvIUD_Screenshot.jpeg?600x" alt="文末版权声明" title="文末版权声明"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启文章底部的版权声明，版权声明默认使用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议，用户可以根据自身需要修改 <code>licence</code> 字段变更协议：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span>  <span class="comment"># 开启版权声明</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span> <span class="comment"># 侧边栏</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span> <span class="comment"># post文章</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>默认版权声明中只有 <strong>本文作者</strong>、<strong>本文链接</strong>、<strong>版权声明</strong> 三项，如果你想添加更多内容，如 <strong>文章标题</strong> 等，需要先在语言配置文件里补全版权信息文案字段：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copyright:</span><br><span class="line"><span class="addition">+ title : 本文标题</span></span><br><span class="line">  author: 文章作者</span><br><span class="line">  link: 原始链接</span><br><span class="line">  license_title: 许可协议</span><br><span class="line">  license_content: "本文章采用 %s 许可协议，转载请保留原文链接及作者。"</span><br></pre></td></tr></table></figure><p>再修改版权声明布局的相关代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_partials/post/post-copyright.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#123;#</span><br><span class="line">    #&#125;&#123;&#123; post.title | default(config.title) &#125;&#125;&#123;#</span><br><span class="line">  #&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#123;#</span><br><span class="line">  #&#125;&#123;&#123; post.author || author &#125;&#125;&#123;#</span><br></pre></td></tr></table></figure><p>在版权样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_common\components\post\post-copyright.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.swal-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(0,0,0,0.15);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;  </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16</span>x <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.swal-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;  </span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-icon</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#52c41a</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copy-success-message</span> <span class="selector-class">.message-content</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际使用过程中，有些文章是转载别人的文章，文末再出现个人版权声明就不太合适。此时可在Front-Matter中设定变量 <code>copyright</code> 用于控制是否显示版权信息。<br>修改文章布局模板中相关代码，使得只有当主题配置文件中 <code>post_copyright.enable</code> 字段和 <code>page.copyright</code> 字段同时为 <code>true</code> 时才会插入版权声明：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#123;% if theme.post_copyright.enable and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.post_copyright.enable and page.copyright and not is_index %&#125;</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;% include 'post-copyright.swig' with &#123; post: post &#125; %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了批量为每篇新文章设定该变量并赋默认值，可以修改草稿模板内容，这样每篇草稿发布为正文后都会默认显示底部版权信息：</p><figure class="highlight diff"><figcaption><span>scaffolds\draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  title: &#123;&#123; title &#125;&#125;</span><br><span class="line">  tags:</span><br><span class="line">  categories:</span><br><span class="line"><span class="addition">+ copyright: true</span></span><br></pre></td></tr></table></figure><h2 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h2><p>主题自带的链接样式在hover时是灰色的，颜色不明显。在自定义样式文件中添加样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$link-color = #2780e3;</span><br><span class="line">$link-hover-color = #1094e8;</span><br><span class="line">$sidebar-link-hover-color = #0593d3;  </span><br><span class="line"></span><br><span class="line">// 普通链接样式</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $link-hover-color;</span><br><span class="line">    border-bottom-color: $link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">  // For spanned external links.</span><br><span class="line">  <span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧边栏链接样式</span><br><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-tag">a</span>, <span class="selector-class">.sidebar</span> <span class="selector-tag">span</span><span class="selector-class">.exturl</span>&#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $sidebar-link-hover-color;</span><br><span class="line">    border-bottom-color: $sidebar-link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧边栏目录链接样式</span><br><span class="line"><span class="selector-class">.post-toc</span> <span class="selector-tag">ol</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $sidebar-link-hover-color;</span><br><span class="line">    border-bottom-color: $sidebar-link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: $link-color;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $link-hover-color;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">    border-bottom-color: $link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章内上下一页链接样式</span><br><span class="line"><span class="selector-class">.post-nav-prev</span> <span class="selector-tag">a</span> , <span class="selector-class">.post-nav-next</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $link-hover-color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底部标签添加图标"><a href="#底部标签添加图标" class="headerlink" title="底部标签添加图标"></a>底部标签添加图标</h2><p>默认情况下标签前缀是 <code>#</code> 字符，可以通过修改主题源码将标签的字符前缀改为图标前缀，效果如图：</p><p><img src="https://image.chingow.cn/images/20190602012005_lHglf5_Screenshot.jpeg?140x" alt="底部标签" title="底部标签"></p><p>在文章布局模板中找到文末标签相关代码段，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;</code> 即可：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/post.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;footer class="post-footer"&gt;</span><br><span class="line">    &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">      &lt;div class="post-tags"&gt;</span><br><span class="line">        &#123;% for tag in post.tags %&#125;</span><br><span class="line"><span class="deletion">-          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+          &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tags"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>NexT中使用 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 作为图标库，用户可以在 FontAwesome 上找到心仪的图标来替换标签的字符前缀。</p><h2 id="图片尺寸处理"><a href="#图片尺寸处理" class="headerlink" title="图片尺寸处理"></a>图片尺寸处理</h2><div class="note info">            <p>本章节受 bobcn 的<a href="https://github.com/bobcn/hexo_resize_image.js" target="_blank" rel="noopener">方案</a>，自行重构了代码逻辑。</p>          </div><p>有时候原始图片的尺寸不太合适，想指定图片在文章中的大小，但是 <strong>Markdown</strong> 原生的图片语法在<strong>Hexo</strong>中是无效的，这一点让人很困扰（可能是Hexo的Bug，希望以后的版本能够解决这个问题）。<br>现行的处理办法主要有两种方案，一种是使用html标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">200</span> <span class="attr">src</span>=<span class="string">"/image/test.jpg"</span> &gt;</span></span><br></pre></td></tr></table></figure><p>另一种是 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">hexo官方文档</a> 推荐的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><p>但是习惯了 Markdown 的原生语法之后还是觉得这两种都不够简洁高效，用起来多有不便。于是尝试对 Next 主题进行了加强，变相扩展支持了 Markdown 的插图语法：</p><ul><li><p>可指定像素<br>方法是在 URL 后面添加 <code>?&lt;width&gt;x&lt;height&gt;</code>，也可以只指定一个参数，图片会等比例缩放。</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">指定像素</span>](<span class="link">/image/test.jpg?200x200</span>)</span><br><span class="line">![<span class="string">仅指定width</span>](<span class="link">/image/test.jpg?200x</span>)</span><br><span class="line">![<span class="string">仅指定height</span>](<span class="link">/image/test.jpg?x200</span>)</span><br></pre></td></tr></table></figure></li><li><p>可指定缩放比例<br>方法是在 URL 后面添加 <code>?&lt;scale&gt;</code>，等比例缩放图片大小至 %。</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">指定比例</span>](<span class="link">/image/test.jpg?40</span>)</span><br></pre></td></tr></table></figure></li></ul><p>如何实现这种效果的呢？首先在自定义脚本目录新建用于处理图片尺寸的 <strong>JavaScript</strong> 脚本</p><figure class="highlight js"><figcaption><span>themes/next/source/js/_custom/hexo_resize_image.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_image_size</span>(<span class="params">image, width, height</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    image.setAttribute(<span class="string">"width"</span>, width + <span class="string">"px"</span>);</span><br><span class="line">    image.setAttribute(<span class="string">"height"</span>, height + <span class="string">"px"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexo_resize_image</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = imgs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> img = imgs[i];</span><br><span class="line">        <span class="keyword">var</span> src = img.getAttribute(<span class="string">'src'</span>).toString();</span><br><span class="line">        <span class="keyword">var</span> fields = src.match(<span class="regexp">/\?(\d*x\d*)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (fields &amp;&amp; fields.length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> values = fields[<span class="number">1</span>].split(<span class="string">"x"</span>);</span><br><span class="line">            <span class="keyword">if</span> (values.length == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> width = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> height = values[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!(width.length &amp;&amp; height.length))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> n_width = img.naturalWidth;</span><br><span class="line">                    <span class="keyword">var</span> n_height = img.naturalHeight;</span><br><span class="line">                    <span class="keyword">if</span> (width.length &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        height = n_height*width/n_width;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (height.length &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        width = n_width*height/n_height;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                set_image_size(img, width, height);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fields = src.match(<span class="regexp">/\?(\d*)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (fields &amp;&amp; fields.length &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> scale = <span class="built_in">parseFloat</span>(fields[<span class="number">1</span>].toString());</span><br><span class="line">            <span class="keyword">var</span> width = scale/<span class="number">100.0</span>*img.naturalWidth;</span><br><span class="line">            <span class="keyword">var</span> height = scale/<span class="number">100.0</span>*img.naturalHeight;</span><br><span class="line">            set_image_size(img, width, height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = hexo_resize_image;</span><br></pre></td></tr></table></figure><p>然后在自定义布局文件最后添加 <strong>JavaScript</strong> 声明</p><figure class="highlight html"><figcaption><span>themes/next/layout/css/_custom/custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/custom/hexo_resize_image.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><p>NexT主题已经内置了代码复制功能，只需开启配置即可，效果如下：<br><img src="https://image.chingow.cn/images/20190602170547_O2y1Oe_Screenshot.jpeg?600x" alt="代码复制" title="代码复制"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中开启代码复制功能：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 开启代码复制功能</span></span><br><span class="line"><span class="attr">  show_result:</span> <span class="literal">true</span>  <span class="comment"># 显示复制结果</span></span><br></pre></td></tr></table></figure><p>搜索的按钮有点移位，在自定义样式文件中调整样式：</p><figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 复制按钮样式top调整</span><br><span class="line"><span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块显示和隐藏"><a href="#代码块显示和隐藏" class="headerlink" title="代码块显示和隐藏"></a>代码块显示和隐藏</h2><p>—- 待完成 —-</p><h2 id="草稿和发布"><a href="#草稿和发布" class="headerlink" title="草稿和发布"></a>草稿和发布</h2><p></p><p id="div-border-left-blue">一般我们使用` hexo new <title> `来建立文章，这种建立方法会将新文章建立在 **source/_posts** 目录下，当使用 hexo generate 编译文件时，会将其 HTML 结果编译在 public 目录下，之后` hexo server `将会把 public 目录下所有文章发布。</title></p><br><div class="note danger">            <p>这种建立文章方式是有缺点的！写文章的人都知道，一篇文章从创作到发布需要经过多次润色，若我们的文章还在创作润色中，尚未编辑完成，执行 <strong>hexo server</strong> 时也会随着一起发布，这样对读者是不友好的。</p>          </div><br>Hexo 另外提供 draft 机制，它的原理是新文章将建立在 <strong>source/_drafts</strong> 目录下，因此并不会将其编译到 public 目录下发布，而且提供了很友好的预览功能。<p></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;<span class="comment"># 新建草稿文章</span></span><br><span class="line">$ hexo s --draft        <span class="comment"># 预览草稿文章</span></span><br></pre></td></tr></table></figure><p>将草稿发布为正式文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo P &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>&lt;filename&gt;</code> 为不包含 md 后缀的文章名称。它的原理只是将文章从 source/_drafts 移动到 source/_posts 而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NexT主题内提供了很多功能来让内容更加丰富，本文介绍了如何开启和定制这些功能，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板设置&lt;/li&gt;
&lt;li&gt;文章发布修改时间、字数统计&lt;/li&gt;
&lt;li&gt;文章版权声明&lt;/li&gt;
&lt;li&gt;链接样式、底部标签样式&lt;/li&gt;
&lt;li&gt;图片尺寸处理&lt;/li&gt;
&lt;li&gt;代码块复制、显示和隐藏&lt;/li&gt;
&lt;li&gt;草稿和发布
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：主题美化</title>
    <link href="https://ligang-chn.github.io/2019/05/17/hexo-theme-beautifed/"/>
    <id>https://ligang-chn.github.io/2019/05/17/hexo-theme-beautifed/</id>
    <published>2019-05-17T02:07:53.000Z</published>
    <updated>2019-09-30T13:00:35.277Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了在 NexT(v7.0+) 主题的基础上整体布局美化的方案，主要包括:</p><ul><li>Font：字体、动态背景canvas_ribbon</li><li>Top：进度条、Follow me、菜单背景收缩</li><li>Footer：备案显示、运行时间、访客统计</li><li>Sidebar：近期文章、浏览进度、左边显示、目录展开</li></ul><p>大家可以选择喜欢的方案美化自己的博客，当然最好可以再加入点自己的想法改造。<br><a id="more"></a></p><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>前端的美化，可以做的比较多，比如修改字体、修改背景等等。<br>首先在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>font</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># 开启前端设置</span></span><br></pre></td></tr></table></figure><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>默认的字体是微软雅黑，有点审美疲劳了 (lll￢ω￢)，在浏览其他人网站的时候看到了一种很有科技感的字体 『<strong>Monda</strong>』，感觉还是不错的。如何应用到自己的博客呢？<br>首先，可以从 <a href="https://www.fontyukle.net/cn/1,MONDA" target="_blank" rel="noopener">frontyukle</a> 下载字体文件，在服务器上安装。<br>然后在 <span id="inline-purple">主题配置文件</span> _config.yml 中的修改全局字体配置：</p><figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line"><span class="deletion">- family: Lato</span></span><br><span class="line"><span class="addition">+ family: Monda   # 设置Monda字体</span></span><br></pre></td></tr></table></figure><h3 id="设置三角丝带背景"><a href="#设置三角丝带背景" class="headerlink" title="设置三角丝带背景"></a>设置三角丝带背景</h3><div class="note info">            <p>该功能由 Vue 作者 <a href="http://evanyou.me/" target="_blank" rel="noopener">尤雨溪</a> 首创。注意：添加动态背景会极大增加页面内存占用及 CPU 消耗。</p>          </div><p>首先，在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon themes/next/<span class="built_in">source</span>/lib/canvas_ribbon</span><br></pre></td></tr></table></figure><p>然后，在 <span id="inline-purple">主题配置文件</span> _config.yml 中的修改配置<code>canvas_ribbon</code>：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span><span class="comment"># 开启随机三角丝带背景</span></span><br><span class="line"><span class="attr">  size:</span> <span class="number">90</span><span class="comment"># 设置丝带宽度</span></span><br></pre></td></tr></table></figure><h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><p>顶部我们保持简洁为主，设置主要包括：进度条、Fork、菜单等等。</p><h3 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h3><p>当网络不好的时候会出现白屏等待，此时如果能有加载进度提示将会提高用户操作体验。<br>首先，在根目录下执行以下命令安装相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/<span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><p>然后，修改 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置<code>pace</code> 改为 <code>true</code>，并从上面提供的样式中选择一种填入<code>pace_theme</code>中就可以了。</p><h3 id="右上角的Follow-Github"><a href="#右上角的Follow-Github" class="headerlink" title="右上角的Follow-Github"></a>右上角的Follow-Github</h3><p>如果你想大家在看博客的时候能快速链接到你的Github，不妨设置<strong>Github_banner</strong>，效果图如下：<br><img src="https://image.chingow.cn/images/23aaa7f0-a7e7-b170-deef-a8ffb649a473.png?500x" alt="github_banner" title="github_banner"></p><p>修改 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置<code>github_banner</code>，在<code>permalink</code>里配置自己的github地址：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  permalink:</span> <span class="attr">https://github.com/yourname</span></span><br></pre></td></tr></table></figure><h3 id="菜单背景收缩"><a href="#菜单背景收缩" class="headerlink" title="菜单背景收缩"></a>菜单背景收缩</h3><p>在 Muse主题方案中 Header 和 Footer 是没有背景色的，的颜色与内容一致不易区分，而且网站标题的字体不够明显，我做了几个修改</p><ul><li>头部和底部颜色修改</li><li>网站标题加粗和颜色修改</li><li>菜单字体增大显示</li></ul><p>在主题自定义样式文件中添加以下样式：</p><figure class="highlight css"><figcaption><span>themes/next/sources/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//窗口效果相关样式</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 为Header和Footer添加背景色</span><br><span class="line"><span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(245, 245, 245);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//防止sidebar和footer同时开启动效时堆叠异常</span><br><span class="line"><span class="selector-id">#sidebar</span>, <span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//防止挡住页末文章的阅读全文按钮</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加宽菜单间距，放大菜单图标</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-class">.menu-item</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">  .fa &#123;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Muse主题下自定义样式</span><br><span class="line">if hexo-config('scheme') == "Muse" &#123;</span><br><span class="line">  <span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">    .brand &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-tag">rgb</span>(34, 34, 34);</span><br><span class="line">      <span class="selector-tag">background</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.site-title</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完才发现顶部菜单的空间太大了，于是调节菜单高度，在自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;# 页面加载时header高度收缩动效 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".header-inner"</span>).animate(&#123;<span class="attr">padding</span>: <span class="string">"25px 0 25px"</span>&#125;, <span class="number">1000</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">  &#123;% include '_third-party/copy-code.swig' %&#125;</span><br><span class="line">  &#123;% include '_third-party/chatra.swig' %&#125;</span><br><span class="line">  &#123;% include '_third-party/tidio.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &#123;% include '_custom/custom.swig' %&#125;</span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>调节移动端显示的高度</p><figure class="highlight diff"><figcaption><span>themes/next/source/css/_schemes/Muse/_menu.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mobile() &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line"><span class="deletion">-  top: 52px;</span></span><br><span class="line"><span class="addition">+  top: 95px;</span></span><br><span class="line">  margin: 0;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>底部设置的可完性就比较多了，建站信息、备案信息、以及访客和统计信息等信息都可以个性化定制。</p><h3 id="ICP备案和公安备案"><a href="#ICP备案和公安备案" class="headerlink" title="ICP备案和公安备案"></a>ICP备案和公安备案</h3><p>我们的网站已经有备案号了，但是应该如何添加备案号到博客最下面呢？<br>首先，在 <span id="inline-purple">主题配置文件</span> _config.yml 中的配置添加备案配置：</p><figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> # 这里打开备案信息，填写ICP备案号</span><br><span class="line">   beian:</span><br><span class="line">    enable: true</span><br><span class="line">    icp: 鄂ICP证18014719号</span><br><span class="line"></span><br><span class="line"> # 这里是新加的内容，填写公安备案信息</span><br><span class="line"><span class="addition">+  gongan:</span></span><br><span class="line"><span class="addition">+    enable: true</span></span><br><span class="line"><span class="addition">+    local: 鄂</span></span><br><span class="line"><span class="addition">+    num: 42011102003178</span></span><br></pre></td></tr></table></figure><p>然后，在语言配置文件里，添加表述文案<code>beian</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"><span class="addition">+   beian: </span></span><br><span class="line"><span class="addition">+    gongan: 公网安备%s号</span></span><br></pre></td></tr></table></figure><p>接下来，删除原有的布局文件中备案样式的代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_partials/footer.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  #&#125;&#123;% set current = date(Date.now(), "YYYY") %&#125;&#123;#</span><br><span class="line"><span class="deletion">- #&#125;&#123;% if theme.footer.beian.enable %&#125;&#123;#</span></span><br><span class="line"><span class="deletion">- #&#125;  &#123;&#123; next_url('http://www.beian.miit.gov.cn', theme.footer.beian.icp + ' ') &#125;&#125;&#123;#</span></span><br><span class="line"><span class="deletion">- #&#125;&#123;% endif %&#125;&#123;#</span></span><br><span class="line">  #&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; – &#123;% endif %&#125;&#123;#</span><br><span class="line">  ...</span><br><span class="line">  &lt;span class="author" itemprop="copyrightHolder"&gt;&#123;&#123; theme.footer.copyright || author &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &lt;span class="post-meta-divider footer-ages-icon"&gt; | &lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% if config.symbols_count_time.total_symbols %&#125;</span><br></pre></td></tr></table></figure><p>最后，在主题布局文件中添加我们自定义的备案样式：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div class="footer-inner"&gt;</span><br><span class="line">    &#123;&#123; partial('_partials/footer.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">    &#123;% include '_third-party/analytics/analytics-with-widget.swig' %&#125;</span><br><span class="line"><span class="addition">+        &lt;div class="footer-custom"&gt;</span></span><br><span class="line"><span class="addition">+            &#123;% if theme.footer.beian.enable %&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125;&#123;&#123; next_url('http://www.beian.miit.gov.cn', theme.footer.beian.icp + ' ') &#125;&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125;&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+          &#123;% if theme.footer.beian.enable and theme.footer.gongan.enable %&#125;</span></span><br><span class="line"><span class="addition">+            &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+          &#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+          &#123;% if theme.footer.gongan.enable %&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125; &lt;span style="padding-left:25px;background:url(/images/beian.png) no-repeat left center" rel="nofollow"&gt;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125; &#123;&#123; theme.footer.gongan.local&#125;&#125;&#123;&#123;__('footer.beian.gongan', next_url('http://www.beian.gov.cn/portal/registerSystemInfo?recordcode='+theme.footer.gongan.num, theme.footer.gongan.num )) &#125;&#125;&#123;#</span></span><br><span class="line"><span class="addition">+          #&#125;&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+        &lt;/div&gt;</span></span><br><span class="line">    &#123;% block footer %&#125;&#123;% endblock %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="网站的建站时间"><a href="#网站的建站时间" class="headerlink" title="网站的建站时间"></a>网站的建站时间</h3><p>NexT主题已经内置了添加建站时间。在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>since</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2018</span>  <span class="comment"># 修改建站时间</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">  icon:</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">heart</span>  <span class="comment"># 改成心型图标</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line"><span class="attr">    color:</span> <span class="string">"#ff0000"</span> <span class="comment"># 改成红色图标</span></span><br></pre></td></tr></table></figure><h3 id="网站的运行时间"><a href="#网站的运行时间" class="headerlink" title="网站的运行时间"></a>网站的运行时间</h3><div class="note info">            <p>本章节受 <a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">Yearito’s Blog | 站点运行时间统计 </a> 的启发，自行重构了代码逻辑。</p>          </div><p>接下来我们显示网站的运行时间，在这里我做了一些个性化文案，可供大家参考：<br><img src="https://image.chingow.cn/images/00c3834a-cf72-22a3-cd7c-6486649fd648.png?550x" alt="网站建站运行时间" title="网站建站运行时间"></p><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中的添加 <code>ages</code>配置：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ages:</span> <span class="comment"># site running time</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  birthday:</span> <span class="number">20190419</span>    <span class="comment"># 网站运行时间</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">"#1094e8"</span></span><br></pre></td></tr></table></figure><p>在语言配置文件里，添加表述文案<code>age</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"><span class="addition">+   age: 我已在此等候你</span></span><br></pre></td></tr></table></figure><p>在主题自定义布局文件中添加以下代码：</p><figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 页脚站点运行时间统计 #&#125;</span><br><span class="line">  &#123;% if theme.footer.ages.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> ages = moment.preciseDiff(moment(),moment(&#123;&#123; theme.footer.ages.birthday &#125;&#125;,<span class="string">"YYYYMMDD"</span>));</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//去除时分秒信息</span></span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d&#123;0,2&#125;\s+hours?/</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d&#123;0,2&#125;\s+minutes?/</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/\s?\d&#123;0,2&#125;\s+seconds?/</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//将年月日转换为中文</span></span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/years?/</span>, <span class="string">"年"</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/months?/</span>, <span class="string">"月"</span>);</span></span><br><span class="line"><span class="javascript">        ages = ages.replace(<span class="regexp">/days?/</span>, <span class="string">"天"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">        ages = ages.replace(/\d+/g, '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:</span></span></span><span class="template-variable">&#123;&#123; theme.footer.ages.color &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span></span><br><span class="line"><span class="javascript">        span.innerHTML = <span class="string">`&#123;&#123; __('footer.age')&#125;&#125; <span class="subst">$&#123;ages&#125;</span>`</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//插入到agesicon之后</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> agesicon = <span class="built_in">document</span>.querySelector(<span class="string">".footer-ages-icon"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">".copyright"</span>).insertBefore(span, agesicon.nextSibling);</span></span><br><span class="line"><span class="vbscript">      <span class="built_in">timer</span>();</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="添加访客统计"><a href="#添加访客统计" class="headerlink" title="添加访客统计"></a>添加访客统计</h3><p>该功能由 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a> 提供。UV：独立访客数，PV：网站浏览量，访客数和浏览量的区别在于一个用户连续点击n篇文章，会记录n次浏览量，但只记录一次访客数，效果如图：<br><img src="https://image.chingow.cn/images/0298aada-faa2-1f09-f68a-e0382168a5ed.png?550x" alt="网站访客统计" title="网站访客统计"></p><div class="note info">            <p>由于不蒜子是基于域名来进行统计计算的，所以通过 localhost:4000 端口访问的时候统计数据UV和PV都会异常的大，属于正常现象。</p>          </div><p>首先，在 <span id="inline-purple">主题配置文件</span> _config.yml 中打开不蒜子功能：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span>   <span class="comment"># 访客数</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span>   <span class="comment"># 访问量</span></span><br></pre></td></tr></table></figure><p>然后，在语言配置文件里，修改个性化表述文案：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"><span class="deletion">- total_views: 总访问量</span></span><br><span class="line"><span class="deletion">- total_visitors: 总访客量</span></span><br><span class="line"><span class="addition">+ total_views: "历经 %s 次回眸才与你相遇"</span></span><br><span class="line"><span class="addition">+ total_visitors: "我的第 %s 位朋友，"</span></span><br></pre></td></tr></table></figure><p>最后，修改不蒜子模板文件：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="busuanzi-count"&gt;</span><br><span class="line">  &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &#123;% if theme.busuanzi_count.enable %&#125;</span></span><br><span class="line"><span class="addition">+  &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">    &#123;% if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line"><span class="deletion">-    &lt;span class="post-meta-item-icon"&gt;</span></span><br><span class="line"><span class="deletion">-      &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;/span&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;span class="site-uv" title="&#123;&#123; __('footer.total_visitors') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-      &lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+       &lt;span class="site-uv"&gt;</span></span><br><span class="line"><span class="addition">+       &#123;&#123; __('footer.total_visitors', '&lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   &#123;% if theme.busuanzi_count.total_visitors and theme.busuanzi_count.total_views %&#125;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="deletion">-   &#123;% endif %&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line">    &#123;% if theme.busuanzi_count.total_views %&#125;</span><br><span class="line"><span class="deletion">-     &lt;span class="post-meta-item-icon"&gt;</span></span><br><span class="line"><span class="deletion">-       &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;/span&gt;</span></span><br><span class="line"><span class="deletion">-     &lt;span class="site-pv" title="&#123;&#123; __('footer.total_views') &#125;&#125;"&gt;</span></span><br><span class="line"><span class="deletion">-       &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="addition">+     &lt;span class="site-pv"&gt;</span></span><br><span class="line"><span class="addition">+       &#123;&#123; __('footer.total_views', '&lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt;') &#125;&#125;</span></span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//修改不蒜子数据颜色</span><br><span class="line"><span class="selector-class">.busuanzi-value</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h2><p>侧边栏里的信息有很多，比如站点信息、RSS、链接信息、目录信息等等，我们要有选择性的显示。尽量保持Next主题的宗旨 — <span id="inline-green">简洁</span></p><h3 id="显示近期文章"><a href="#显示近期文章" class="headerlink" title="显示近期文章"></a>显示近期文章</h3><p>当你新写了一些好文章，想尽快告诉大家要怎么办呢？放在侧边栏里那是最合适不过了～(￣▽￣～)(～￣▽￣)～ 比如这样：<br><img src="https://image.chingow.cn/images/f2840b83-ff46-dd56-0aa1-1af57c5e5dad.png" alt="近期文章" title="近期文章"></p><p>首先配置开关和文案，便于随时修改。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中添加近期文章<code>recent_posts</code>的配置：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 近期文章</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br></pre></td></tr></table></figure><p>在语言配置文件里，添加表述文案<code>recent_posts</code>：</p><figure class="highlight diff"><figcaption><span>themes/next/languages/zh-CN.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"><span class="addition">+   recent_posts: 近期文章</span></span><br></pre></td></tr></table></figure><p>在侧边栏原有布局文件中的合适位置添加近期文章显示代码：</p><figure class="highlight diff"><figcaption><span>themes/next/layout/_macro/sidebar.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if theme.social %&#125;</span><br><span class="line">  ...</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ &lt;!-- 添加近期文章 --&gt;</span></span><br><span class="line"><span class="addition">+ &#123;% if theme.recent_posts %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;"&gt;</span></span><br><span class="line"><span class="addition">+     &lt;div class="links-of-blogroll-title"&gt;</span></span><br><span class="line"><span class="addition">+       &lt;!-- modify icon to fire by szw --&gt;</span></span><br><span class="line"><span class="addition">+       &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="addition">+       &#123;&#123; __('sidebar.recent_posts') &#125;&#125;</span></span><br><span class="line"><span class="addition">+     &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+     &lt;ul class="links-of-blogroll-list"&gt;</span></span><br><span class="line"><span class="addition">+       &#123;% set posts = site.posts.sort('-date') %&#125;</span></span><br><span class="line"><span class="addition">+       &#123;% for post in posts.slice('0', '5') %&#125;</span></span><br><span class="line"><span class="addition">+         &lt;li&gt;</span></span><br><span class="line"><span class="addition">+           &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+         &lt;/li&gt;</span></span><br><span class="line"><span class="addition">+       &#123;% endfor %&#125;</span></span><br><span class="line"><span class="addition">+     &lt;/ul&gt;</span></span><br><span class="line"><span class="addition">+   &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+ &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h3><p>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改<code>back2top</code>的<code>scrollpercent</code>：</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">true</span>  <span class="comment">#  浏览页面的时候显示当前浏览进度</span></span><br></pre></td></tr></table></figure><p>配置完之后，发现这个按钮颜色有点单调，让它炫酷点的吧 &lt;(￣ˇ￣)/ ，每次刷新可以生成不同的颜色，在自定义样式文件中添加如下样式：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> <span class="selector-class">.fa-arrow-up</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(random-color(0, 255) - <span class="number">50%</span>, <span class="built_in">random-color</span>(0, 255) - <span class="number">50%</span>, <span class="built_in">random-color</span>(0, 255) - <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏移到左边"><a href="#侧边栏移到左边" class="headerlink" title="侧边栏移到左边"></a>侧边栏移到左边</h3><p>用惯了<strong>Ofice</strong>的人习惯导航菜单在左边的格式，如何把侧边栏放在左侧呢？<br>NexT 主题中 Pisces 和 Gemini 支持通过主题配置文件来将侧边栏置于左侧或右侧。<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>sidebar</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="comment"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">  position:</span> <span class="string">left</span>   <span class="comment"># 调整侧边栏显示位置，仅支持 Pisces 和 Gemini 主题</span></span><br></pre></td></tr></table></figure><p>而 Muse 和 Mist 则需要深度修改源码才能实现改变侧边栏位置：</p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改动效脚本代码：</p><figure class="highlight diff"><figcaption><span>themes/next/source/js/src/motion.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(document)</span><br><span class="line">  .on('sidebar.isShowing', function() &#123;</span><br><span class="line">    NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(</span><br><span class="line"><span class="deletion">-     &#123;paddingRight: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line"><span class="addition">+     &#123;paddingLeft: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line">      SIDEBAR_DISPLAY_DURATION</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">  hideSidebar: function() &#123;</span><br><span class="line"><span class="deletion">-   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingRight: 0&#125;);</span></span><br><span class="line"><span class="addition">+   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;);</span></span><br><span class="line">    this.sidebarEl.find('.motion-element').velocity('stop').css('display', 'none');</span><br><span class="line">    this.sidebarEl.velocity('stop').velocity(&#123;width: 0&#125;, &#123;display: 'none'&#125;);</span><br><span class="line"></span><br><span class="line">    sidebarToggleLines.init();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此以来就可以将侧边栏放置在左边了，但当窗口宽度缩小到991px之后会出现样式错误：侧边栏收缩消失但是页面左侧仍留有空白间距，此时修改如下代码即可：</p><figure class="highlight diff"><figcaption><span>themes/next/source/css/_common/scaffolding/base.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative; // Required by scrollspy</span><br><span class="line">  font-family: $font-family-base;</span><br><span class="line">  font-size: $font-size-base;</span><br><span class="line">  line-height: $line-height-base;</span><br><span class="line">  color: $text-color;</span><br><span class="line">  background: $body-bg-color;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- +mobile() &#123; padding-left: 0 !important; &#125;</span></span><br><span class="line"><span class="deletion">- +tablet() &#123; padding-left: 0 !important; &#125;  </span></span><br><span class="line"><span class="addition">+ +mobile() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line"><span class="addition">+ +tablet() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line">  +desktop-large() &#123; font-size: $font-size-large; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏目录展开"><a href="#侧边栏目录展开" class="headerlink" title="侧边栏目录展开"></a>侧边栏目录展开</h3><p>侧边栏的TOC目录每次滑到哪儿，目录展开到哪。这样查看文章结构就很不方便，如何设置才能让文章目录默认全部都展开？<br>在 <span id="inline-purple">主题配置文件</span> _config.yml 中修改配置<code>toc</code> ：</p><figure class="highlight yaml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  wrap:</span> <span class="literal">false</span>  <span class="comment">## 如果标题超长，是否换行</span></span><br><span class="line"><span class="attr">  expand_all:</span> <span class="literal">true</span>  <span class="comment">## 侧边栏是否完全展开</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了在 NexT(v7.0+) 主题的基础上整体布局美化的方案，主要包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Font：字体、动态背景canvas_ribbon&lt;/li&gt;
&lt;li&gt;Top：进度条、Follow me、菜单背景收缩&lt;/li&gt;
&lt;li&gt;Footer：备案显示、运行时间、访客统计&lt;/li&gt;
&lt;li&gt;Sidebar：近期文章、浏览进度、左边显示、目录展开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以选择喜欢的方案美化自己的博客，当然最好可以再加入点自己的想法改造。&lt;br&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://ligang-chn.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+NexT(v7.0+) 搭建博客：基础安装</title>
    <link href="https://ligang-chn.github.io/2019/04/29/hexo-satrted/"/>
    <id>https://ligang-chn.github.io/2019/04/29/hexo-satrted/</id>
    <published>2019-04-29T14:16:23.000Z</published>
    <updated>2019-09-30T13:00:13.771Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.chingow.cn/background/006tNc79gy1g37jxk0kq5j327a0ki0th.jpg" alt="Hexo" title="Hexo"></p><p>关于如何搭建Hexo博客的文章已经有很多人写过了，并且有很多人已经写的很深刻很到位了，为什么还要重复写一遍呢？直到我看到了这位同学的博客 <a href="yearito.cn">yearito</a> <strong>（ ps：本站的建站优化大都参考自这里）</strong> ，我有了说服自己的理由：</p><a id="more"></a><ul><li>你可以参考别人的技术方案，集众所长，亲自实践，然后融入自己的思考写出一篇新文章</li><li>即使并没有做出创新性的贡献，自己重新归纳一遍也有助于梳理流程，深化理解</li></ul><!--more--><p></p><p id="div-border-left-red">现在百度 Google 很方便，动动手指就可以搜索到想要的答案，但是太多人都是<strong>『顺手拈来、过目就忘』</strong>，下次遇到同样的问题再搜索一遍。<br>为什么会这样呢？不善于总结，不情愿动手思考，时而久之就会变成所谓的 “代码搬运工” ！</p><p></p><p>闲话不多说了，我们开始吧！</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>在 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官方下载网站</a> 下载源代码，选择最后一项 <code>Source Code</code><br>解压到某一目录, 然后进入此目录,依次执行以下 3 条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>安装完后查看<code>node.js</code>版本，检验是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在命令行中通过 <strong>npm</strong> 来安装 hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="本地启动hexo"><a href="#本地启动hexo" class="headerlink" title="本地启动hexo"></a>本地启动hexo</h3><p>创建一个博客目录（例如 <code>/my-blog</code>），在此目录下，执行初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p my-blog</span><br><span class="line">$ <span class="built_in">cd</span> my-blog</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>执行完毕后，将会生成以下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- node_modules       //依赖安装目录</span><br><span class="line">|-- scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|-- source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   |-- _posts          //文章目录</span><br><span class="line">|-- themes             //主题文件夹</span><br><span class="line">|   |-- landscape      //默认主题</span><br><span class="line">|-- .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">|-- _config.yml        //站点配置文件</span><br><span class="line">|-- db.json</span><br><span class="line">|-- package.json</span><br><span class="line">`-- package-lock.json</span><br></pre></td></tr></table></figure><p>在根目录下执行如下命令启动<strong>hexo</strong>内置的web容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate     <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo server       <span class="comment"># 在本地服务器运行</span></span><br></pre></td></tr></table></figure><p>在浏览器输入IP地址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  就可以看到我们熟悉的<strong> Hello Word </strong>了。</p><p><img src="https://image.chingow.cn/images/d7cced3b-950e-6d7b-6edc-dc3058646ddb.png" alt="Hello Word" title="Hello Word"></p><h3 id="常用命令简化和组合"><a href="#常用命令简化和组合" class="headerlink" title="常用命令简化和组合"></a>常用命令简化和组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g    <span class="comment"># 等同于hexo generate</span></span><br><span class="line">$ hexo s    <span class="comment"># 等同于hexo server</span></span><br><span class="line">$ hexo p    <span class="comment"># 等同于hexo port </span></span><br><span class="line">$ hexo d    <span class="comment"># 等同于hexo deploy</span></span><br></pre></td></tr></table></figure><p>当本地不想使用默认的4000端口时（比如在服务器上，默认使用80端口），可以使用 port 命令更改启动端口<br>另外，<strong>hexo</strong>支持命令合并，比方说 生成静态文件 → 本地启动80端口，我们可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -g -p 80</span><br></pre></td></tr></table></figure><h2 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><p>hexo 安装主题的方式非常简单, 只需几个简单的命令即可。<br>将NexT主题文件拷贝至<strong>themes</strong>目录下，然后修改 <span id="inline-blue">站点配置文件</span> _config.yml 中的 <code>theme</code>字段为<code>next</code>即可。</p><p>cd 到博客的根目录下执行以下命令下载主题文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br><span class="line"></span><br><span class="line">$ vim _config.yml</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>清除 <strong>hexo</strong>缓存，重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo s -g</span><br></pre></td></tr></table></figure><p>大部分的设定都能在 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官方文档</a> 里找到, 如主题设定、侧栏、头像、友情链接、打赏等等，在此就不多讲了，照着文档走就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.chingow.cn/background/006tNc79gy1g37jxk0kq5j327a0ki0th.jpg&quot; alt=&quot;Hexo&quot; title=&quot;Hexo&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于如何搭建Hexo博客的文章已经有很多人写过了，并且有很多人已经写的很深刻很到位了，为什么还要重复写一遍呢？直到我看到了这位同学的博客 &lt;a href=&quot;yearito.cn&quot;&gt;yearito&lt;/a&gt; &lt;strong&gt;（ ps：本站的建站优化大都参考自这里）&lt;/strong&gt; ，我有了说服自己的理由：&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ligang-chn.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ligang-chn.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
